
KLTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9f8  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800abe0  0800abe0  0001abe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac50  0800ac50  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac50  0800ac50  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac50  0800ac50  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac50  0800ac50  0001ac50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac54  0800ac54  0001ac54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800ac58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b94  200001fc  0800ae54  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d90  0800ae54  00020d90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012656  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b5  00000000  00000000  0003287b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00035930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000eb8  00000000  00000000  00036938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c4ea  00000000  00000000  000377f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014710  00000000  00000000  00053cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097d59  00000000  00000000  000683ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100143  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004484  00000000  00000000  00100194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001fc 	.word	0x200001fc
 8000204:	00000000 	.word	0x00000000
 8000208:	0800abc8 	.word	0x0800abc8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000200 	.word	0x20000200
 8000224:	0800abc8 	.word	0x0800abc8

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_drsub>:
 800024c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000250:	e002      	b.n	8000258 <__adddf3>
 8000252:	bf00      	nop

08000254 <__aeabi_dsub>:
 8000254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000258 <__adddf3>:
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000262:	ea94 0f05 	teq	r4, r5
 8000266:	bf08      	it	eq
 8000268:	ea90 0f02 	teqeq	r0, r2
 800026c:	bf1f      	itttt	ne
 800026e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000272:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027e:	f000 80e2 	beq.w	8000446 <__adddf3+0x1ee>
 8000282:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028a:	bfb8      	it	lt
 800028c:	426d      	neglt	r5, r5
 800028e:	dd0c      	ble.n	80002aa <__adddf3+0x52>
 8000290:	442c      	add	r4, r5
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	ea82 0000 	eor.w	r0, r2, r0
 800029e:	ea83 0101 	eor.w	r1, r3, r1
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	2d36      	cmp	r5, #54	; 0x36
 80002ac:	bf88      	it	hi
 80002ae:	bd30      	pophi	{r4, r5, pc}
 80002b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x70>
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x84>
 80002d6:	4252      	negs	r2, r2
 80002d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002dc:	ea94 0f05 	teq	r4, r5
 80002e0:	f000 80a7 	beq.w	8000432 <__adddf3+0x1da>
 80002e4:	f1a4 0401 	sub.w	r4, r4, #1
 80002e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002ec:	db0d      	blt.n	800030a <__adddf3+0xb2>
 80002ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f2:	fa22 f205 	lsr.w	r2, r2, r5
 80002f6:	1880      	adds	r0, r0, r2
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000300:	1880      	adds	r0, r0, r2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	4159      	adcs	r1, r3
 8000308:	e00e      	b.n	8000328 <__adddf3+0xd0>
 800030a:	f1a5 0520 	sub.w	r5, r5, #32
 800030e:	f10e 0e20 	add.w	lr, lr, #32
 8000312:	2a01      	cmp	r2, #1
 8000314:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000318:	bf28      	it	cs
 800031a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031e:	fa43 f305 	asr.w	r3, r3, r5
 8000322:	18c0      	adds	r0, r0, r3
 8000324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800032c:	d507      	bpl.n	800033e <__adddf3+0xe6>
 800032e:	f04f 0e00 	mov.w	lr, #0
 8000332:	f1dc 0c00 	rsbs	ip, ip, #0
 8000336:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033a:	eb6e 0101 	sbc.w	r1, lr, r1
 800033e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000342:	d31b      	bcc.n	800037c <__adddf3+0x124>
 8000344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000348:	d30c      	bcc.n	8000364 <__adddf3+0x10c>
 800034a:	0849      	lsrs	r1, r1, #1
 800034c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000350:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000354:	f104 0401 	add.w	r4, r4, #1
 8000358:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800035c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000360:	f080 809a 	bcs.w	8000498 <__adddf3+0x240>
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	bf08      	it	eq
 800036a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036e:	f150 0000 	adcs.w	r0, r0, #0
 8000372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000376:	ea41 0105 	orr.w	r1, r1, r5
 800037a:	bd30      	pop	{r4, r5, pc}
 800037c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000380:	4140      	adcs	r0, r0
 8000382:	eb41 0101 	adc.w	r1, r1, r1
 8000386:	3c01      	subs	r4, #1
 8000388:	bf28      	it	cs
 800038a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038e:	d2e9      	bcs.n	8000364 <__adddf3+0x10c>
 8000390:	f091 0f00 	teq	r1, #0
 8000394:	bf04      	itt	eq
 8000396:	4601      	moveq	r1, r0
 8000398:	2000      	moveq	r0, #0
 800039a:	fab1 f381 	clz	r3, r1
 800039e:	bf08      	it	eq
 80003a0:	3320      	addeq	r3, #32
 80003a2:	f1a3 030b 	sub.w	r3, r3, #11
 80003a6:	f1b3 0220 	subs.w	r2, r3, #32
 80003aa:	da0c      	bge.n	80003c6 <__adddf3+0x16e>
 80003ac:	320c      	adds	r2, #12
 80003ae:	dd08      	ble.n	80003c2 <__adddf3+0x16a>
 80003b0:	f102 0c14 	add.w	ip, r2, #20
 80003b4:	f1c2 020c 	rsb	r2, r2, #12
 80003b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003bc:	fa21 f102 	lsr.w	r1, r1, r2
 80003c0:	e00c      	b.n	80003dc <__adddf3+0x184>
 80003c2:	f102 0214 	add.w	r2, r2, #20
 80003c6:	bfd8      	it	le
 80003c8:	f1c2 0c20 	rsble	ip, r2, #32
 80003cc:	fa01 f102 	lsl.w	r1, r1, r2
 80003d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d4:	bfdc      	itt	le
 80003d6:	ea41 010c 	orrle.w	r1, r1, ip
 80003da:	4090      	lslle	r0, r2
 80003dc:	1ae4      	subs	r4, r4, r3
 80003de:	bfa2      	ittt	ge
 80003e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e4:	4329      	orrge	r1, r5
 80003e6:	bd30      	popge	{r4, r5, pc}
 80003e8:	ea6f 0404 	mvn.w	r4, r4
 80003ec:	3c1f      	subs	r4, #31
 80003ee:	da1c      	bge.n	800042a <__adddf3+0x1d2>
 80003f0:	340c      	adds	r4, #12
 80003f2:	dc0e      	bgt.n	8000412 <__adddf3+0x1ba>
 80003f4:	f104 0414 	add.w	r4, r4, #20
 80003f8:	f1c4 0220 	rsb	r2, r4, #32
 80003fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000400:	fa01 f302 	lsl.w	r3, r1, r2
 8000404:	ea40 0003 	orr.w	r0, r0, r3
 8000408:	fa21 f304 	lsr.w	r3, r1, r4
 800040c:	ea45 0103 	orr.w	r1, r5, r3
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f1c4 040c 	rsb	r4, r4, #12
 8000416:	f1c4 0220 	rsb	r2, r4, #32
 800041a:	fa20 f002 	lsr.w	r0, r0, r2
 800041e:	fa01 f304 	lsl.w	r3, r1, r4
 8000422:	ea40 0003 	orr.w	r0, r0, r3
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	fa21 f004 	lsr.w	r0, r1, r4
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	f094 0f00 	teq	r4, #0
 8000436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043a:	bf06      	itte	eq
 800043c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000440:	3401      	addeq	r4, #1
 8000442:	3d01      	subne	r5, #1
 8000444:	e74e      	b.n	80002e4 <__adddf3+0x8c>
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf18      	it	ne
 800044c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000450:	d029      	beq.n	80004a6 <__adddf3+0x24e>
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	d005      	beq.n	800046a <__adddf3+0x212>
 800045e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000462:	bf04      	itt	eq
 8000464:	4619      	moveq	r1, r3
 8000466:	4610      	moveq	r0, r2
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea91 0f03 	teq	r1, r3
 800046e:	bf1e      	ittt	ne
 8000470:	2100      	movne	r1, #0
 8000472:	2000      	movne	r0, #0
 8000474:	bd30      	popne	{r4, r5, pc}
 8000476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047a:	d105      	bne.n	8000488 <__adddf3+0x230>
 800047c:	0040      	lsls	r0, r0, #1
 800047e:	4149      	adcs	r1, r1
 8000480:	bf28      	it	cs
 8000482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000486:	bd30      	pop	{r4, r5, pc}
 8000488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800048c:	bf3c      	itt	cc
 800048e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000492:	bd30      	popcc	{r4, r5, pc}
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800049c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004aa:	bf1a      	itte	ne
 80004ac:	4619      	movne	r1, r3
 80004ae:	4610      	movne	r0, r2
 80004b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b4:	bf1c      	itt	ne
 80004b6:	460b      	movne	r3, r1
 80004b8:	4602      	movne	r2, r0
 80004ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004be:	bf06      	itte	eq
 80004c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c4:	ea91 0f03 	teqeq	r1, r3
 80004c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop

080004d0 <__aeabi_ui2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f04f 0500 	mov.w	r5, #0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e750      	b.n	8000390 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_i2d>:
 80004f0:	f090 0f00 	teq	r0, #0
 80004f4:	bf04      	itt	eq
 80004f6:	2100      	moveq	r1, #0
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000500:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e73e      	b.n	8000390 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_f2d>:
 8000514:	0042      	lsls	r2, r0, #1
 8000516:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051a:	ea4f 0131 	mov.w	r1, r1, rrx
 800051e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000522:	bf1f      	itttt	ne
 8000524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000530:	4770      	bxne	lr
 8000532:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000536:	bf08      	it	eq
 8000538:	4770      	bxeq	lr
 800053a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053e:	bf04      	itt	eq
 8000540:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 7460 	mov.w	r4, #896	; 0x380
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e71c      	b.n	8000390 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_ul2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	e00a      	b.n	800057e <__aeabi_l2d+0x16>

08000568 <__aeabi_l2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000576:	d502      	bpl.n	800057e <__aeabi_l2d+0x16>
 8000578:	4240      	negs	r0, r0
 800057a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000582:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058a:	f43f aed8 	beq.w	800033e <__adddf3+0xe6>
 800058e:	f04f 0203 	mov.w	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a6:	f1c2 0320 	rsb	r3, r2, #32
 80005aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b6:	ea40 000e 	orr.w	r0, r0, lr
 80005ba:	fa21 f102 	lsr.w	r1, r1, r2
 80005be:	4414      	add	r4, r2
 80005c0:	e6bd      	b.n	800033e <__adddf3+0xe6>
 80005c2:	bf00      	nop

080005c4 <__aeabi_dmul>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d2:	bf1d      	ittte	ne
 80005d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d8:	ea94 0f0c 	teqne	r4, ip
 80005dc:	ea95 0f0c 	teqne	r5, ip
 80005e0:	f000 f8de 	bleq	80007a0 <__aeabi_dmul+0x1dc>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea81 0603 	eor.w	r6, r1, r3
 80005ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f6:	bf18      	it	ne
 80005f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000604:	d038      	beq.n	8000678 <__aeabi_dmul+0xb4>
 8000606:	fba0 ce02 	umull	ip, lr, r0, r2
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000616:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061a:	f04f 0600 	mov.w	r6, #0
 800061e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000622:	f09c 0f00 	teq	ip, #0
 8000626:	bf18      	it	ne
 8000628:	f04e 0e01 	orrne.w	lr, lr, #1
 800062c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000638:	d204      	bcs.n	8000644 <__aeabi_dmul+0x80>
 800063a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063e:	416d      	adcs	r5, r5
 8000640:	eb46 0606 	adc.w	r6, r6, r6
 8000644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800064c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800065c:	bf88      	it	hi
 800065e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000662:	d81e      	bhi.n	80006a2 <__aeabi_dmul+0xde>
 8000664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066e:	f150 0000 	adcs.w	r0, r0, #0
 8000672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800067c:	ea46 0101 	orr.w	r1, r6, r1
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	ea81 0103 	eor.w	r1, r1, r3
 8000688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800068c:	bfc2      	ittt	gt
 800068e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000696:	bd70      	popgt	{r4, r5, r6, pc}
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f04f 0e00 	mov.w	lr, #0
 80006a0:	3c01      	subs	r4, #1
 80006a2:	f300 80ab 	bgt.w	80007fc <__aeabi_dmul+0x238>
 80006a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006aa:	bfde      	ittt	le
 80006ac:	2000      	movle	r0, #0
 80006ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd70      	pople	{r4, r5, r6, pc}
 80006b4:	f1c4 0400 	rsb	r4, r4, #0
 80006b8:	3c20      	subs	r4, #32
 80006ba:	da35      	bge.n	8000728 <__aeabi_dmul+0x164>
 80006bc:	340c      	adds	r4, #12
 80006be:	dc1b      	bgt.n	80006f8 <__aeabi_dmul+0x134>
 80006c0:	f104 0414 	add.w	r4, r4, #20
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f305 	lsl.w	r3, r0, r5
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	fa21 f604 	lsr.w	r6, r1, r4
 80006e8:	eb42 0106 	adc.w	r1, r2, r6
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f1c4 040c 	rsb	r4, r4, #12
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f304 	lsl.w	r3, r0, r4
 8000704:	fa20 f005 	lsr.w	r0, r0, r5
 8000708:	fa01 f204 	lsl.w	r2, r1, r4
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	f141 0100 	adc.w	r1, r1, #0
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f205 	lsl.w	r2, r0, r5
 8000730:	ea4e 0e02 	orr.w	lr, lr, r2
 8000734:	fa20 f304 	lsr.w	r3, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea43 0302 	orr.w	r3, r3, r2
 8000740:	fa21 f004 	lsr.w	r0, r1, r4
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	fa21 f204 	lsr.w	r2, r1, r4
 800074c:	ea20 0002 	bic.w	r0, r0, r2
 8000750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f094 0f00 	teq	r4, #0
 8000764:	d10f      	bne.n	8000786 <__aeabi_dmul+0x1c2>
 8000766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076a:	0040      	lsls	r0, r0, #1
 800076c:	eb41 0101 	adc.w	r1, r1, r1
 8000770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3c01      	subeq	r4, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1a6>
 800077a:	ea41 0106 	orr.w	r1, r1, r6
 800077e:	f095 0f00 	teq	r5, #0
 8000782:	bf18      	it	ne
 8000784:	4770      	bxne	lr
 8000786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	eb43 0303 	adc.w	r3, r3, r3
 8000790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000794:	bf08      	it	eq
 8000796:	3d01      	subeq	r5, #1
 8000798:	d0f7      	beq.n	800078a <__aeabi_dmul+0x1c6>
 800079a:	ea43 0306 	orr.w	r3, r3, r6
 800079e:	4770      	bx	lr
 80007a0:	ea94 0f0c 	teq	r4, ip
 80007a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a8:	bf18      	it	ne
 80007aa:	ea95 0f0c 	teqne	r5, ip
 80007ae:	d00c      	beq.n	80007ca <__aeabi_dmul+0x206>
 80007b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b4:	bf18      	it	ne
 80007b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ba:	d1d1      	bne.n	8000760 <__aeabi_dmul+0x19c>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ce:	bf06      	itte	eq
 80007d0:	4610      	moveq	r0, r2
 80007d2:	4619      	moveq	r1, r3
 80007d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d8:	d019      	beq.n	800080e <__aeabi_dmul+0x24a>
 80007da:	ea94 0f0c 	teq	r4, ip
 80007de:	d102      	bne.n	80007e6 <__aeabi_dmul+0x222>
 80007e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e4:	d113      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007e6:	ea95 0f0c 	teq	r5, ip
 80007ea:	d105      	bne.n	80007f8 <__aeabi_dmul+0x234>
 80007ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f0:	bf1c      	itt	ne
 80007f2:	4610      	movne	r0, r2
 80007f4:	4619      	movne	r1, r3
 80007f6:	d10a      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000816:	bd70      	pop	{r4, r5, r6, pc}

08000818 <__aeabi_ddiv>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000826:	bf1d      	ittte	ne
 8000828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800082c:	ea94 0f0c 	teqne	r4, ip
 8000830:	ea95 0f0c 	teqne	r5, ip
 8000834:	f000 f8a7 	bleq	8000986 <__aeabi_ddiv+0x16e>
 8000838:	eba4 0405 	sub.w	r4, r4, r5
 800083c:	ea81 0e03 	eor.w	lr, r1, r3
 8000840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000848:	f000 8088 	beq.w	800095c <__aeabi_ddiv+0x144>
 800084c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800085c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000868:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800086c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000870:	429d      	cmp	r5, r3
 8000872:	bf08      	it	eq
 8000874:	4296      	cmpeq	r6, r2
 8000876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087e:	d202      	bcs.n	8000886 <__aeabi_ddiv+0x6e>
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	1ab6      	subs	r6, r6, r2
 8000888:	eb65 0503 	sbc.w	r5, r5, r3
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f8:	d018      	beq.n	800092c <__aeabi_ddiv+0x114>
 80008fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000902:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000916:	d1c0      	bne.n	800089a <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	d10b      	bne.n	8000936 <__aeabi_ddiv+0x11e>
 800091e:	ea41 0100 	orr.w	r1, r1, r0
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092a:	e7b6      	b.n	800089a <__aeabi_ddiv+0x82>
 800092c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000930:	bf04      	itt	eq
 8000932:	4301      	orreq	r1, r0
 8000934:	2000      	moveq	r0, #0
 8000936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093a:	bf88      	it	hi
 800093c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000940:	f63f aeaf 	bhi.w	80006a2 <__aeabi_dmul+0xde>
 8000944:	ebb5 0c03 	subs.w	ip, r5, r3
 8000948:	bf04      	itt	eq
 800094a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000952:	f150 0000 	adcs.w	r0, r0, #0
 8000956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000968:	bfc2      	ittt	gt
 800096a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000972:	bd70      	popgt	{r4, r5, r6, pc}
 8000974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000978:	f04f 0e00 	mov.w	lr, #0
 800097c:	3c01      	subs	r4, #1
 800097e:	e690      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000980:	ea45 0e06 	orr.w	lr, r5, r6
 8000984:	e68d      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098a:	ea94 0f0c 	teq	r4, ip
 800098e:	bf08      	it	eq
 8000990:	ea95 0f0c 	teqeq	r5, ip
 8000994:	f43f af3b 	beq.w	800080e <__aeabi_dmul+0x24a>
 8000998:	ea94 0f0c 	teq	r4, ip
 800099c:	d10a      	bne.n	80009b4 <__aeabi_ddiv+0x19c>
 800099e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a2:	f47f af34 	bne.w	800080e <__aeabi_dmul+0x24a>
 80009a6:	ea95 0f0c 	teq	r5, ip
 80009aa:	f47f af25 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e72c      	b.n	800080e <__aeabi_dmul+0x24a>
 80009b4:	ea95 0f0c 	teq	r5, ip
 80009b8:	d106      	bne.n	80009c8 <__aeabi_ddiv+0x1b0>
 80009ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009be:	f43f aefd 	beq.w	80007bc <__aeabi_dmul+0x1f8>
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	e722      	b.n	800080e <__aeabi_dmul+0x24a>
 80009c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009cc:	bf18      	it	ne
 80009ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d2:	f47f aec5 	bne.w	8000760 <__aeabi_dmul+0x19c>
 80009d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009da:	f47f af0d 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e2:	f47f aeeb 	bne.w	80007bc <__aeabi_dmul+0x1f8>
 80009e6:	e712      	b.n	800080e <__aeabi_dmul+0x24a>

080009e8 <__gedf2>:
 80009e8:	f04f 3cff 	mov.w	ip, #4294967295
 80009ec:	e006      	b.n	80009fc <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__ledf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	e002      	b.n	80009fc <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__cmpdf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a12:	d01b      	beq.n	8000a4c <__cmpdf2+0x54>
 8000a14:	b001      	add	sp, #4
 8000a16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1a:	bf0c      	ite	eq
 8000a1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a20:	ea91 0f03 	teqne	r1, r3
 8000a24:	bf02      	ittt	eq
 8000a26:	ea90 0f02 	teqeq	r0, r2
 8000a2a:	2000      	moveq	r0, #0
 8000a2c:	4770      	bxeq	lr
 8000a2e:	f110 0f00 	cmn.w	r0, #0
 8000a32:	ea91 0f03 	teq	r1, r3
 8000a36:	bf58      	it	pl
 8000a38:	4299      	cmppl	r1, r3
 8000a3a:	bf08      	it	eq
 8000a3c:	4290      	cmpeq	r0, r2
 8000a3e:	bf2c      	ite	cs
 8000a40:	17d8      	asrcs	r0, r3, #31
 8000a42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a46:	f040 0001 	orr.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__cmpdf2+0x64>
 8000a56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5a:	d107      	bne.n	8000a6c <__cmpdf2+0x74>
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d1d6      	bne.n	8000a14 <__cmpdf2+0x1c>
 8000a66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6a:	d0d3      	beq.n	8000a14 <__cmpdf2+0x1c>
 8000a6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_cdrcmple>:
 8000a74:	4684      	mov	ip, r0
 8000a76:	4610      	mov	r0, r2
 8000a78:	4662      	mov	r2, ip
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4663      	mov	r3, ip
 8000a80:	e000      	b.n	8000a84 <__aeabi_cdcmpeq>
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdcmpeq>:
 8000a84:	b501      	push	{r0, lr}
 8000a86:	f7ff ffb7 	bl	80009f8 <__cmpdf2>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	bf48      	it	mi
 8000a8e:	f110 0f00 	cmnmi.w	r0, #0
 8000a92:	bd01      	pop	{r0, pc}

08000a94 <__aeabi_dcmpeq>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff fff4 	bl	8000a84 <__aeabi_cdcmpeq>
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2001      	moveq	r0, #1
 8000aa0:	2000      	movne	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmplt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffea 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmple>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffe0 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpge>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffce 	bl	8000a74 <__aeabi_cdrcmple>
 8000ad8:	bf94      	ite	ls
 8000ada:	2001      	movls	r0, #1
 8000adc:	2000      	movhi	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpgt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffc4 	bl	8000a74 <__aeabi_cdrcmple>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_frsub>:
 8000bd8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	e002      	b.n	8000be4 <__addsf3>
 8000bde:	bf00      	nop

08000be0 <__aeabi_fsub>:
 8000be0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000be4 <__addsf3>:
 8000be4:	0042      	lsls	r2, r0, #1
 8000be6:	bf1f      	itttt	ne
 8000be8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bec:	ea92 0f03 	teqne	r2, r3
 8000bf0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bf4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf8:	d06a      	beq.n	8000cd0 <__addsf3+0xec>
 8000bfa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bfe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c02:	bfc1      	itttt	gt
 8000c04:	18d2      	addgt	r2, r2, r3
 8000c06:	4041      	eorgt	r1, r0
 8000c08:	4048      	eorgt	r0, r1
 8000c0a:	4041      	eorgt	r1, r0
 8000c0c:	bfb8      	it	lt
 8000c0e:	425b      	neglt	r3, r3
 8000c10:	2b19      	cmp	r3, #25
 8000c12:	bf88      	it	hi
 8000c14:	4770      	bxhi	lr
 8000c16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c22:	bf18      	it	ne
 8000c24:	4240      	negne	r0, r0
 8000c26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c32:	bf18      	it	ne
 8000c34:	4249      	negne	r1, r1
 8000c36:	ea92 0f03 	teq	r2, r3
 8000c3a:	d03f      	beq.n	8000cbc <__addsf3+0xd8>
 8000c3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c40:	fa41 fc03 	asr.w	ip, r1, r3
 8000c44:	eb10 000c 	adds.w	r0, r0, ip
 8000c48:	f1c3 0320 	rsb	r3, r3, #32
 8000c4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c54:	d502      	bpl.n	8000c5c <__addsf3+0x78>
 8000c56:	4249      	negs	r1, r1
 8000c58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c60:	d313      	bcc.n	8000c8a <__addsf3+0xa6>
 8000c62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c66:	d306      	bcc.n	8000c76 <__addsf3+0x92>
 8000c68:	0840      	lsrs	r0, r0, #1
 8000c6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c6e:	f102 0201 	add.w	r2, r2, #1
 8000c72:	2afe      	cmp	r2, #254	; 0xfe
 8000c74:	d251      	bcs.n	8000d1a <__addsf3+0x136>
 8000c76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c7e:	bf08      	it	eq
 8000c80:	f020 0001 	biceq.w	r0, r0, #1
 8000c84:	ea40 0003 	orr.w	r0, r0, r3
 8000c88:	4770      	bx	lr
 8000c8a:	0049      	lsls	r1, r1, #1
 8000c8c:	eb40 0000 	adc.w	r0, r0, r0
 8000c90:	3a01      	subs	r2, #1
 8000c92:	bf28      	it	cs
 8000c94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c98:	d2ed      	bcs.n	8000c76 <__addsf3+0x92>
 8000c9a:	fab0 fc80 	clz	ip, r0
 8000c9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ca2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ca6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000caa:	bfaa      	itet	ge
 8000cac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cb0:	4252      	neglt	r2, r2
 8000cb2:	4318      	orrge	r0, r3
 8000cb4:	bfbc      	itt	lt
 8000cb6:	40d0      	lsrlt	r0, r2
 8000cb8:	4318      	orrlt	r0, r3
 8000cba:	4770      	bx	lr
 8000cbc:	f092 0f00 	teq	r2, #0
 8000cc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cc4:	bf06      	itte	eq
 8000cc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cca:	3201      	addeq	r2, #1
 8000ccc:	3b01      	subne	r3, #1
 8000cce:	e7b5      	b.n	8000c3c <__addsf3+0x58>
 8000cd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd8:	bf18      	it	ne
 8000cda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cde:	d021      	beq.n	8000d24 <__addsf3+0x140>
 8000ce0:	ea92 0f03 	teq	r2, r3
 8000ce4:	d004      	beq.n	8000cf0 <__addsf3+0x10c>
 8000ce6:	f092 0f00 	teq	r2, #0
 8000cea:	bf08      	it	eq
 8000cec:	4608      	moveq	r0, r1
 8000cee:	4770      	bx	lr
 8000cf0:	ea90 0f01 	teq	r0, r1
 8000cf4:	bf1c      	itt	ne
 8000cf6:	2000      	movne	r0, #0
 8000cf8:	4770      	bxne	lr
 8000cfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cfe:	d104      	bne.n	8000d0a <__addsf3+0x126>
 8000d00:	0040      	lsls	r0, r0, #1
 8000d02:	bf28      	it	cs
 8000d04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d08:	4770      	bx	lr
 8000d0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d0e:	bf3c      	itt	cc
 8000d10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bxcc	lr
 8000d16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d22:	4770      	bx	lr
 8000d24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d28:	bf16      	itet	ne
 8000d2a:	4608      	movne	r0, r1
 8000d2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d30:	4601      	movne	r1, r0
 8000d32:	0242      	lsls	r2, r0, #9
 8000d34:	bf06      	itte	eq
 8000d36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d3a:	ea90 0f01 	teqeq	r0, r1
 8000d3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_ui2f>:
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e004      	b.n	8000d54 <__aeabi_i2f+0x8>
 8000d4a:	bf00      	nop

08000d4c <__aeabi_i2f>:
 8000d4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d50:	bf48      	it	mi
 8000d52:	4240      	negmi	r0, r0
 8000d54:	ea5f 0c00 	movs.w	ip, r0
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d60:	4601      	mov	r1, r0
 8000d62:	f04f 0000 	mov.w	r0, #0
 8000d66:	e01c      	b.n	8000da2 <__aeabi_l2f+0x2a>

08000d68 <__aeabi_ul2f>:
 8000d68:	ea50 0201 	orrs.w	r2, r0, r1
 8000d6c:	bf08      	it	eq
 8000d6e:	4770      	bxeq	lr
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	e00a      	b.n	8000d8c <__aeabi_l2f+0x14>
 8000d76:	bf00      	nop

08000d78 <__aeabi_l2f>:
 8000d78:	ea50 0201 	orrs.w	r2, r0, r1
 8000d7c:	bf08      	it	eq
 8000d7e:	4770      	bxeq	lr
 8000d80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d84:	d502      	bpl.n	8000d8c <__aeabi_l2f+0x14>
 8000d86:	4240      	negs	r0, r0
 8000d88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d8c:	ea5f 0c01 	movs.w	ip, r1
 8000d90:	bf02      	ittt	eq
 8000d92:	4684      	moveq	ip, r0
 8000d94:	4601      	moveq	r1, r0
 8000d96:	2000      	moveq	r0, #0
 8000d98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d9c:	bf08      	it	eq
 8000d9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000da2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000da6:	fabc f28c 	clz	r2, ip
 8000daa:	3a08      	subs	r2, #8
 8000dac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000db0:	db10      	blt.n	8000dd4 <__aeabi_l2f+0x5c>
 8000db2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db6:	4463      	add	r3, ip
 8000db8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dbc:	f1c2 0220 	rsb	r2, r2, #32
 8000dc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc8:	eb43 0002 	adc.w	r0, r3, r2
 8000dcc:	bf08      	it	eq
 8000dce:	f020 0001 	biceq.w	r0, r0, #1
 8000dd2:	4770      	bx	lr
 8000dd4:	f102 0220 	add.w	r2, r2, #32
 8000dd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000de4:	fa21 f202 	lsr.w	r2, r1, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df2:	4770      	bx	lr

08000df4 <__gesf2>:
 8000df4:	f04f 3cff 	mov.w	ip, #4294967295
 8000df8:	e006      	b.n	8000e08 <__cmpsf2+0x4>
 8000dfa:	bf00      	nop

08000dfc <__lesf2>:
 8000dfc:	f04f 0c01 	mov.w	ip, #1
 8000e00:	e002      	b.n	8000e08 <__cmpsf2+0x4>
 8000e02:	bf00      	nop

08000e04 <__cmpsf2>:
 8000e04:	f04f 0c01 	mov.w	ip, #1
 8000e08:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e18:	bf18      	it	ne
 8000e1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e1e:	d011      	beq.n	8000e44 <__cmpsf2+0x40>
 8000e20:	b001      	add	sp, #4
 8000e22:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e26:	bf18      	it	ne
 8000e28:	ea90 0f01 	teqne	r0, r1
 8000e2c:	bf58      	it	pl
 8000e2e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e32:	bf88      	it	hi
 8000e34:	17c8      	asrhi	r0, r1, #31
 8000e36:	bf38      	it	cc
 8000e38:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e3c:	bf18      	it	ne
 8000e3e:	f040 0001 	orrne.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e48:	d102      	bne.n	8000e50 <__cmpsf2+0x4c>
 8000e4a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e4e:	d105      	bne.n	8000e5c <__cmpsf2+0x58>
 8000e50:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e54:	d1e4      	bne.n	8000e20 <__cmpsf2+0x1c>
 8000e56:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e5a:	d0e1      	beq.n	8000e20 <__cmpsf2+0x1c>
 8000e5c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <__aeabi_cfrcmple>:
 8000e64:	4684      	mov	ip, r0
 8000e66:	4608      	mov	r0, r1
 8000e68:	4661      	mov	r1, ip
 8000e6a:	e7ff      	b.n	8000e6c <__aeabi_cfcmpeq>

08000e6c <__aeabi_cfcmpeq>:
 8000e6c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e6e:	f7ff ffc9 	bl	8000e04 <__cmpsf2>
 8000e72:	2800      	cmp	r0, #0
 8000e74:	bf48      	it	mi
 8000e76:	f110 0f00 	cmnmi.w	r0, #0
 8000e7a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e7c <__aeabi_fcmpeq>:
 8000e7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e80:	f7ff fff4 	bl	8000e6c <__aeabi_cfcmpeq>
 8000e84:	bf0c      	ite	eq
 8000e86:	2001      	moveq	r0, #1
 8000e88:	2000      	movne	r0, #0
 8000e8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e8e:	bf00      	nop

08000e90 <__aeabi_fcmplt>:
 8000e90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e94:	f7ff ffea 	bl	8000e6c <__aeabi_cfcmpeq>
 8000e98:	bf34      	ite	cc
 8000e9a:	2001      	movcc	r0, #1
 8000e9c:	2000      	movcs	r0, #0
 8000e9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_fcmple>:
 8000ea4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea8:	f7ff ffe0 	bl	8000e6c <__aeabi_cfcmpeq>
 8000eac:	bf94      	ite	ls
 8000eae:	2001      	movls	r0, #1
 8000eb0:	2000      	movhi	r0, #0
 8000eb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_fcmpge>:
 8000eb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ebc:	f7ff ffd2 	bl	8000e64 <__aeabi_cfrcmple>
 8000ec0:	bf94      	ite	ls
 8000ec2:	2001      	movls	r0, #1
 8000ec4:	2000      	movhi	r0, #0
 8000ec6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eca:	bf00      	nop

08000ecc <__aeabi_fcmpgt>:
 8000ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed0:	f7ff ffc8 	bl	8000e64 <__aeabi_cfrcmple>
 8000ed4:	bf34      	ite	cc
 8000ed6:	2001      	movcc	r0, #1
 8000ed8:	2000      	movcs	r0, #0
 8000eda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ede:	bf00      	nop

08000ee0 <__aeabi_f2uiz>:
 8000ee0:	0042      	lsls	r2, r0, #1
 8000ee2:	d20e      	bcs.n	8000f02 <__aeabi_f2uiz+0x22>
 8000ee4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ee8:	d30b      	bcc.n	8000f02 <__aeabi_f2uiz+0x22>
 8000eea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000eee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ef2:	d409      	bmi.n	8000f08 <__aeabi_f2uiz+0x28>
 8000ef4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ef8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000efc:	fa23 f002 	lsr.w	r0, r3, r2
 8000f00:	4770      	bx	lr
 8000f02:	f04f 0000 	mov.w	r0, #0
 8000f06:	4770      	bx	lr
 8000f08:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f0c:	d101      	bne.n	8000f12 <__aeabi_f2uiz+0x32>
 8000f0e:	0242      	lsls	r2, r0, #9
 8000f10:	d102      	bne.n	8000f18 <__aeabi_f2uiz+0x38>
 8000f12:	f04f 30ff 	mov.w	r0, #4294967295
 8000f16:	4770      	bx	lr
 8000f18:	f04f 0000 	mov.w	r0, #0
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 8000f26:	f001 f8cd 	bl	80020c4 <HAL_Init>

  /* USER CODE BEGIN Init */
  TXD[0] = 0x01;
 8000f2a:	4ba4      	ldr	r3, [pc, #656]	; (80011bc <main+0x29c>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
  TXD[1] = 0x42;
 8000f30:	4ba2      	ldr	r3, [pc, #648]	; (80011bc <main+0x29c>)
 8000f32:	2242      	movs	r2, #66	; 0x42
 8000f34:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2110      	movs	r1, #16
 8000f3a:	48a1      	ldr	r0, [pc, #644]	; (80011c0 <main+0x2a0>)
 8000f3c:	f001 fbea 	bl	8002714 <HAL_GPIO_WritePin>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f40:	f000 f996 	bl	8001270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f44:	f000 fa56 	bl	80013f4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000f48:	f009 f8bc 	bl	800a0c4 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000f4c:	f000 f9ee 	bl	800132c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000f50:	f000 fa1a 	bl	8001388 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  PCA9685_Init(&hi2c1);
 8000f54:	489b      	ldr	r0, [pc, #620]	; (80011c4 <main+0x2a4>)
 8000f56:	f000 ff85 	bl	8001e64 <PCA9685_Init>
  for (int i = 0; i < 9; i++) {
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
 8000f5e:	e014      	b.n	8000f8a <main+0x6a>
  	PCA9685_SetServoAngle(i, servo_angle[i]);
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	b2dc      	uxtb	r4, r3
 8000f64:	4a98      	ldr	r2, [pc, #608]	; (80011c8 <main+0x2a8>)
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	4413      	add	r3, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fee9 	bl	8000d44 <__aeabi_ui2f>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4619      	mov	r1, r3
 8000f76:	4620      	mov	r0, r4
 8000f78:	f000 ff1e 	bl	8001db8 <PCA9685_SetServoAngle>
  	HAL_Delay(1000);
 8000f7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f80:	f001 f902 	bl	8002188 <HAL_Delay>
  for (int i = 0; i < 9; i++) {
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	3301      	adds	r3, #1
 8000f88:	61fb      	str	r3, [r7, #28]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	dde7      	ble.n	8000f60 <main+0x40>
  	}

  HAL_GPIO_WritePin(GPIOA, STEP_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f96:	488a      	ldr	r0, [pc, #552]	; (80011c0 <main+0x2a0>)
 8000f98:	f001 fbbc 	bl	8002714 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, STEP_DIR_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fa2:	4887      	ldr	r0, [pc, #540]	; (80011c0 <main+0x2a0>)
 8000fa4:	f001 fbb6 	bl	8002714 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //CDC_Transmit_FS(data, strlen(data));
	  	  if(check == 1){ //neu co du lieu den thi truyen di du lieu vua nhan duoc
 8000fa8:	4b88      	ldr	r3, [pc, #544]	; (80011cc <main+0x2ac>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d1fb      	bne.n	8000fa8 <main+0x88>
		  		CDC_Transmit_FS((uint8_t *)ReceivedData, strlen(ReceivedData));
 8000fb0:	4887      	ldr	r0, [pc, #540]	; (80011d0 <main+0x2b0>)
 8000fb2:	f7ff f943 	bl	800023c <strlen>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4884      	ldr	r0, [pc, #528]	; (80011d0 <main+0x2b0>)
 8000fbe:	f009 f977 	bl	800a2b0 <CDC_Transmit_FS>
		  		if(strcmp(ReceivedData, s1) == 0){
 8000fc2:	4984      	ldr	r1, [pc, #528]	; (80011d4 <main+0x2b4>)
 8000fc4:	4882      	ldr	r0, [pc, #520]	; (80011d0 <main+0x2b0>)
 8000fc6:	f7ff f92f 	bl	8000228 <strcmp>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d102      	bne.n	8000fd6 <main+0xb6>
		  				goLeft();
 8000fd0:	f000 fab8 	bl	8001544 <goLeft>
 8000fd4:	e0ef      	b.n	80011b6 <main+0x296>
		  		}

		  		else if(strcmp(ReceivedData, s2) == 0){
 8000fd6:	4980      	ldr	r1, [pc, #512]	; (80011d8 <main+0x2b8>)
 8000fd8:	487d      	ldr	r0, [pc, #500]	; (80011d0 <main+0x2b0>)
 8000fda:	f7ff f925 	bl	8000228 <strcmp>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <main+0xca>
		  				goRight();
 8000fe4:	f000 fa8c 	bl	8001500 <goRight>
 8000fe8:	e0e5      	b.n	80011b6 <main+0x296>
		  		}

		  		else if(strcmp(ReceivedData, s3) == 0){
 8000fea:	497c      	ldr	r1, [pc, #496]	; (80011dc <main+0x2bc>)
 8000fec:	4878      	ldr	r0, [pc, #480]	; (80011d0 <main+0x2b0>)
 8000fee:	f7ff f91b 	bl	8000228 <strcmp>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d102      	bne.n	8000ffe <main+0xde>
		  				forward();
 8000ff8:	f000 fac6 	bl	8001588 <forward>
 8000ffc:	e0db      	b.n	80011b6 <main+0x296>
		  		}

		  		else if(strcmp(ReceivedData, s4) == 0){
 8000ffe:	4978      	ldr	r1, [pc, #480]	; (80011e0 <main+0x2c0>)
 8001000:	4873      	ldr	r0, [pc, #460]	; (80011d0 <main+0x2b0>)
 8001002:	f7ff f911 	bl	8000228 <strcmp>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <main+0xf2>
		  				back();
 800100c:	f000 fade 	bl	80015cc <back>
 8001010:	e0d1      	b.n	80011b6 <main+0x296>
		  		}

		  		else if(strcmp(ReceivedData, s6) == 0){
 8001012:	4974      	ldr	r1, [pc, #464]	; (80011e4 <main+0x2c4>)
 8001014:	486e      	ldr	r0, [pc, #440]	; (80011d0 <main+0x2b0>)
 8001016:	f7ff f907 	bl	8000228 <strcmp>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d13c      	bne.n	800109a <main+0x17a>
		  				countRight += 1;
 8001020:	4b71      	ldr	r3, [pc, #452]	; (80011e8 <main+0x2c8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	4a70      	ldr	r2, [pc, #448]	; (80011e8 <main+0x2c8>)
 8001028:	6013      	str	r3, [r2, #0]
		  				leftNeck();
 800102a:	f000 fb61 	bl	80016f0 <leftNeck>
		  			  	if(countRight > 10){
 800102e:	4b6e      	ldr	r3, [pc, #440]	; (80011e8 <main+0x2c8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b0a      	cmp	r3, #10
 8001034:	dd2e      	ble.n	8001094 <main+0x174>
		  			  		for (int i = 0; i < 10; i++){
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
 800103a:	e028      	b.n	800108e <main+0x16e>
								rightNeck();
 800103c:	f000 fae8 	bl	8001610 <rightNeck>
						  		countRight--;
 8001040:	4b69      	ldr	r3, [pc, #420]	; (80011e8 <main+0x2c8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3b01      	subs	r3, #1
 8001046:	4a68      	ldr	r2, [pc, #416]	; (80011e8 <main+0x2c8>)
 8001048:	6013      	str	r3, [r2, #0]
								for(int j = 0; j < 1; j++){
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	e018      	b.n	8001082 <main+0x162>
									goRight();
 8001050:	f000 fa56 	bl	8001500 <goRight>
							  		PCA9685_SetServoAngle(0, servo_angle[0]);
 8001054:	4b5c      	ldr	r3, [pc, #368]	; (80011c8 <main+0x2a8>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fe73 	bl	8000d44 <__aeabi_ui2f>
 800105e:	4603      	mov	r3, r0
 8001060:	4619      	mov	r1, r3
 8001062:	2000      	movs	r0, #0
 8001064:	f000 fea8 	bl	8001db8 <PCA9685_SetServoAngle>
							  		PCA9685_SetServoAngle(1, servo_angle[1]);
 8001068:	4b57      	ldr	r3, [pc, #348]	; (80011c8 <main+0x2a8>)
 800106a:	785b      	ldrb	r3, [r3, #1]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fe69 	bl	8000d44 <__aeabi_ui2f>
 8001072:	4603      	mov	r3, r0
 8001074:	4619      	mov	r1, r3
 8001076:	2001      	movs	r0, #1
 8001078:	f000 fe9e 	bl	8001db8 <PCA9685_SetServoAngle>
								for(int j = 0; j < 1; j++){
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	3301      	adds	r3, #1
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2b00      	cmp	r3, #0
 8001086:	dde3      	ble.n	8001050 <main+0x130>
		  			  		for (int i = 0; i < 10; i++){
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	3301      	adds	r3, #1
 800108c:	61bb      	str	r3, [r7, #24]
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	2b09      	cmp	r3, #9
 8001092:	ddd3      	ble.n	800103c <main+0x11c>
								}
		  			  		}
		  			  	}
		  			  	stop();
 8001094:	f000 fc98 	bl	80019c8 <stop>
 8001098:	e08d      	b.n	80011b6 <main+0x296>
		  		}

		  		else if(strcmp(ReceivedData, s5) == 0){
 800109a:	4954      	ldr	r1, [pc, #336]	; (80011ec <main+0x2cc>)
 800109c:	484c      	ldr	r0, [pc, #304]	; (80011d0 <main+0x2b0>)
 800109e:	f7ff f8c3 	bl	8000228 <strcmp>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d13c      	bne.n	8001122 <main+0x202>
						countLeft += 1;
 80010a8:	4b51      	ldr	r3, [pc, #324]	; (80011f0 <main+0x2d0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3301      	adds	r3, #1
 80010ae:	4a50      	ldr	r2, [pc, #320]	; (80011f0 <main+0x2d0>)
 80010b0:	6013      	str	r3, [r2, #0]
						rightNeck();
 80010b2:	f000 faad 	bl	8001610 <rightNeck>
						if(countLeft > 10){
 80010b6:	4b4e      	ldr	r3, [pc, #312]	; (80011f0 <main+0x2d0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b0a      	cmp	r3, #10
 80010bc:	dd2e      	ble.n	800111c <main+0x1fc>
							for (int i = 0; i < 10; i++){
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	e028      	b.n	8001116 <main+0x1f6>
								leftNeck();
 80010c4:	f000 fb14 	bl	80016f0 <leftNeck>
								countLeft--;
 80010c8:	4b49      	ldr	r3, [pc, #292]	; (80011f0 <main+0x2d0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	3b01      	subs	r3, #1
 80010ce:	4a48      	ldr	r2, [pc, #288]	; (80011f0 <main+0x2d0>)
 80010d0:	6013      	str	r3, [r2, #0]
								for(int j = 0; j < 5; j++){
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	e018      	b.n	800110a <main+0x1ea>
									goLeft();
 80010d8:	f000 fa34 	bl	8001544 <goLeft>
							  		PCA9685_SetServoAngle(0, servo_angle[0]);
 80010dc:	4b3a      	ldr	r3, [pc, #232]	; (80011c8 <main+0x2a8>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fe2f 	bl	8000d44 <__aeabi_ui2f>
 80010e6:	4603      	mov	r3, r0
 80010e8:	4619      	mov	r1, r3
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 fe64 	bl	8001db8 <PCA9685_SetServoAngle>
							  		PCA9685_SetServoAngle(1, servo_angle[1]);
 80010f0:	4b35      	ldr	r3, [pc, #212]	; (80011c8 <main+0x2a8>)
 80010f2:	785b      	ldrb	r3, [r3, #1]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fe25 	bl	8000d44 <__aeabi_ui2f>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4619      	mov	r1, r3
 80010fe:	2001      	movs	r0, #1
 8001100:	f000 fe5a 	bl	8001db8 <PCA9685_SetServoAngle>
								for(int j = 0; j < 5; j++){
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	3301      	adds	r3, #1
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2b04      	cmp	r3, #4
 800110e:	dde3      	ble.n	80010d8 <main+0x1b8>
							for (int i = 0; i < 10; i++){
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	3301      	adds	r3, #1
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	2b09      	cmp	r3, #9
 800111a:	ddd3      	ble.n	80010c4 <main+0x1a4>
								}
							}
						}
						stop();
 800111c:	f000 fc54 	bl	80019c8 <stop>
 8001120:	e049      	b.n	80011b6 <main+0x296>
		  		}

		  		else if(strcmp(ReceivedData, s7) == 0){
 8001122:	4934      	ldr	r1, [pc, #208]	; (80011f4 <main+0x2d4>)
 8001124:	482a      	ldr	r0, [pc, #168]	; (80011d0 <main+0x2b0>)
 8001126:	f7ff f87f 	bl	8000228 <strcmp>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <main+0x216>
		  			neckUp();
 8001130:	f000 faaa 	bl	8001688 <neckUp>
 8001134:	e03f      	b.n	80011b6 <main+0x296>
		  		}

		  		else if(strcmp(ReceivedData, s8) == 0){
 8001136:	4930      	ldr	r1, [pc, #192]	; (80011f8 <main+0x2d8>)
 8001138:	4825      	ldr	r0, [pc, #148]	; (80011d0 <main+0x2b0>)
 800113a:	f7ff f875 	bl	8000228 <strcmp>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <main+0x22a>
		  			neckDown();
 8001144:	f000 fabe 	bl	80016c4 <neckDown>
 8001148:	e035      	b.n	80011b6 <main+0x296>
		  		}

		  		else if(strcmp(ReceivedData, s9) == 0){
 800114a:	492c      	ldr	r1, [pc, #176]	; (80011fc <main+0x2dc>)
 800114c:	4820      	ldr	r0, [pc, #128]	; (80011d0 <main+0x2b0>)
 800114e:	f7ff f86b 	bl	8000228 <strcmp>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d104      	bne.n	8001162 <main+0x242>
		  			nod();
 8001158:	f000 fc44 	bl	80019e4 <nod>
		  			neckDown();
 800115c:	f000 fab2 	bl	80016c4 <neckDown>
 8001160:	e029      	b.n	80011b6 <main+0x296>
		  		}

		  		else if(strcmp(ReceivedData, s10) == 0){
 8001162:	4927      	ldr	r1, [pc, #156]	; (8001200 <main+0x2e0>)
 8001164:	481a      	ldr	r0, [pc, #104]	; (80011d0 <main+0x2b0>)
 8001166:	f7ff f85f 	bl	8000228 <strcmp>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d102      	bne.n	8001176 <main+0x256>
		  			rightHand();
 8001170:	f000 fb7b 	bl	800186a <rightHand>
 8001174:	e01f      	b.n	80011b6 <main+0x296>
		  		}

		  		else if(strcmp(ReceivedData, s11) == 0){
 8001176:	4923      	ldr	r1, [pc, #140]	; (8001204 <main+0x2e4>)
 8001178:	4815      	ldr	r0, [pc, #84]	; (80011d0 <main+0x2b0>)
 800117a:	f7ff f855 	bl	8000228 <strcmp>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d102      	bne.n	800118a <main+0x26a>
		  			leftHand();
 8001184:	f000 fb3c 	bl	8001800 <leftHand>
 8001188:	e015      	b.n	80011b6 <main+0x296>
		  		}

		  		else if(strcmp(ReceivedData, s12) == 0){
 800118a:	491f      	ldr	r1, [pc, #124]	; (8001208 <main+0x2e8>)
 800118c:	4810      	ldr	r0, [pc, #64]	; (80011d0 <main+0x2b0>)
 800118e:	f7ff f84b 	bl	8000228 <strcmp>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <main+0x27e>
		  			LRHand();
 8001198:	f000 fb9c 	bl	80018d4 <LRHand>
 800119c:	e00b      	b.n	80011b6 <main+0x296>
		  		}

		  		else if(strcmp(ReceivedData, s13) == 0){
 800119e:	491b      	ldr	r1, [pc, #108]	; (800120c <main+0x2ec>)
 80011a0:	480b      	ldr	r0, [pc, #44]	; (80011d0 <main+0x2b0>)
 80011a2:	f7ff f841 	bl	8000228 <strcmp>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <main+0x292>
		  			shakeHand();
 80011ac:	f000 fbe3 	bl	8001976 <shakeHand>
 80011b0:	e001      	b.n	80011b6 <main+0x296>
		  		}

		  		else{
		  			stop();
 80011b2:	f000 fc09 	bl	80019c8 <stop>
		  		}

		  		for (int i = 0; i < 9; i++) {
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	e03a      	b.n	8001232 <main+0x312>
 80011bc:	200002cc 	.word	0x200002cc
 80011c0:	40010800 	.word	0x40010800
 80011c4:	20000218 	.word	0x20000218
 80011c8:	20000074 	.word	0x20000074
 80011cc:	20000680 	.word	0x20000680
 80011d0:	20000638 	.word	0x20000638
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000008 	.word	0x20000008
 80011dc:	20000010 	.word	0x20000010
 80011e0:	20000018 	.word	0x20000018
 80011e4:	20000028 	.word	0x20000028
 80011e8:	200002c4 	.word	0x200002c4
 80011ec:	20000020 	.word	0x20000020
 80011f0:	200002c8 	.word	0x200002c8
 80011f4:	20000030 	.word	0x20000030
 80011f8:	20000038 	.word	0x20000038
 80011fc:	20000044 	.word	0x20000044
 8001200:	20000048 	.word	0x20000048
 8001204:	20000054 	.word	0x20000054
 8001208:	20000060 	.word	0x20000060
 800120c:	20000068 	.word	0x20000068
		  		 	PCA9685_SetServoAngle(i, servo_angle[i]);
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	b2dc      	uxtb	r4, r3
 8001214:	4a12      	ldr	r2, [pc, #72]	; (8001260 <main+0x340>)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	4413      	add	r3, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fd91 	bl	8000d44 <__aeabi_ui2f>
 8001222:	4603      	mov	r3, r0
 8001224:	4619      	mov	r1, r3
 8001226:	4620      	mov	r0, r4
 8001228:	f000 fdc6 	bl	8001db8 <PCA9685_SetServoAngle>
		  		for (int i = 0; i < 9; i++) {
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	3301      	adds	r3, #1
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	2b08      	cmp	r3, #8
 8001236:	ddeb      	ble.n	8001210 <main+0x2f0>
		  		}

		  		for(int i = 0; i < dataSize; i++)
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	e007      	b.n	800124e <main+0x32e>
		  		{
		  			ReceivedData[i] = 0;
 800123e:	4a09      	ldr	r2, [pc, #36]	; (8001264 <main+0x344>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
		  		for(int i = 0; i < dataSize; i++)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3301      	adds	r3, #1
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <main+0x348>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d3f2      	bcc.n	800123e <main+0x31e>
		  		}
		  		check = 0;
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <main+0x34c>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
	  	  if(check == 1){ //neu co du lieu den thi truyen di du lieu vua nhan duoc
 800125e:	e6a3      	b.n	8000fa8 <main+0x88>
 8001260:	20000074 	.word	0x20000074
 8001264:	20000638 	.word	0x20000638
 8001268:	2000067c 	.word	0x2000067c
 800126c:	20000680 	.word	0x20000680

08001270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b096      	sub	sp, #88	; 0x58
 8001274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001276:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800127a:	2228      	movs	r2, #40	; 0x28
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f009 fc18 	bl	800aab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001284:	f107 031c 	add.w	r3, r7, #28
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]
 80012a2:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012a4:	2301      	movs	r3, #1
 80012a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012ae:	2300      	movs	r3, #0
 80012b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b2:	2301      	movs	r3, #1
 80012b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b6:	2302      	movs	r3, #2
 80012b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80012c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012ca:	4618      	mov	r0, r3
 80012cc:	f004 f87e 	bl	80053cc <HAL_RCC_OscConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80012d6:	f000 fbb2 	bl	8001a3e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012da:	230f      	movs	r3, #15
 80012dc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012de:	2302      	movs	r3, #2
 80012e0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	2101      	movs	r1, #1
 80012f8:	4618      	mov	r0, r3
 80012fa:	f004 fae9 	bl	80058d0 <HAL_RCC_ClockConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001304:	f000 fb9b 	bl	8001a3e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001308:	2310      	movs	r3, #16
 800130a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800130c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001310:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4618      	mov	r0, r3
 8001316:	f004 fc5f 	bl	8005bd8 <HAL_RCCEx_PeriphCLKConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001320:	f000 fb8d 	bl	8001a3e <Error_Handler>
  }
}
 8001324:	bf00      	nop
 8001326:	3758      	adds	r7, #88	; 0x58
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <MX_I2C1_Init+0x50>)
 8001332:	4a13      	ldr	r2, [pc, #76]	; (8001380 <MX_I2C1_Init+0x54>)
 8001334:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_I2C1_Init+0x50>)
 8001338:	4a12      	ldr	r2, [pc, #72]	; (8001384 <MX_I2C1_Init+0x58>)
 800133a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_I2C1_Init+0x50>)
 800134a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800134e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001350:	4b0a      	ldr	r3, [pc, #40]	; (800137c <MX_I2C1_Init+0x50>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_I2C1_Init+0x50>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <MX_I2C1_Init+0x50>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_I2C1_Init+0x50>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <MX_I2C1_Init+0x50>)
 800136a:	f001 f9eb 	bl	8002744 <HAL_I2C_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001374:	f000 fb63 	bl	8001a3e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000218 	.word	0x20000218
 8001380:	40005400 	.word	0x40005400
 8001384:	000186a0 	.word	0x000186a0

08001388 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_SPI1_Init+0x64>)
 800138e:	4a18      	ldr	r2, [pc, #96]	; (80013f0 <MX_SPI1_Init+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_SPI1_Init+0x64>)
 8001394:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001398:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_SPI1_Init+0x64>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_SPI1_Init+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_SPI1_Init+0x64>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_SPI1_Init+0x64>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_SPI1_Init+0x64>)
 80013b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013ba:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_SPI1_Init+0x64>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <MX_SPI1_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_SPI1_Init+0x64>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013cc:	4b07      	ldr	r3, [pc, #28]	; (80013ec <MX_SPI1_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_SPI1_Init+0x64>)
 80013d4:	220a      	movs	r2, #10
 80013d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <MX_SPI1_Init+0x64>)
 80013da:	f004 fcb3 	bl	8005d44 <HAL_SPI_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013e4:	f000 fb2b 	bl	8001a3e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2000026c 	.word	0x2000026c
 80013f0:	40013000 	.word	0x40013000

080013f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001408:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <MX_GPIO_Init+0xfc>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a38      	ldr	r2, [pc, #224]	; (80014f0 <MX_GPIO_Init+0xfc>)
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <MX_GPIO_Init+0xfc>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001420:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <MX_GPIO_Init+0xfc>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	4a32      	ldr	r2, [pc, #200]	; (80014f0 <MX_GPIO_Init+0xfc>)
 8001426:	f043 0320 	orr.w	r3, r3, #32
 800142a:	6193      	str	r3, [r2, #24]
 800142c:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <MX_GPIO_Init+0xfc>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0320 	and.w	r3, r3, #32
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <MX_GPIO_Init+0xfc>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a2c      	ldr	r2, [pc, #176]	; (80014f0 <MX_GPIO_Init+0xfc>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <MX_GPIO_Init+0xfc>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <MX_GPIO_Init+0xfc>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a26      	ldr	r2, [pc, #152]	; (80014f0 <MX_GPIO_Init+0xfc>)
 8001456:	f043 0308 	orr.w	r3, r3, #8
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <MX_GPIO_Init+0xfc>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|STEP_Pin|STEP_DIR_Pin, GPIO_PIN_RESET);
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800146e:	4821      	ldr	r0, [pc, #132]	; (80014f4 <MX_GPIO_Init+0x100>)
 8001470:	f001 f950 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800147a:	481f      	ldr	r0, [pc, #124]	; (80014f8 <MX_GPIO_Init+0x104>)
 800147c:	f001 f94a 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SLEEP_GPIO_Port, SLEEP_Pin, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001486:	481d      	ldr	r0, [pc, #116]	; (80014fc <MX_GPIO_Init+0x108>)
 8001488:	f001 f944 	bl	8002714 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin STEP_Pin STEP_DIR_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|STEP_Pin|STEP_DIR_Pin;
 800148c:	f44f 63c2 	mov.w	r3, #1552	; 0x610
 8001490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2302      	movs	r3, #2
 800149c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	4619      	mov	r1, r3
 80014a4:	4813      	ldr	r0, [pc, #76]	; (80014f4 <MX_GPIO_Init+0x100>)
 80014a6:	f000 ffa1 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80014aa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80014ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	4619      	mov	r1, r3
 80014c2:	480d      	ldr	r0, [pc, #52]	; (80014f8 <MX_GPIO_Init+0x104>)
 80014c4:	f000 ff92 	bl	80023ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SLEEP_Pin */
  GPIO_InitStruct.Pin = SLEEP_Pin;
 80014c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SLEEP_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 0310 	add.w	r3, r7, #16
 80014de:	4619      	mov	r1, r3
 80014e0:	4806      	ldr	r0, [pc, #24]	; (80014fc <MX_GPIO_Init+0x108>)
 80014e2:	f000 ff83 	bl	80023ec <HAL_GPIO_Init>

}
 80014e6:	bf00      	nop
 80014e8:	3720      	adds	r7, #32
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010800 	.word	0x40010800
 80014f8:	40010c00 	.word	0x40010c00
 80014fc:	40011000 	.word	0x40011000

08001500 <goRight>:

/* USER CODE BEGIN 4 */
void goRight(){
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
	servo_angle[0] += 5;
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <goRight+0x40>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	3305      	adds	r3, #5
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <goRight+0x40>)
 800150e:	701a      	strb	r2, [r3, #0]
	servo_angle[1] -= 5;
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <goRight+0x40>)
 8001512:	785b      	ldrb	r3, [r3, #1]
 8001514:	3b05      	subs	r3, #5
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <goRight+0x40>)
 800151a:	705a      	strb	r2, [r3, #1]
	if (servo_angle[0] > 150)
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <goRight+0x40>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b96      	cmp	r3, #150	; 0x96
 8001522:	d902      	bls.n	800152a <goRight+0x2a>
		servo_angle[0] = 150;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <goRight+0x40>)
 8001526:	2296      	movs	r2, #150	; 0x96
 8001528:	701a      	strb	r2, [r3, #0]
	if (servo_angle[1] < 5)
 800152a:	4b05      	ldr	r3, [pc, #20]	; (8001540 <goRight+0x40>)
 800152c:	785b      	ldrb	r3, [r3, #1]
 800152e:	2b04      	cmp	r3, #4
 8001530:	d802      	bhi.n	8001538 <goRight+0x38>
		servo_angle[1] = 5;
 8001532:	4b03      	ldr	r3, [pc, #12]	; (8001540 <goRight+0x40>)
 8001534:	2205      	movs	r2, #5
 8001536:	705a      	strb	r2, [r3, #1]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	20000074 	.word	0x20000074

08001544 <goLeft>:

void goLeft(){
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
	servo_angle[0] -= 5;
 8001548:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <goLeft+0x40>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	3b05      	subs	r3, #5
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <goLeft+0x40>)
 8001552:	701a      	strb	r2, [r3, #0]
	servo_angle[1] += 5;
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <goLeft+0x40>)
 8001556:	785b      	ldrb	r3, [r3, #1]
 8001558:	3305      	adds	r3, #5
 800155a:	b2da      	uxtb	r2, r3
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <goLeft+0x40>)
 800155e:	705a      	strb	r2, [r3, #1]
	if(servo_angle[0] < 5)
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <goLeft+0x40>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b04      	cmp	r3, #4
 8001566:	d802      	bhi.n	800156e <goLeft+0x2a>
		servo_angle[0] = 5;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <goLeft+0x40>)
 800156a:	2205      	movs	r2, #5
 800156c:	701a      	strb	r2, [r3, #0]
	if(servo_angle[1] > 150)
 800156e:	4b05      	ldr	r3, [pc, #20]	; (8001584 <goLeft+0x40>)
 8001570:	785b      	ldrb	r3, [r3, #1]
 8001572:	2b96      	cmp	r3, #150	; 0x96
 8001574:	d902      	bls.n	800157c <goLeft+0x38>
		servo_angle[1] = 150;
 8001576:	4b03      	ldr	r3, [pc, #12]	; (8001584 <goLeft+0x40>)
 8001578:	2296      	movs	r2, #150	; 0x96
 800157a:	705a      	strb	r2, [r3, #1]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	20000074 	.word	0x20000074

08001588 <forward>:

void forward(){
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
	servo_angle[0] += 5 ;
 800158c:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <forward+0x40>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	3305      	adds	r3, #5
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <forward+0x40>)
 8001596:	701a      	strb	r2, [r3, #0]
	servo_angle[1] += 5;
 8001598:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <forward+0x40>)
 800159a:	785b      	ldrb	r3, [r3, #1]
 800159c:	3305      	adds	r3, #5
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <forward+0x40>)
 80015a2:	705a      	strb	r2, [r3, #1]
	if (servo_angle[0] > 150)
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <forward+0x40>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b96      	cmp	r3, #150	; 0x96
 80015aa:	d902      	bls.n	80015b2 <forward+0x2a>
		servo_angle[0] = 150;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <forward+0x40>)
 80015ae:	2296      	movs	r2, #150	; 0x96
 80015b0:	701a      	strb	r2, [r3, #0]
	if (servo_angle[1] > 150)
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <forward+0x40>)
 80015b4:	785b      	ldrb	r3, [r3, #1]
 80015b6:	2b96      	cmp	r3, #150	; 0x96
 80015b8:	d902      	bls.n	80015c0 <forward+0x38>
		servo_angle[1] = 150;
 80015ba:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <forward+0x40>)
 80015bc:	2296      	movs	r2, #150	; 0x96
 80015be:	705a      	strb	r2, [r3, #1]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	20000074 	.word	0x20000074

080015cc <back>:

void back(){
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
	servo_angle[0] -= 5;
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <back+0x40>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	3b05      	subs	r3, #5
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <back+0x40>)
 80015da:	701a      	strb	r2, [r3, #0]
	servo_angle[1] -= 5;
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <back+0x40>)
 80015de:	785b      	ldrb	r3, [r3, #1]
 80015e0:	3b05      	subs	r3, #5
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <back+0x40>)
 80015e6:	705a      	strb	r2, [r3, #1]
	if (servo_angle[0] < 5)
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <back+0x40>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d802      	bhi.n	80015f6 <back+0x2a>
		servo_angle[0] = 5;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <back+0x40>)
 80015f2:	2205      	movs	r2, #5
 80015f4:	701a      	strb	r2, [r3, #0]
	if (servo_angle[1] < 5)
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <back+0x40>)
 80015f8:	785b      	ldrb	r3, [r3, #1]
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	d802      	bhi.n	8001604 <back+0x38>
		servo_angle[1] = 5;
 80015fe:	4b03      	ldr	r3, [pc, #12]	; (800160c <back+0x40>)
 8001600:	2205      	movs	r2, #5
 8001602:	705a      	strb	r2, [r3, #1]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	20000074 	.word	0x20000074

08001610 <rightNeck>:

void rightNeck(){
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	//TURN ON STEPPER
	HAL_GPIO_WritePin(SLEEP_GPIO_Port, SLEEP_Pin, GPIO_PIN_SET);
 8001614:	2201      	movs	r2, #1
 8001616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800161a:	4818      	ldr	r0, [pc, #96]	; (800167c <rightNeck+0x6c>)
 800161c:	f001 f87a 	bl	8002714 <HAL_GPIO_WritePin>
	//SET DIRECT = 0
	HAL_GPIO_WritePin(GPIOA, STEP_DIR_Pin, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001626:	4816      	ldr	r0, [pc, #88]	; (8001680 <rightNeck+0x70>)
 8001628:	f001 f874 	bl	8002714 <HAL_GPIO_WritePin>

	for (count = 0; count < 20; count++) {
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <rightNeck+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	e017      	b.n	8001664 <rightNeck+0x54>
		HAL_GPIO_WritePin(GPIOA, STEP_Pin, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	f44f 7100 	mov.w	r1, #512	; 0x200
 800163a:	4811      	ldr	r0, [pc, #68]	; (8001680 <rightNeck+0x70>)
 800163c:	f001 f86a 	bl	8002714 <HAL_GPIO_WritePin>
		HAL_Delay(0.01);
 8001640:	2000      	movs	r0, #0
 8001642:	f000 fda1 	bl	8002188 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, STEP_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 7100 	mov.w	r1, #512	; 0x200
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <rightNeck+0x70>)
 800164e:	f001 f861 	bl	8002714 <HAL_GPIO_WritePin>
		HAL_Delay(0.01);
 8001652:	2000      	movs	r0, #0
 8001654:	f000 fd98 	bl	8002188 <HAL_Delay>
	for (count = 0; count < 20; count++) {
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <rightNeck+0x74>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	3301      	adds	r3, #1
 800165e:	b2da      	uxtb	r2, r3
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <rightNeck+0x74>)
 8001662:	701a      	strb	r2, [r3, #0]
 8001664:	4b07      	ldr	r3, [pc, #28]	; (8001684 <rightNeck+0x74>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b13      	cmp	r3, #19
 800166a:	d9e3      	bls.n	8001634 <rightNeck+0x24>
	 	}

	HAL_GPIO_WritePin(SLEEP_GPIO_Port, SLEEP_Pin, GPIO_PIN_RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001672:	4802      	ldr	r0, [pc, #8]	; (800167c <rightNeck+0x6c>)
 8001674:	f001 f84e 	bl	8002714 <HAL_GPIO_WritePin>
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40011000 	.word	0x40011000
 8001680:	40010800 	.word	0x40010800
 8001684:	200002e1 	.word	0x200002e1

08001688 <neckUp>:

void neckUp(){
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	servo_angle[2] += 5;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <neckUp+0x38>)
 800168e:	789b      	ldrb	r3, [r3, #2]
 8001690:	3305      	adds	r3, #5
 8001692:	b2da      	uxtb	r2, r3
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <neckUp+0x38>)
 8001696:	709a      	strb	r2, [r3, #2]
	if (servo_angle[2] > 180){
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <neckUp+0x38>)
 800169a:	789b      	ldrb	r3, [r3, #2]
 800169c:	2bb4      	cmp	r3, #180	; 0xb4
 800169e:	d902      	bls.n	80016a6 <neckUp+0x1e>
		servo_angle[2] = 180;
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <neckUp+0x38>)
 80016a2:	22b4      	movs	r2, #180	; 0xb4
 80016a4:	709a      	strb	r2, [r3, #2]
	}
	PCA9685_SetServoAngle(2, servo_angle[2]);
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <neckUp+0x38>)
 80016a8:	789b      	ldrb	r3, [r3, #2]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fb4a 	bl	8000d44 <__aeabi_ui2f>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4619      	mov	r1, r3
 80016b4:	2002      	movs	r0, #2
 80016b6:	f000 fb7f 	bl	8001db8 <PCA9685_SetServoAngle>
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000074 	.word	0x20000074

080016c4 <neckDown>:

void neckDown(){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	servo_angle[2] -= 5;
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <neckDown+0x28>)
 80016ca:	789b      	ldrb	r3, [r3, #2]
 80016cc:	3b05      	subs	r3, #5
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <neckDown+0x28>)
 80016d2:	709a      	strb	r2, [r3, #2]
	if (servo_angle[2] < 0){
		servo_angle[2] = 0;
	}
	PCA9685_SetServoAngle(2, servo_angle[2]);
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <neckDown+0x28>)
 80016d6:	789b      	ldrb	r3, [r3, #2]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fb33 	bl	8000d44 <__aeabi_ui2f>
 80016de:	4603      	mov	r3, r0
 80016e0:	4619      	mov	r1, r3
 80016e2:	2002      	movs	r0, #2
 80016e4:	f000 fb68 	bl	8001db8 <PCA9685_SetServoAngle>
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000074 	.word	0x20000074

080016f0 <leftNeck>:

void leftNeck(){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	//TURN ON STEPPER
	HAL_GPIO_WritePin(SLEEP_GPIO_Port, SLEEP_Pin, GPIO_PIN_SET);
 80016f4:	2201      	movs	r2, #1
 80016f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016fa:	4818      	ldr	r0, [pc, #96]	; (800175c <leftNeck+0x6c>)
 80016fc:	f001 f80a 	bl	8002714 <HAL_GPIO_WritePin>
	//SET DIRECT = 1
	HAL_GPIO_WritePin(GPIOA, STEP_DIR_Pin, GPIO_PIN_SET);
 8001700:	2201      	movs	r2, #1
 8001702:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001706:	4816      	ldr	r0, [pc, #88]	; (8001760 <leftNeck+0x70>)
 8001708:	f001 f804 	bl	8002714 <HAL_GPIO_WritePin>
	for (count = 0; count < 20; count++) {
 800170c:	4b15      	ldr	r3, [pc, #84]	; (8001764 <leftNeck+0x74>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
 8001712:	e017      	b.n	8001744 <leftNeck+0x54>
		HAL_GPIO_WritePin(GPIOA, STEP_Pin, GPIO_PIN_SET);
 8001714:	2201      	movs	r2, #1
 8001716:	f44f 7100 	mov.w	r1, #512	; 0x200
 800171a:	4811      	ldr	r0, [pc, #68]	; (8001760 <leftNeck+0x70>)
 800171c:	f000 fffa 	bl	8002714 <HAL_GPIO_WritePin>
		HAL_Delay(0.01);
 8001720:	2000      	movs	r0, #0
 8001722:	f000 fd31 	bl	8002188 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, STEP_Pin, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	f44f 7100 	mov.w	r1, #512	; 0x200
 800172c:	480c      	ldr	r0, [pc, #48]	; (8001760 <leftNeck+0x70>)
 800172e:	f000 fff1 	bl	8002714 <HAL_GPIO_WritePin>
		HAL_Delay(0.01);
 8001732:	2000      	movs	r0, #0
 8001734:	f000 fd28 	bl	8002188 <HAL_Delay>
	for (count = 0; count < 20; count++) {
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <leftNeck+0x74>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	3301      	adds	r3, #1
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <leftNeck+0x74>)
 8001742:	701a      	strb	r2, [r3, #0]
 8001744:	4b07      	ldr	r3, [pc, #28]	; (8001764 <leftNeck+0x74>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b13      	cmp	r3, #19
 800174a:	d9e3      	bls.n	8001714 <leftNeck+0x24>
		}

	HAL_GPIO_WritePin(SLEEP_GPIO_Port, SLEEP_Pin, GPIO_PIN_RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001752:	4802      	ldr	r0, [pc, #8]	; (800175c <leftNeck+0x6c>)
 8001754:	f000 ffde 	bl	8002714 <HAL_GPIO_WritePin>
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40011000 	.word	0x40011000
 8001760:	40010800 	.word	0x40010800
 8001764:	200002e1 	.word	0x200002e1

08001768 <right_arm>:

void right_arm(uint8_t up_down, uint8_t in_out) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	460a      	mov	r2, r1
 8001772:	71fb      	strb	r3, [r7, #7]
 8001774:	4613      	mov	r3, r2
 8001776:	71bb      	strb	r3, [r7, #6]
	servo_angle[3] = up_down;
 8001778:	4a0d      	ldr	r2, [pc, #52]	; (80017b0 <right_arm+0x48>)
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	70d3      	strb	r3, [r2, #3]
	servo_angle[4] = in_out;
 800177e:	4a0c      	ldr	r2, [pc, #48]	; (80017b0 <right_arm+0x48>)
 8001780:	79bb      	ldrb	r3, [r7, #6]
 8001782:	7113      	strb	r3, [r2, #4]
	PCA9685_SetServoAngle(3, up_down);
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fadc 	bl	8000d44 <__aeabi_ui2f>
 800178c:	4603      	mov	r3, r0
 800178e:	4619      	mov	r1, r3
 8001790:	2003      	movs	r0, #3
 8001792:	f000 fb11 	bl	8001db8 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(4, in_out);
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fad3 	bl	8000d44 <__aeabi_ui2f>
 800179e:	4603      	mov	r3, r0
 80017a0:	4619      	mov	r1, r3
 80017a2:	2004      	movs	r0, #4
 80017a4:	f000 fb08 	bl	8001db8 <PCA9685_SetServoAngle>
}
 80017a8:	bf00      	nop
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000074 	.word	0x20000074

080017b4 <left_arm>:

void left_arm(uint8_t up_down, uint8_t in_out) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	460a      	mov	r2, r1
 80017be:	71fb      	strb	r3, [r7, #7]
 80017c0:	4613      	mov	r3, r2
 80017c2:	71bb      	strb	r3, [r7, #6]
	servo_angle[5] = up_down;
 80017c4:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <left_arm+0x48>)
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	7153      	strb	r3, [r2, #5]
	servo_angle[6] = in_out;
 80017ca:	4a0c      	ldr	r2, [pc, #48]	; (80017fc <left_arm+0x48>)
 80017cc:	79bb      	ldrb	r3, [r7, #6]
 80017ce:	7193      	strb	r3, [r2, #6]
	PCA9685_SetServoAngle(5, up_down);
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fab6 	bl	8000d44 <__aeabi_ui2f>
 80017d8:	4603      	mov	r3, r0
 80017da:	4619      	mov	r1, r3
 80017dc:	2005      	movs	r0, #5
 80017de:	f000 faeb 	bl	8001db8 <PCA9685_SetServoAngle>
	PCA9685_SetServoAngle(6, in_out);
 80017e2:	79bb      	ldrb	r3, [r7, #6]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff faad 	bl	8000d44 <__aeabi_ui2f>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4619      	mov	r1, r3
 80017ee:	2006      	movs	r0, #6
 80017f0:	f000 fae2 	bl	8001db8 <PCA9685_SetServoAngle>
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000074 	.word	0x20000074

08001800 <leftHand>:

void leftHand(){
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	left_arm(170, 60);
 8001804:	213c      	movs	r1, #60	; 0x3c
 8001806:	20aa      	movs	r0, #170	; 0xaa
 8001808:	f7ff ffd4 	bl	80017b4 <left_arm>
	HAL_Delay(200);
 800180c:	20c8      	movs	r0, #200	; 0xc8
 800180e:	f000 fcbb 	bl	8002188 <HAL_Delay>
	left_arm(170, 170);
 8001812:	21aa      	movs	r1, #170	; 0xaa
 8001814:	20aa      	movs	r0, #170	; 0xaa
 8001816:	f7ff ffcd 	bl	80017b4 <left_arm>
	HAL_Delay(200);
 800181a:	20c8      	movs	r0, #200	; 0xc8
 800181c:	f000 fcb4 	bl	8002188 <HAL_Delay>
	left_arm(170, 60);
 8001820:	213c      	movs	r1, #60	; 0x3c
 8001822:	20aa      	movs	r0, #170	; 0xaa
 8001824:	f7ff ffc6 	bl	80017b4 <left_arm>
	HAL_Delay(200);
 8001828:	20c8      	movs	r0, #200	; 0xc8
 800182a:	f000 fcad 	bl	8002188 <HAL_Delay>
	left_arm(170, 170);
 800182e:	21aa      	movs	r1, #170	; 0xaa
 8001830:	20aa      	movs	r0, #170	; 0xaa
 8001832:	f7ff ffbf 	bl	80017b4 <left_arm>
	HAL_Delay(200);
 8001836:	20c8      	movs	r0, #200	; 0xc8
 8001838:	f000 fca6 	bl	8002188 <HAL_Delay>
	left_arm(170, 60);
 800183c:	213c      	movs	r1, #60	; 0x3c
 800183e:	20aa      	movs	r0, #170	; 0xaa
 8001840:	f7ff ffb8 	bl	80017b4 <left_arm>
	HAL_Delay(200);
 8001844:	20c8      	movs	r0, #200	; 0xc8
 8001846:	f000 fc9f 	bl	8002188 <HAL_Delay>
	left_arm(170, 170);
 800184a:	21aa      	movs	r1, #170	; 0xaa
 800184c:	20aa      	movs	r0, #170	; 0xaa
 800184e:	f7ff ffb1 	bl	80017b4 <left_arm>
	HAL_Delay(200);
 8001852:	20c8      	movs	r0, #200	; 0xc8
 8001854:	f000 fc98 	bl	8002188 <HAL_Delay>
	left_arm(60, 60);
 8001858:	213c      	movs	r1, #60	; 0x3c
 800185a:	203c      	movs	r0, #60	; 0x3c
 800185c:	f7ff ffaa 	bl	80017b4 <left_arm>
	HAL_Delay(200);
 8001860:	20c8      	movs	r0, #200	; 0xc8
 8001862:	f000 fc91 	bl	8002188 <HAL_Delay>
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}

0800186a <rightHand>:

void rightHand(){
 800186a:	b580      	push	{r7, lr}
 800186c:	af00      	add	r7, sp, #0
	right_arm(170, 60);
 800186e:	213c      	movs	r1, #60	; 0x3c
 8001870:	20aa      	movs	r0, #170	; 0xaa
 8001872:	f7ff ff79 	bl	8001768 <right_arm>
	HAL_Delay(200);
 8001876:	20c8      	movs	r0, #200	; 0xc8
 8001878:	f000 fc86 	bl	8002188 <HAL_Delay>
	right_arm(170, 5);
 800187c:	2105      	movs	r1, #5
 800187e:	20aa      	movs	r0, #170	; 0xaa
 8001880:	f7ff ff72 	bl	8001768 <right_arm>
	HAL_Delay(200);
 8001884:	20c8      	movs	r0, #200	; 0xc8
 8001886:	f000 fc7f 	bl	8002188 <HAL_Delay>
	right_arm(170, 60);
 800188a:	213c      	movs	r1, #60	; 0x3c
 800188c:	20aa      	movs	r0, #170	; 0xaa
 800188e:	f7ff ff6b 	bl	8001768 <right_arm>
	HAL_Delay(200);
 8001892:	20c8      	movs	r0, #200	; 0xc8
 8001894:	f000 fc78 	bl	8002188 <HAL_Delay>
	right_arm(170, 5);
 8001898:	2105      	movs	r1, #5
 800189a:	20aa      	movs	r0, #170	; 0xaa
 800189c:	f7ff ff64 	bl	8001768 <right_arm>
	HAL_Delay(200);
 80018a0:	20c8      	movs	r0, #200	; 0xc8
 80018a2:	f000 fc71 	bl	8002188 <HAL_Delay>
	right_arm(170, 60);
 80018a6:	213c      	movs	r1, #60	; 0x3c
 80018a8:	20aa      	movs	r0, #170	; 0xaa
 80018aa:	f7ff ff5d 	bl	8001768 <right_arm>
	HAL_Delay(200);
 80018ae:	20c8      	movs	r0, #200	; 0xc8
 80018b0:	f000 fc6a 	bl	8002188 <HAL_Delay>
	right_arm(170, 5);
 80018b4:	2105      	movs	r1, #5
 80018b6:	20aa      	movs	r0, #170	; 0xaa
 80018b8:	f7ff ff56 	bl	8001768 <right_arm>
	HAL_Delay(200);
 80018bc:	20c8      	movs	r0, #200	; 0xc8
 80018be:	f000 fc63 	bl	8002188 <HAL_Delay>
	right_arm(60, 60);
 80018c2:	213c      	movs	r1, #60	; 0x3c
 80018c4:	203c      	movs	r0, #60	; 0x3c
 80018c6:	f7ff ff4f 	bl	8001768 <right_arm>
	HAL_Delay(200);
 80018ca:	20c8      	movs	r0, #200	; 0xc8
 80018cc:	f000 fc5c 	bl	8002188 <HAL_Delay>
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <LRHand>:

void LRHand(){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	right_arm(170, 60);
 80018d8:	213c      	movs	r1, #60	; 0x3c
 80018da:	20aa      	movs	r0, #170	; 0xaa
 80018dc:	f7ff ff44 	bl	8001768 <right_arm>
	left_arm(170, 60);
 80018e0:	213c      	movs	r1, #60	; 0x3c
 80018e2:	20aa      	movs	r0, #170	; 0xaa
 80018e4:	f7ff ff66 	bl	80017b4 <left_arm>
	HAL_Delay(200);
 80018e8:	20c8      	movs	r0, #200	; 0xc8
 80018ea:	f000 fc4d 	bl	8002188 <HAL_Delay>
	right_arm(170, 5);
 80018ee:	2105      	movs	r1, #5
 80018f0:	20aa      	movs	r0, #170	; 0xaa
 80018f2:	f7ff ff39 	bl	8001768 <right_arm>
	left_arm(170, 170);
 80018f6:	21aa      	movs	r1, #170	; 0xaa
 80018f8:	20aa      	movs	r0, #170	; 0xaa
 80018fa:	f7ff ff5b 	bl	80017b4 <left_arm>
	HAL_Delay(200);
 80018fe:	20c8      	movs	r0, #200	; 0xc8
 8001900:	f000 fc42 	bl	8002188 <HAL_Delay>
	right_arm(170, 60);
 8001904:	213c      	movs	r1, #60	; 0x3c
 8001906:	20aa      	movs	r0, #170	; 0xaa
 8001908:	f7ff ff2e 	bl	8001768 <right_arm>
	left_arm(170, 60);
 800190c:	213c      	movs	r1, #60	; 0x3c
 800190e:	20aa      	movs	r0, #170	; 0xaa
 8001910:	f7ff ff50 	bl	80017b4 <left_arm>
	HAL_Delay(200);
 8001914:	20c8      	movs	r0, #200	; 0xc8
 8001916:	f000 fc37 	bl	8002188 <HAL_Delay>
	right_arm(170, 5);
 800191a:	2105      	movs	r1, #5
 800191c:	20aa      	movs	r0, #170	; 0xaa
 800191e:	f7ff ff23 	bl	8001768 <right_arm>
	left_arm(170, 170);
 8001922:	21aa      	movs	r1, #170	; 0xaa
 8001924:	20aa      	movs	r0, #170	; 0xaa
 8001926:	f7ff ff45 	bl	80017b4 <left_arm>
	HAL_Delay(200);
 800192a:	20c8      	movs	r0, #200	; 0xc8
 800192c:	f000 fc2c 	bl	8002188 <HAL_Delay>
	right_arm(170, 60);
 8001930:	213c      	movs	r1, #60	; 0x3c
 8001932:	20aa      	movs	r0, #170	; 0xaa
 8001934:	f7ff ff18 	bl	8001768 <right_arm>
	left_arm(170, 60);
 8001938:	213c      	movs	r1, #60	; 0x3c
 800193a:	20aa      	movs	r0, #170	; 0xaa
 800193c:	f7ff ff3a 	bl	80017b4 <left_arm>
	HAL_Delay(200);
 8001940:	20c8      	movs	r0, #200	; 0xc8
 8001942:	f000 fc21 	bl	8002188 <HAL_Delay>
	right_arm(170, 5);
 8001946:	2105      	movs	r1, #5
 8001948:	20aa      	movs	r0, #170	; 0xaa
 800194a:	f7ff ff0d 	bl	8001768 <right_arm>
	left_arm(170, 170);
 800194e:	21aa      	movs	r1, #170	; 0xaa
 8001950:	20aa      	movs	r0, #170	; 0xaa
 8001952:	f7ff ff2f 	bl	80017b4 <left_arm>
	HAL_Delay(200);
 8001956:	20c8      	movs	r0, #200	; 0xc8
 8001958:	f000 fc16 	bl	8002188 <HAL_Delay>
	right_arm(60, 60);
 800195c:	213c      	movs	r1, #60	; 0x3c
 800195e:	203c      	movs	r0, #60	; 0x3c
 8001960:	f7ff ff02 	bl	8001768 <right_arm>
	left_arm(60, 60);
 8001964:	213c      	movs	r1, #60	; 0x3c
 8001966:	203c      	movs	r0, #60	; 0x3c
 8001968:	f7ff ff24 	bl	80017b4 <left_arm>
	HAL_Delay(200);
 800196c:	20c8      	movs	r0, #200	; 0xc8
 800196e:	f000 fc0b 	bl	8002188 <HAL_Delay>
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}

08001976 <shakeHand>:

void shakeHand(){
 8001976:	b580      	push	{r7, lr}
 8001978:	af00      	add	r7, sp, #0
	left_arm(60, 60);
 800197a:	213c      	movs	r1, #60	; 0x3c
 800197c:	203c      	movs	r0, #60	; 0x3c
 800197e:	f7ff ff19 	bl	80017b4 <left_arm>
	HAL_Delay(300);
 8001982:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001986:	f000 fbff 	bl	8002188 <HAL_Delay>
	left_arm(170, 60);
 800198a:	213c      	movs	r1, #60	; 0x3c
 800198c:	20aa      	movs	r0, #170	; 0xaa
 800198e:	f7ff ff11 	bl	80017b4 <left_arm>
	HAL_Delay(300);
 8001992:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001996:	f000 fbf7 	bl	8002188 <HAL_Delay>
	left_arm(60, 60);
 800199a:	213c      	movs	r1, #60	; 0x3c
 800199c:	203c      	movs	r0, #60	; 0x3c
 800199e:	f7ff ff09 	bl	80017b4 <left_arm>
	HAL_Delay(300);
 80019a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80019a6:	f000 fbef 	bl	8002188 <HAL_Delay>
	left_arm(170, 60);
 80019aa:	213c      	movs	r1, #60	; 0x3c
 80019ac:	20aa      	movs	r0, #170	; 0xaa
 80019ae:	f7ff ff01 	bl	80017b4 <left_arm>
	HAL_Delay(300);
 80019b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80019b6:	f000 fbe7 	bl	8002188 <HAL_Delay>
	left_arm(60, 60);
 80019ba:	213c      	movs	r1, #60	; 0x3c
 80019bc:	203c      	movs	r0, #60	; 0x3c
 80019be:	f7ff fef9 	bl	80017b4 <left_arm>
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <stop>:
		right_arm(170, 40);
		HAL_Delay(300);
	}
}

void stop(){
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
	servo_angle[0] = 75;
 80019cc:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <stop+0x18>)
 80019ce:	224b      	movs	r2, #75	; 0x4b
 80019d0:	701a      	strb	r2, [r3, #0]
	servo_angle[1] = 75;
 80019d2:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <stop+0x18>)
 80019d4:	224b      	movs	r2, #75	; 0x4b
 80019d6:	705a      	strb	r2, [r3, #1]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	20000074 	.word	0x20000074

080019e4 <nod>:

void nod(){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; i++){
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	e01e      	b.n	8001a2e <nod+0x4a>
		for (int x = 0; x < 10; x++){
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	e007      	b.n	8001a06 <nod+0x22>
			neckDown();
 80019f6:	f7ff fe65 	bl	80016c4 <neckDown>
			HAL_Delay(50);
 80019fa:	2032      	movs	r0, #50	; 0x32
 80019fc:	f000 fbc4 	bl	8002188 <HAL_Delay>
		for (int x = 0; x < 10; x++){
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	3301      	adds	r3, #1
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b09      	cmp	r3, #9
 8001a0a:	ddf4      	ble.n	80019f6 <nod+0x12>
		}
		for (int y = 0; y < 10; y++){
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	e007      	b.n	8001a22 <nod+0x3e>
			neckUp();
 8001a12:	f7ff fe39 	bl	8001688 <neckUp>
			HAL_Delay(50);
 8001a16:	2032      	movs	r0, #50	; 0x32
 8001a18:	f000 fbb6 	bl	8002188 <HAL_Delay>
		for (int y = 0; y < 10; y++){
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b09      	cmp	r3, #9
 8001a26:	ddf4      	ble.n	8001a12 <nod+0x2e>
	for (int i = 0; i < 2; i++){
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	dddd      	ble.n	80019f0 <nod+0xc>
		}
	}
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
	...

08001a4c <PCA9685_SetBit>:
#include "math.h"

I2C_HandleTypeDef *pca9685_i2c;

PCA9685_STATUS PCA9685_SetBit(uint8_t Register, uint8_t Bit, uint8_t Value)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af04      	add	r7, sp, #16
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
 8001a56:	460b      	mov	r3, r1
 8001a58:	71bb      	strb	r3, [r7, #6]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	717b      	strb	r3, [r7, #5]
	uint8_t tmp;
	if(Value) Value = 1;
 8001a5e:	797b      	ldrb	r3, [r7, #5]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <PCA9685_SetBit+0x1c>
 8001a64:	2301      	movs	r3, #1
 8001a66:	717b      	strb	r3, [r7, #5]

	if(HAL_OK != HAL_I2C_Mem_Read(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001a68:	4b24      	ldr	r3, [pc, #144]	; (8001afc <PCA9685_SetBit+0xb0>)
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	230a      	movs	r3, #10
 8001a72:	9302      	str	r3, [sp, #8]
 8001a74:	2301      	movs	r3, #1
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	f107 030f 	add.w	r3, r7, #15
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2301      	movs	r3, #1
 8001a80:	2180      	movs	r1, #128	; 0x80
 8001a82:	f001 f99b 	bl	8002dbc <HAL_I2C_Mem_Read>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <PCA9685_SetBit+0x44>
	{
		return PCA9685_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e031      	b.n	8001af4 <PCA9685_SetBit+0xa8>
	}
	tmp &= ~((1<<PCA9685_MODE1_RESTART_BIT)|(1<<Bit));
 8001a90:	79bb      	ldrb	r3, [r7, #6]
 8001a92:	2201      	movs	r2, #1
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	b25b      	sxtb	r3, r3
 8001a9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a9e:	b25b      	sxtb	r3, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	b25a      	sxtb	r2, r3
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	b25b      	sxtb	r3, r3
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	b25b      	sxtb	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	73fb      	strb	r3, [r7, #15]
	tmp |= (Value&1)<<Bit;
 8001ab0:	797b      	ldrb	r3, [r7, #5]
 8001ab2:	f003 0201 	and.w	r2, r3, #1
 8001ab6:	79bb      	ldrb	r3, [r7, #6]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	b25a      	sxtb	r2, r3
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	b25b      	sxtb	r3, r3
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b25b      	sxtb	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	73fb      	strb	r3, [r7, #15]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, Register, 1, &tmp, 1, 10))
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <PCA9685_SetBit+0xb0>)
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	230a      	movs	r3, #10
 8001ad4:	9302      	str	r3, [sp, #8]
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	9301      	str	r3, [sp, #4]
 8001ada:	f107 030f 	add.w	r3, r7, #15
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	2180      	movs	r1, #128	; 0x80
 8001ae4:	f001 f870 	bl	8002bc8 <HAL_I2C_Mem_Write>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <PCA9685_SetBit+0xa6>
	{
		return PCA9685_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <PCA9685_SetBit+0xa8>
	}

	return PCA9685_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	200002e4 	.word	0x200002e4

08001b00 <PCA9685_SoftwareReset>:

PCA9685_STATUS PCA9685_SoftwareReset(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af02      	add	r7, sp, #8
	uint8_t cmd = 0x6;
 8001b06:	2306      	movs	r3, #6
 8001b08:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(pca9685_i2c, 0x00, &cmd, 1, 10))
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <PCA9685_SoftwareReset+0x30>)
 8001b0c:	6818      	ldr	r0, [r3, #0]
 8001b0e:	1dfa      	adds	r2, r7, #7
 8001b10:	230a      	movs	r3, #10
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2301      	movs	r3, #1
 8001b16:	2100      	movs	r1, #0
 8001b18:	f000 ff58 	bl	80029cc <HAL_I2C_Master_Transmit>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <PCA9685_SoftwareReset+0x26>
	{
		return PCA9685_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e000      	b.n	8001b28 <PCA9685_SoftwareReset+0x28>
	}
	return PCA9685_ERROR;
 8001b26:	2301      	movs	r3, #1
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	200002e4 	.word	0x200002e4

08001b34 <PCA9685_SleepMode>:

PCA9685_STATUS PCA9685_SleepMode(uint8_t Enable)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_SLEEP_BIT, Enable);
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	461a      	mov	r2, r3
 8001b42:	2104      	movs	r1, #4
 8001b44:	2000      	movs	r0, #0
 8001b46:	f7ff ff81 	bl	8001a4c <PCA9685_SetBit>
 8001b4a:	4603      	mov	r3, r0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <PCA9685_RestartMode>:

PCA9685_STATUS PCA9685_RestartMode(uint8_t Enable)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_RESTART_BIT, Enable);
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	461a      	mov	r2, r3
 8001b62:	2107      	movs	r1, #7
 8001b64:	2000      	movs	r0, #0
 8001b66:	f7ff ff71 	bl	8001a4c <PCA9685_SetBit>
 8001b6a:	4603      	mov	r3, r0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <PCA9685_AutoIncrement>:

PCA9685_STATUS PCA9685_AutoIncrement(uint8_t Enable)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
	return PCA9685_SetBit(PCA9685_MODE1, PCA9685_MODE1_AI_BIT, Enable);
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	461a      	mov	r2, r3
 8001b82:	2105      	movs	r1, #5
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7ff ff61 	bl	8001a4c <PCA9685_SetBit>
 8001b8a:	4603      	mov	r3, r0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	0000      	movs	r0, r0
	...

08001b98 <PCA9685_SetPwmFrequency>:

//
//	Frequency - Hz value
//
PCA9685_STATUS PCA9685_SetPwmFrequency(uint16_t Frequency)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af04      	add	r7, sp, #16
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	80fb      	strh	r3, [r7, #6]
	float PrescalerVal;
	uint8_t Prescale;

	if(Frequency >= 1526)
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	f240 52f5 	movw	r2, #1525	; 0x5f5
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d902      	bls.n	8001bb2 <PCA9685_SetPwmFrequency+0x1a>
	{
		Prescale = 0x03;
 8001bac:	2303      	movs	r3, #3
 8001bae:	72fb      	strb	r3, [r7, #11]
 8001bb0:	e041      	b.n	8001c36 <PCA9685_SetPwmFrequency+0x9e>
	}
	else if(Frequency <= 24)
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	2b18      	cmp	r3, #24
 8001bb6:	d802      	bhi.n	8001bbe <PCA9685_SetPwmFrequency+0x26>
	{
		Prescale = 0xFF;
 8001bb8:	23ff      	movs	r3, #255	; 0xff
 8001bba:	72fb      	strb	r3, [r7, #11]
 8001bbc:	e03b      	b.n	8001c36 <PCA9685_SetPwmFrequency+0x9e>
	}
	else
	{
		PrescalerVal = (25000000 / (4096.0 * (float)Frequency)) - 1;
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff f8bf 	bl	8000d44 <__aeabi_ui2f>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fca3 	bl	8000514 <__aeabi_f2d>
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <PCA9685_SetPwmFrequency+0xe0>)
 8001bd4:	f7fe fcf6 	bl	80005c4 <__aeabi_dmul>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	a124      	add	r1, pc, #144	; (adr r1, 8001c70 <PCA9685_SetPwmFrequency+0xd8>)
 8001bde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001be2:	f7fe fe19 	bl	8000818 <__aeabi_ddiv>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4610      	mov	r0, r2
 8001bec:	4619      	mov	r1, r3
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <PCA9685_SetPwmFrequency+0xe4>)
 8001bf4:	f7fe fb2e 	bl	8000254 <__aeabi_dsub>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f7fe ff9a 	bl	8000b38 <__aeabi_d2f>
 8001c04:	4603      	mov	r3, r0
 8001c06:	60fb      	str	r3, [r7, #12]
		Prescale = floor(PrescalerVal + 0.5);
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f7fe fc83 	bl	8000514 <__aeabi_f2d>
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <PCA9685_SetPwmFrequency+0xe8>)
 8001c14:	f7fe fb20 	bl	8000258 <__adddf3>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f008 ff52 	bl	800aac8 <floor>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f7fe ff64 	bl	8000af8 <__aeabi_d2uiz>
 8001c30:	4603      	mov	r3, r0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	72fb      	strb	r3, [r7, #11]
	}

	//
	//	To change the frequency, PCA9685 have to be in Sleep mode.
	//
	PCA9685_SleepMode(1);
 8001c36:	2001      	movs	r0, #1
 8001c38:	f7ff ff7c 	bl	8001b34 <PCA9685_SleepMode>
	HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, PCA9685_PRESCALE, 1, &Prescale, 1, 10); // Write Prescale value
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <PCA9685_SetPwmFrequency+0xec>)
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	230a      	movs	r3, #10
 8001c42:	9302      	str	r3, [sp, #8]
 8001c44:	2301      	movs	r3, #1
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	f107 030b 	add.w	r3, r7, #11
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2301      	movs	r3, #1
 8001c50:	22fe      	movs	r2, #254	; 0xfe
 8001c52:	2180      	movs	r1, #128	; 0x80
 8001c54:	f000 ffb8 	bl	8002bc8 <HAL_I2C_Mem_Write>
	PCA9685_SleepMode(0);
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f7ff ff6b 	bl	8001b34 <PCA9685_SleepMode>
	PCA9685_RestartMode(1);
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f7ff ff78 	bl	8001b54 <PCA9685_RestartMode>
	return PCA9685_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	00000000 	.word	0x00000000
 8001c74:	4177d784 	.word	0x4177d784
 8001c78:	40b00000 	.word	0x40b00000
 8001c7c:	3ff00000 	.word	0x3ff00000
 8001c80:	3fe00000 	.word	0x3fe00000
 8001c84:	200002e4 	.word	0x200002e4

08001c88 <PCA9685_SetPwm>:

PCA9685_STATUS PCA9685_SetPwm(uint8_t Channel, uint16_t OnTime, uint16_t OffTime)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af04      	add	r7, sp, #16
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
 8001c92:	460b      	mov	r3, r1
 8001c94:	80bb      	strh	r3, [r7, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	807b      	strh	r3, [r7, #2]
	uint8_t RegisterAddress;
	uint8_t Message[4];

	RegisterAddress = PCA9685_LED0_ON_L + (4 * Channel);
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	3306      	adds	r3, #6
 8001ca2:	73fb      	strb	r3, [r7, #15]
	Message[0] = OnTime & 0xFF;
 8001ca4:	88bb      	ldrh	r3, [r7, #4]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	723b      	strb	r3, [r7, #8]
	Message[1] = OnTime>>8;
 8001caa:	88bb      	ldrh	r3, [r7, #4]
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	727b      	strb	r3, [r7, #9]
	Message[2] = OffTime & 0xFF;
 8001cb4:	887b      	ldrh	r3, [r7, #2]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	72bb      	strb	r3, [r7, #10]
	Message[3] = OffTime>>8;
 8001cba:	887b      	ldrh	r3, [r7, #2]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	72fb      	strb	r3, [r7, #11]

	if(HAL_OK != HAL_I2C_Mem_Write(pca9685_i2c, PCA9685_ADDRESS, RegisterAddress, 1, Message, 4, 10))
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <PCA9685_SetPwm+0x70>)
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	230a      	movs	r3, #10
 8001cce:	9302      	str	r3, [sp, #8]
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	2301      	movs	r3, #1
 8001cdc:	2180      	movs	r1, #128	; 0x80
 8001cde:	f000 ff73 	bl	8002bc8 <HAL_I2C_Mem_Write>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <PCA9685_SetPwm+0x64>
	{
		return PCA9685_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <PCA9685_SetPwm+0x66>
	}

	return PCA9685_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	200002e4 	.word	0x200002e4

08001cfc <PCA9685_SetPin>:

PCA9685_STATUS PCA9685_SetPin(uint8_t Channel, uint16_t Value, uint8_t Invert)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
 8001d06:	460b      	mov	r3, r1
 8001d08:	80bb      	strh	r3, [r7, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	71bb      	strb	r3, [r7, #6]
  if(Value > 4095) Value = 4095;
 8001d0e:	88bb      	ldrh	r3, [r7, #4]
 8001d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d14:	d302      	bcc.n	8001d1c <PCA9685_SetPin+0x20>
 8001d16:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001d1a:	80bb      	strh	r3, [r7, #4]

  if (Invert) {
 8001d1c:	79bb      	ldrb	r3, [r7, #6]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d025      	beq.n	8001d6e <PCA9685_SetPin+0x72>
    if (Value == 0) {
 8001d22:	88bb      	ldrh	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d108      	bne.n	8001d3a <PCA9685_SetPin+0x3e>
      // Special value for signal fully on.
      return PCA9685_SetPwm(Channel, 4096, 0);
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ffa9 	bl	8001c88 <PCA9685_SetPwm>
 8001d36:	4603      	mov	r3, r0
 8001d38:	e03a      	b.n	8001db0 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 4095) {
 8001d3a:	88bb      	ldrh	r3, [r7, #4]
 8001d3c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d108      	bne.n	8001d56 <PCA9685_SetPin+0x5a>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff9b 	bl	8001c88 <PCA9685_SetPwm>
 8001d52:	4603      	mov	r3, r0
 8001d54:	e02c      	b.n	8001db0 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, 4095-Value);
 8001d56:	88bb      	ldrh	r3, [r7, #4]
 8001d58:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8001d5c:	330f      	adds	r3, #15
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff8f 	bl	8001c88 <PCA9685_SetPwm>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	e020      	b.n	8001db0 <PCA9685_SetPin+0xb4>
    }
  }
  else {
    if (Value == 4095) {
 8001d6e:	88bb      	ldrh	r3, [r7, #4]
 8001d70:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d108      	bne.n	8001d8a <PCA9685_SetPin+0x8e>
      // Special value for signal fully on.
    	return PCA9685_SetPwm(Channel, 4096, 0);
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff81 	bl	8001c88 <PCA9685_SetPwm>
 8001d86:	4603      	mov	r3, r0
 8001d88:	e012      	b.n	8001db0 <PCA9685_SetPin+0xb4>
    }
    else if (Value == 0) {
 8001d8a:	88bb      	ldrh	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d108      	bne.n	8001da2 <PCA9685_SetPin+0xa6>
      // Special value for signal fully off.
    	return PCA9685_SetPwm(Channel, 0, 4096);
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff75 	bl	8001c88 <PCA9685_SetPwm>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	e006      	b.n	8001db0 <PCA9685_SetPin+0xb4>
    }
    else {
    	return PCA9685_SetPwm(Channel, 0, Value);
 8001da2:	88ba      	ldrh	r2, [r7, #4]
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff6d 	bl	8001c88 <PCA9685_SetPwm>
 8001dae:	4603      	mov	r3, r0
    }
  }
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <PCA9685_SetServoAngle>:

#ifdef PCA9685_SERVO_MODE
PCA9685_STATUS PCA9685_SetServoAngle(uint8_t Channel, float Angle)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	6039      	str	r1, [r7, #0]
 8001dc2:	71fb      	strb	r3, [r7, #7]
	float Value;
	if(Angle < MIN_ANGLE) Angle = MIN_ANGLE;
 8001dc4:	f04f 0100 	mov.w	r1, #0
 8001dc8:	6838      	ldr	r0, [r7, #0]
 8001dca:	f7ff f861 	bl	8000e90 <__aeabi_fcmplt>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <PCA9685_SetServoAngle+0x22>
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	603b      	str	r3, [r7, #0]
	if(Angle > MAX_ANGLE) Angle = MAX_ANGLE;
 8001dda:	491f      	ldr	r1, [pc, #124]	; (8001e58 <PCA9685_SetServoAngle+0xa0>)
 8001ddc:	6838      	ldr	r0, [r7, #0]
 8001dde:	f7ff f875 	bl	8000ecc <__aeabi_fcmpgt>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <PCA9685_SetServoAngle+0x34>
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <PCA9685_SetServoAngle+0xa0>)
 8001dea:	603b      	str	r3, [r7, #0]

	Value = (Angle - MIN_ANGLE) * ((float)SERVO_MAX - (float)SERVO_MIN) / (MAX_ANGLE - MIN_ANGLE) + (float)SERVO_MIN;
 8001dec:	6838      	ldr	r0, [r7, #0]
 8001dee:	f7fe fb91 	bl	8000514 <__aeabi_f2d>
 8001df2:	a317      	add	r3, pc, #92	; (adr r3, 8001e50 <PCA9685_SetServoAngle+0x98>)
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	f7fe fbe4 	bl	80005c4 <__aeabi_dmul>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <PCA9685_SetServoAngle+0xa4>)
 8001e0a:	f7fe fd05 	bl	8000818 <__aeabi_ddiv>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <PCA9685_SetServoAngle+0xa8>)
 8001e1c:	f7fe fa1c 	bl	8000258 <__adddf3>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	f7fe fe86 	bl	8000b38 <__aeabi_d2f>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	60fb      	str	r3, [r7, #12]

	return PCA9685_SetPin(Channel, (uint16_t)Value, 0);
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f7ff f855 	bl	8000ee0 <__aeabi_f2uiz>
 8001e36:	4603      	mov	r3, r0
 8001e38:	b299      	uxth	r1, r3
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff5c 	bl	8001cfc <PCA9685_SetPin>
 8001e44:	4603      	mov	r3, r0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	00000000 	.word	0x00000000
 8001e54:	40786000 	.word	0x40786000
 8001e58:	43340000 	.word	0x43340000
 8001e5c:	40668000 	.word	0x40668000
 8001e60:	405b8000 	.word	0x405b8000

08001e64 <PCA9685_Init>:
#endif

PCA9685_STATUS PCA9685_Init(I2C_HandleTypeDef *hi2c)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	pca9685_i2c = hi2c;
 8001e6c:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <PCA9685_Init+0x28>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6013      	str	r3, [r2, #0]

	PCA9685_SoftwareReset();
 8001e72:	f7ff fe45 	bl	8001b00 <PCA9685_SoftwareReset>
#ifdef PCA9685_SERVO_MODE
	PCA9685_SetPwmFrequency(48);
 8001e76:	2030      	movs	r0, #48	; 0x30
 8001e78:	f7ff fe8e 	bl	8001b98 <PCA9685_SetPwmFrequency>
#else
	PCA9685_SetPwmFrequency(1000);
#endif
	PCA9685_AutoIncrement(1);
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f7ff fe79 	bl	8001b74 <PCA9685_AutoIncrement>

	return PCA9685_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	200002e4 	.word	0x200002e4

08001e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <HAL_MspInit+0x5c>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	4a14      	ldr	r2, [pc, #80]	; (8001eec <HAL_MspInit+0x5c>)
 8001e9c:	f043 0301 	orr.w	r3, r3, #1
 8001ea0:	6193      	str	r3, [r2, #24]
 8001ea2:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_MspInit+0x5c>)
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eae:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <HAL_MspInit+0x5c>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <HAL_MspInit+0x5c>)
 8001eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	61d3      	str	r3, [r2, #28]
 8001eba:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <HAL_MspInit+0x5c>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <HAL_MspInit+0x60>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <HAL_MspInit+0x60>)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40010000 	.word	0x40010000

08001ef4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a15      	ldr	r2, [pc, #84]	; (8001f64 <HAL_I2C_MspInit+0x70>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d123      	bne.n	8001f5c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f14:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <HAL_I2C_MspInit+0x74>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	4a13      	ldr	r2, [pc, #76]	; (8001f68 <HAL_I2C_MspInit+0x74>)
 8001f1a:	f043 0308 	orr.w	r3, r3, #8
 8001f1e:	6193      	str	r3, [r2, #24]
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <HAL_I2C_MspInit+0x74>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f2c:	23c0      	movs	r3, #192	; 0xc0
 8001f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f30:	2312      	movs	r3, #18
 8001f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f34:	2303      	movs	r3, #3
 8001f36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f38:	f107 0310 	add.w	r3, r7, #16
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	480b      	ldr	r0, [pc, #44]	; (8001f6c <HAL_I2C_MspInit+0x78>)
 8001f40:	f000 fa54 	bl	80023ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <HAL_I2C_MspInit+0x74>)
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <HAL_I2C_MspInit+0x74>)
 8001f4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f4e:	61d3      	str	r3, [r2, #28]
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_I2C_MspInit+0x74>)
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f5c:	bf00      	nop
 8001f5e:	3720      	adds	r7, #32
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40005400 	.word	0x40005400
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40010c00 	.word	0x40010c00

08001f70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b088      	sub	sp, #32
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a1b      	ldr	r2, [pc, #108]	; (8001ff8 <HAL_SPI_MspInit+0x88>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d12f      	bne.n	8001ff0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f90:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <HAL_SPI_MspInit+0x8c>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	4a19      	ldr	r2, [pc, #100]	; (8001ffc <HAL_SPI_MspInit+0x8c>)
 8001f96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f9a:	6193      	str	r3, [r2, #24]
 8001f9c:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <HAL_SPI_MspInit+0x8c>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa8:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <HAL_SPI_MspInit+0x8c>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	4a13      	ldr	r2, [pc, #76]	; (8001ffc <HAL_SPI_MspInit+0x8c>)
 8001fae:	f043 0304 	orr.w	r3, r3, #4
 8001fb2:	6193      	str	r3, [r2, #24]
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_SPI_MspInit+0x8c>)
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001fc0:	23a0      	movs	r3, #160	; 0xa0
 8001fc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	480b      	ldr	r0, [pc, #44]	; (8002000 <HAL_SPI_MspInit+0x90>)
 8001fd4:	f000 fa0a 	bl	80023ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fd8:	2340      	movs	r3, #64	; 0x40
 8001fda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe4:	f107 0310 	add.w	r3, r7, #16
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4805      	ldr	r0, [pc, #20]	; (8002000 <HAL_SPI_MspInit+0x90>)
 8001fec:	f000 f9fe 	bl	80023ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ff0:	bf00      	nop
 8001ff2:	3720      	adds	r7, #32
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40013000 	.word	0x40013000
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40010800 	.word	0x40010800

08002004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <HardFault_Handler+0x4>

08002016 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800201a:	e7fe      	b.n	800201a <MemManage_Handler+0x4>

0800201c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002020:	e7fe      	b.n	8002020 <BusFault_Handler+0x4>

08002022 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002026:	e7fe      	b.n	8002026 <UsageFault_Handler+0x4>

08002028 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002050:	f000 f87e 	bl	8002150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}

08002058 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800205e:	f001 fe22 	bl	8003ca6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000884 	.word	0x20000884

0800206c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr

08002078 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002078:	480c      	ldr	r0, [pc, #48]	; (80020ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800207a:	490d      	ldr	r1, [pc, #52]	; (80020b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800207c:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800207e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002080:	e002      	b.n	8002088 <LoopCopyDataInit>

08002082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002086:	3304      	adds	r3, #4

08002088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800208a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800208c:	d3f9      	bcc.n	8002082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002090:	4c0a      	ldr	r4, [pc, #40]	; (80020bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002094:	e001      	b.n	800209a <LoopFillZerobss>

08002096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002098:	3204      	adds	r2, #4

0800209a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800209a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800209c:	d3fb      	bcc.n	8002096 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800209e:	f7ff ffe5 	bl	800206c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020a2:	f008 fce3 	bl	800aa6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020a6:	f7fe ff3b 	bl	8000f20 <main>
  bx lr
 80020aa:	4770      	bx	lr
  ldr r0, =_sdata
 80020ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b0:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80020b4:	0800ac58 	.word	0x0800ac58
  ldr r2, =_sbss
 80020b8:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80020bc:	20000d90 	.word	0x20000d90

080020c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020c0:	e7fe      	b.n	80020c0 <ADC1_2_IRQHandler>
	...

080020c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c8:	4b08      	ldr	r3, [pc, #32]	; (80020ec <HAL_Init+0x28>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a07      	ldr	r2, [pc, #28]	; (80020ec <HAL_Init+0x28>)
 80020ce:	f043 0310 	orr.w	r3, r3, #16
 80020d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d4:	2003      	movs	r0, #3
 80020d6:	f000 f947 	bl	8002368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020da:	200f      	movs	r0, #15
 80020dc:	f000 f808 	bl	80020f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e0:	f7ff fed6 	bl	8001e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40022000 	.word	0x40022000

080020f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020f8:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_InitTick+0x54>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_InitTick+0x58>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	4619      	mov	r1, r3
 8002102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002106:	fbb3 f3f1 	udiv	r3, r3, r1
 800210a:	fbb2 f3f3 	udiv	r3, r2, r3
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f95f 	bl	80023d2 <HAL_SYSTICK_Config>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e00e      	b.n	800213c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b0f      	cmp	r3, #15
 8002122:	d80a      	bhi.n	800213a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002124:	2200      	movs	r2, #0
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	f04f 30ff 	mov.w	r0, #4294967295
 800212c:	f000 f927 	bl	800237e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002130:	4a06      	ldr	r2, [pc, #24]	; (800214c <HAL_InitTick+0x5c>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	e000      	b.n	800213c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000080 	.word	0x20000080
 8002148:	20000088 	.word	0x20000088
 800214c:	20000084 	.word	0x20000084

08002150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002154:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_IncTick+0x1c>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	461a      	mov	r2, r3
 800215a:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_IncTick+0x20>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4413      	add	r3, r2
 8002160:	4a03      	ldr	r2, [pc, #12]	; (8002170 <HAL_IncTick+0x20>)
 8002162:	6013      	str	r3, [r2, #0]
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr
 800216c:	20000088 	.word	0x20000088
 8002170:	200002e8 	.word	0x200002e8

08002174 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return uwTick;
 8002178:	4b02      	ldr	r3, [pc, #8]	; (8002184 <HAL_GetTick+0x10>)
 800217a:	681b      	ldr	r3, [r3, #0]


}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	200002e8 	.word	0x200002e8

08002188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002190:	f7ff fff0 	bl	8002174 <HAL_GetTick>
 8002194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a0:	d005      	beq.n	80021ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021a2:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <HAL_Delay+0x44>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	4413      	add	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ae:	bf00      	nop
 80021b0:	f7ff ffe0 	bl	8002174 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d8f7      	bhi.n	80021b0 <HAL_Delay+0x28>
  {
  }
}
 80021c0:	bf00      	nop
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000088 	.word	0x20000088

080021d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021ec:	4013      	ands	r3, r2
 80021ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002202:	4a04      	ldr	r2, [pc, #16]	; (8002214 <__NVIC_SetPriorityGrouping+0x44>)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	60d3      	str	r3, [r2, #12]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800221c:	4b04      	ldr	r3, [pc, #16]	; (8002230 <__NVIC_GetPriorityGrouping+0x18>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	f003 0307 	and.w	r3, r3, #7
}
 8002226:	4618      	mov	r0, r3
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	2b00      	cmp	r3, #0
 8002244:	db0b      	blt.n	800225e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	f003 021f 	and.w	r2, r3, #31
 800224c:	4906      	ldr	r1, [pc, #24]	; (8002268 <__NVIC_EnableIRQ+0x34>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	2001      	movs	r0, #1
 8002256:	fa00 f202 	lsl.w	r2, r0, r2
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	e000e100 	.word	0xe000e100

0800226c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	6039      	str	r1, [r7, #0]
 8002276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227c:	2b00      	cmp	r3, #0
 800227e:	db0a      	blt.n	8002296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	b2da      	uxtb	r2, r3
 8002284:	490c      	ldr	r1, [pc, #48]	; (80022b8 <__NVIC_SetPriority+0x4c>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	0112      	lsls	r2, r2, #4
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	440b      	add	r3, r1
 8002290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002294:	e00a      	b.n	80022ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4908      	ldr	r1, [pc, #32]	; (80022bc <__NVIC_SetPriority+0x50>)
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	3b04      	subs	r3, #4
 80022a4:	0112      	lsls	r2, r2, #4
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	440b      	add	r3, r1
 80022aa:	761a      	strb	r2, [r3, #24]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000e100 	.word	0xe000e100
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	; 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f1c3 0307 	rsb	r3, r3, #7
 80022da:	2b04      	cmp	r3, #4
 80022dc:	bf28      	it	cs
 80022de:	2304      	movcs	r3, #4
 80022e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3304      	adds	r3, #4
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d902      	bls.n	80022f0 <NVIC_EncodePriority+0x30>
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3b03      	subs	r3, #3
 80022ee:	e000      	b.n	80022f2 <NVIC_EncodePriority+0x32>
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43da      	mvns	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	401a      	ands	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002308:	f04f 31ff 	mov.w	r1, #4294967295
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	43d9      	mvns	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	4313      	orrs	r3, r2
         );
}
 800231a:	4618      	mov	r0, r3
 800231c:	3724      	adds	r7, #36	; 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002334:	d301      	bcc.n	800233a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002336:	2301      	movs	r3, #1
 8002338:	e00f      	b.n	800235a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233a:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <SysTick_Config+0x40>)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002342:	210f      	movs	r1, #15
 8002344:	f04f 30ff 	mov.w	r0, #4294967295
 8002348:	f7ff ff90 	bl	800226c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <SysTick_Config+0x40>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002352:	4b04      	ldr	r3, [pc, #16]	; (8002364 <SysTick_Config+0x40>)
 8002354:	2207      	movs	r2, #7
 8002356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	e000e010 	.word	0xe000e010

08002368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff ff2d 	bl	80021d0 <__NVIC_SetPriorityGrouping>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800237e:	b580      	push	{r7, lr}
 8002380:	b086      	sub	sp, #24
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002390:	f7ff ff42 	bl	8002218 <__NVIC_GetPriorityGrouping>
 8002394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	6978      	ldr	r0, [r7, #20]
 800239c:	f7ff ff90 	bl	80022c0 <NVIC_EncodePriority>
 80023a0:	4602      	mov	r2, r0
 80023a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff5f 	bl	800226c <__NVIC_SetPriority>
}
 80023ae:	bf00      	nop
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff35 	bl	8002234 <__NVIC_EnableIRQ>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ffa2 	bl	8002324 <SysTick_Config>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b08b      	sub	sp, #44	; 0x2c
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023f6:	2300      	movs	r3, #0
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023fa:	2300      	movs	r3, #0
 80023fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023fe:	e179      	b.n	80026f4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002400:	2201      	movs	r2, #1
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	429a      	cmp	r2, r3
 800241a:	f040 8168 	bne.w	80026ee <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4a96      	ldr	r2, [pc, #600]	; (800267c <HAL_GPIO_Init+0x290>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d05e      	beq.n	80024e6 <HAL_GPIO_Init+0xfa>
 8002428:	4a94      	ldr	r2, [pc, #592]	; (800267c <HAL_GPIO_Init+0x290>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d875      	bhi.n	800251a <HAL_GPIO_Init+0x12e>
 800242e:	4a94      	ldr	r2, [pc, #592]	; (8002680 <HAL_GPIO_Init+0x294>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d058      	beq.n	80024e6 <HAL_GPIO_Init+0xfa>
 8002434:	4a92      	ldr	r2, [pc, #584]	; (8002680 <HAL_GPIO_Init+0x294>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d86f      	bhi.n	800251a <HAL_GPIO_Init+0x12e>
 800243a:	4a92      	ldr	r2, [pc, #584]	; (8002684 <HAL_GPIO_Init+0x298>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d052      	beq.n	80024e6 <HAL_GPIO_Init+0xfa>
 8002440:	4a90      	ldr	r2, [pc, #576]	; (8002684 <HAL_GPIO_Init+0x298>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d869      	bhi.n	800251a <HAL_GPIO_Init+0x12e>
 8002446:	4a90      	ldr	r2, [pc, #576]	; (8002688 <HAL_GPIO_Init+0x29c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d04c      	beq.n	80024e6 <HAL_GPIO_Init+0xfa>
 800244c:	4a8e      	ldr	r2, [pc, #568]	; (8002688 <HAL_GPIO_Init+0x29c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d863      	bhi.n	800251a <HAL_GPIO_Init+0x12e>
 8002452:	4a8e      	ldr	r2, [pc, #568]	; (800268c <HAL_GPIO_Init+0x2a0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d046      	beq.n	80024e6 <HAL_GPIO_Init+0xfa>
 8002458:	4a8c      	ldr	r2, [pc, #560]	; (800268c <HAL_GPIO_Init+0x2a0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d85d      	bhi.n	800251a <HAL_GPIO_Init+0x12e>
 800245e:	2b12      	cmp	r3, #18
 8002460:	d82a      	bhi.n	80024b8 <HAL_GPIO_Init+0xcc>
 8002462:	2b12      	cmp	r3, #18
 8002464:	d859      	bhi.n	800251a <HAL_GPIO_Init+0x12e>
 8002466:	a201      	add	r2, pc, #4	; (adr r2, 800246c <HAL_GPIO_Init+0x80>)
 8002468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246c:	080024e7 	.word	0x080024e7
 8002470:	080024c1 	.word	0x080024c1
 8002474:	080024d3 	.word	0x080024d3
 8002478:	08002515 	.word	0x08002515
 800247c:	0800251b 	.word	0x0800251b
 8002480:	0800251b 	.word	0x0800251b
 8002484:	0800251b 	.word	0x0800251b
 8002488:	0800251b 	.word	0x0800251b
 800248c:	0800251b 	.word	0x0800251b
 8002490:	0800251b 	.word	0x0800251b
 8002494:	0800251b 	.word	0x0800251b
 8002498:	0800251b 	.word	0x0800251b
 800249c:	0800251b 	.word	0x0800251b
 80024a0:	0800251b 	.word	0x0800251b
 80024a4:	0800251b 	.word	0x0800251b
 80024a8:	0800251b 	.word	0x0800251b
 80024ac:	0800251b 	.word	0x0800251b
 80024b0:	080024c9 	.word	0x080024c9
 80024b4:	080024dd 	.word	0x080024dd
 80024b8:	4a75      	ldr	r2, [pc, #468]	; (8002690 <HAL_GPIO_Init+0x2a4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d013      	beq.n	80024e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024be:	e02c      	b.n	800251a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	623b      	str	r3, [r7, #32]
          break;
 80024c6:	e029      	b.n	800251c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	3304      	adds	r3, #4
 80024ce:	623b      	str	r3, [r7, #32]
          break;
 80024d0:	e024      	b.n	800251c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	3308      	adds	r3, #8
 80024d8:	623b      	str	r3, [r7, #32]
          break;
 80024da:	e01f      	b.n	800251c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	330c      	adds	r3, #12
 80024e2:	623b      	str	r3, [r7, #32]
          break;
 80024e4:	e01a      	b.n	800251c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d102      	bne.n	80024f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024ee:	2304      	movs	r3, #4
 80024f0:	623b      	str	r3, [r7, #32]
          break;
 80024f2:	e013      	b.n	800251c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d105      	bne.n	8002508 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024fc:	2308      	movs	r3, #8
 80024fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69fa      	ldr	r2, [r7, #28]
 8002504:	611a      	str	r2, [r3, #16]
          break;
 8002506:	e009      	b.n	800251c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002508:	2308      	movs	r3, #8
 800250a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69fa      	ldr	r2, [r7, #28]
 8002510:	615a      	str	r2, [r3, #20]
          break;
 8002512:	e003      	b.n	800251c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002514:	2300      	movs	r3, #0
 8002516:	623b      	str	r3, [r7, #32]
          break;
 8002518:	e000      	b.n	800251c <HAL_GPIO_Init+0x130>
          break;
 800251a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	2bff      	cmp	r3, #255	; 0xff
 8002520:	d801      	bhi.n	8002526 <HAL_GPIO_Init+0x13a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	e001      	b.n	800252a <HAL_GPIO_Init+0x13e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3304      	adds	r3, #4
 800252a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	2bff      	cmp	r3, #255	; 0xff
 8002530:	d802      	bhi.n	8002538 <HAL_GPIO_Init+0x14c>
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	e002      	b.n	800253e <HAL_GPIO_Init+0x152>
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	3b08      	subs	r3, #8
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	210f      	movs	r1, #15
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	fa01 f303 	lsl.w	r3, r1, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	401a      	ands	r2, r3
 8002550:	6a39      	ldr	r1, [r7, #32]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	fa01 f303 	lsl.w	r3, r1, r3
 8002558:	431a      	orrs	r2, r3
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80c1 	beq.w	80026ee <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800256c:	4b49      	ldr	r3, [pc, #292]	; (8002694 <HAL_GPIO_Init+0x2a8>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	4a48      	ldr	r2, [pc, #288]	; (8002694 <HAL_GPIO_Init+0x2a8>)
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	6193      	str	r3, [r2, #24]
 8002578:	4b46      	ldr	r3, [pc, #280]	; (8002694 <HAL_GPIO_Init+0x2a8>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002584:	4a44      	ldr	r2, [pc, #272]	; (8002698 <HAL_GPIO_Init+0x2ac>)
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	089b      	lsrs	r3, r3, #2
 800258a:	3302      	adds	r3, #2
 800258c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002590:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	220f      	movs	r2, #15
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	4013      	ands	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a3c      	ldr	r2, [pc, #240]	; (800269c <HAL_GPIO_Init+0x2b0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d01f      	beq.n	80025f0 <HAL_GPIO_Init+0x204>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a3b      	ldr	r2, [pc, #236]	; (80026a0 <HAL_GPIO_Init+0x2b4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d019      	beq.n	80025ec <HAL_GPIO_Init+0x200>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a3a      	ldr	r2, [pc, #232]	; (80026a4 <HAL_GPIO_Init+0x2b8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d013      	beq.n	80025e8 <HAL_GPIO_Init+0x1fc>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a39      	ldr	r2, [pc, #228]	; (80026a8 <HAL_GPIO_Init+0x2bc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d00d      	beq.n	80025e4 <HAL_GPIO_Init+0x1f8>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a38      	ldr	r2, [pc, #224]	; (80026ac <HAL_GPIO_Init+0x2c0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d007      	beq.n	80025e0 <HAL_GPIO_Init+0x1f4>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a37      	ldr	r2, [pc, #220]	; (80026b0 <HAL_GPIO_Init+0x2c4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d101      	bne.n	80025dc <HAL_GPIO_Init+0x1f0>
 80025d8:	2305      	movs	r3, #5
 80025da:	e00a      	b.n	80025f2 <HAL_GPIO_Init+0x206>
 80025dc:	2306      	movs	r3, #6
 80025de:	e008      	b.n	80025f2 <HAL_GPIO_Init+0x206>
 80025e0:	2304      	movs	r3, #4
 80025e2:	e006      	b.n	80025f2 <HAL_GPIO_Init+0x206>
 80025e4:	2303      	movs	r3, #3
 80025e6:	e004      	b.n	80025f2 <HAL_GPIO_Init+0x206>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e002      	b.n	80025f2 <HAL_GPIO_Init+0x206>
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <HAL_GPIO_Init+0x206>
 80025f0:	2300      	movs	r3, #0
 80025f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f4:	f002 0203 	and.w	r2, r2, #3
 80025f8:	0092      	lsls	r2, r2, #2
 80025fa:	4093      	lsls	r3, r2
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002602:	4925      	ldr	r1, [pc, #148]	; (8002698 <HAL_GPIO_Init+0x2ac>)
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	089b      	lsrs	r3, r3, #2
 8002608:	3302      	adds	r3, #2
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d006      	beq.n	800262a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800261c:	4b25      	ldr	r3, [pc, #148]	; (80026b4 <HAL_GPIO_Init+0x2c8>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4924      	ldr	r1, [pc, #144]	; (80026b4 <HAL_GPIO_Init+0x2c8>)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	600b      	str	r3, [r1, #0]
 8002628:	e006      	b.n	8002638 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800262a:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <HAL_GPIO_Init+0x2c8>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	43db      	mvns	r3, r3
 8002632:	4920      	ldr	r1, [pc, #128]	; (80026b4 <HAL_GPIO_Init+0x2c8>)
 8002634:	4013      	ands	r3, r2
 8002636:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d006      	beq.n	8002652 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002644:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <HAL_GPIO_Init+0x2c8>)
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	491a      	ldr	r1, [pc, #104]	; (80026b4 <HAL_GPIO_Init+0x2c8>)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]
 8002650:	e006      	b.n	8002660 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002652:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <HAL_GPIO_Init+0x2c8>)
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	43db      	mvns	r3, r3
 800265a:	4916      	ldr	r1, [pc, #88]	; (80026b4 <HAL_GPIO_Init+0x2c8>)
 800265c:	4013      	ands	r3, r2
 800265e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d025      	beq.n	80026b8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_GPIO_Init+0x2c8>)
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	4910      	ldr	r1, [pc, #64]	; (80026b4 <HAL_GPIO_Init+0x2c8>)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	608b      	str	r3, [r1, #8]
 8002678:	e025      	b.n	80026c6 <HAL_GPIO_Init+0x2da>
 800267a:	bf00      	nop
 800267c:	10320000 	.word	0x10320000
 8002680:	10310000 	.word	0x10310000
 8002684:	10220000 	.word	0x10220000
 8002688:	10210000 	.word	0x10210000
 800268c:	10120000 	.word	0x10120000
 8002690:	10110000 	.word	0x10110000
 8002694:	40021000 	.word	0x40021000
 8002698:	40010000 	.word	0x40010000
 800269c:	40010800 	.word	0x40010800
 80026a0:	40010c00 	.word	0x40010c00
 80026a4:	40011000 	.word	0x40011000
 80026a8:	40011400 	.word	0x40011400
 80026ac:	40011800 	.word	0x40011800
 80026b0:	40011c00 	.word	0x40011c00
 80026b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026b8:	4b15      	ldr	r3, [pc, #84]	; (8002710 <HAL_GPIO_Init+0x324>)
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	43db      	mvns	r3, r3
 80026c0:	4913      	ldr	r1, [pc, #76]	; (8002710 <HAL_GPIO_Init+0x324>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d006      	beq.n	80026e0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026d2:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <HAL_GPIO_Init+0x324>)
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	490e      	ldr	r1, [pc, #56]	; (8002710 <HAL_GPIO_Init+0x324>)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60cb      	str	r3, [r1, #12]
 80026de:	e006      	b.n	80026ee <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_GPIO_Init+0x324>)
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	4909      	ldr	r1, [pc, #36]	; (8002710 <HAL_GPIO_Init+0x324>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	3301      	adds	r3, #1
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	fa22 f303 	lsr.w	r3, r2, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f47f ae7e 	bne.w	8002400 <HAL_GPIO_Init+0x14>
  }
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	372c      	adds	r7, #44	; 0x2c
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr
 8002710:	40010400 	.word	0x40010400

08002714 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	807b      	strh	r3, [r7, #2]
 8002720:	4613      	mov	r3, r2
 8002722:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002724:	787b      	ldrb	r3, [r7, #1]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d003      	beq.n	8002732 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800272a:	887a      	ldrh	r2, [r7, #2]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002730:	e003      	b.n	800273a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002732:	887b      	ldrh	r3, [r7, #2]
 8002734:	041a      	lsls	r2, r3, #16
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	611a      	str	r2, [r3, #16]
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e12b      	b.n	80029ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff fbc2 	bl	8001ef4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2224      	movs	r2, #36	; 0x24
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002796:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027a8:	f003 f9e4 	bl	8005b74 <HAL_RCC_GetPCLK1Freq>
 80027ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4a81      	ldr	r2, [pc, #516]	; (80029b8 <HAL_I2C_Init+0x274>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d807      	bhi.n	80027c8 <HAL_I2C_Init+0x84>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4a80      	ldr	r2, [pc, #512]	; (80029bc <HAL_I2C_Init+0x278>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	bf94      	ite	ls
 80027c0:	2301      	movls	r3, #1
 80027c2:	2300      	movhi	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	e006      	b.n	80027d6 <HAL_I2C_Init+0x92>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4a7d      	ldr	r2, [pc, #500]	; (80029c0 <HAL_I2C_Init+0x27c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	bf94      	ite	ls
 80027d0:	2301      	movls	r3, #1
 80027d2:	2300      	movhi	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e0e7      	b.n	80029ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4a78      	ldr	r2, [pc, #480]	; (80029c4 <HAL_I2C_Init+0x280>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	0c9b      	lsrs	r3, r3, #18
 80027e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4a6a      	ldr	r2, [pc, #424]	; (80029b8 <HAL_I2C_Init+0x274>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d802      	bhi.n	8002818 <HAL_I2C_Init+0xd4>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	3301      	adds	r3, #1
 8002816:	e009      	b.n	800282c <HAL_I2C_Init+0xe8>
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	4a69      	ldr	r2, [pc, #420]	; (80029c8 <HAL_I2C_Init+0x284>)
 8002824:	fba2 2303 	umull	r2, r3, r2, r3
 8002828:	099b      	lsrs	r3, r3, #6
 800282a:	3301      	adds	r3, #1
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	430b      	orrs	r3, r1
 8002832:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800283e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	495c      	ldr	r1, [pc, #368]	; (80029b8 <HAL_I2C_Init+0x274>)
 8002848:	428b      	cmp	r3, r1
 800284a:	d819      	bhi.n	8002880 <HAL_I2C_Init+0x13c>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1e59      	subs	r1, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	fbb1 f3f3 	udiv	r3, r1, r3
 800285a:	1c59      	adds	r1, r3, #1
 800285c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002860:	400b      	ands	r3, r1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_I2C_Init+0x138>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1e59      	subs	r1, r3, #1
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fbb1 f3f3 	udiv	r3, r1, r3
 8002874:	3301      	adds	r3, #1
 8002876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287a:	e051      	b.n	8002920 <HAL_I2C_Init+0x1dc>
 800287c:	2304      	movs	r3, #4
 800287e:	e04f      	b.n	8002920 <HAL_I2C_Init+0x1dc>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d111      	bne.n	80028ac <HAL_I2C_Init+0x168>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	1e58      	subs	r0, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	440b      	add	r3, r1
 8002896:	fbb0 f3f3 	udiv	r3, r0, r3
 800289a:	3301      	adds	r3, #1
 800289c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	e012      	b.n	80028d2 <HAL_I2C_Init+0x18e>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	1e58      	subs	r0, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6859      	ldr	r1, [r3, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	0099      	lsls	r1, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c2:	3301      	adds	r3, #1
 80028c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	bf0c      	ite	eq
 80028cc:	2301      	moveq	r3, #1
 80028ce:	2300      	movne	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_I2C_Init+0x196>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e022      	b.n	8002920 <HAL_I2C_Init+0x1dc>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10e      	bne.n	8002900 <HAL_I2C_Init+0x1bc>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1e58      	subs	r0, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6859      	ldr	r1, [r3, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	440b      	add	r3, r1
 80028f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f4:	3301      	adds	r3, #1
 80028f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028fe:	e00f      	b.n	8002920 <HAL_I2C_Init+0x1dc>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1e58      	subs	r0, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	0099      	lsls	r1, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	fbb0 f3f3 	udiv	r3, r0, r3
 8002916:	3301      	adds	r3, #1
 8002918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800291c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	6809      	ldr	r1, [r1, #0]
 8002924:	4313      	orrs	r3, r2
 8002926:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69da      	ldr	r2, [r3, #28]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800294e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6911      	ldr	r1, [r2, #16]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68d2      	ldr	r2, [r2, #12]
 800295a:	4311      	orrs	r1, r2
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	430b      	orrs	r3, r1
 8002962:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	000186a0 	.word	0x000186a0
 80029bc:	001e847f 	.word	0x001e847f
 80029c0:	003d08ff 	.word	0x003d08ff
 80029c4:	431bde83 	.word	0x431bde83
 80029c8:	10624dd3 	.word	0x10624dd3

080029cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	461a      	mov	r2, r3
 80029d8:	460b      	mov	r3, r1
 80029da:	817b      	strh	r3, [r7, #10]
 80029dc:	4613      	mov	r3, r2
 80029de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029e0:	f7ff fbc8 	bl	8002174 <HAL_GetTick>
 80029e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	f040 80e0 	bne.w	8002bb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2319      	movs	r3, #25
 80029fa:	2201      	movs	r2, #1
 80029fc:	4970      	ldr	r1, [pc, #448]	; (8002bc0 <HAL_I2C_Master_Transmit+0x1f4>)
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 fe44 	bl	800368c <I2C_WaitOnFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e0d3      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_I2C_Master_Transmit+0x50>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e0cc      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d007      	beq.n	8002a42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0201 	orr.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2221      	movs	r2, #33	; 0x21
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	893a      	ldrh	r2, [r7, #8]
 8002a72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4a50      	ldr	r2, [pc, #320]	; (8002bc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a84:	8979      	ldrh	r1, [r7, #10]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	6a3a      	ldr	r2, [r7, #32]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 fbfe 	bl	800328c <I2C_MasterRequestWrite>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e08d      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ab0:	e066      	b.n	8002b80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	6a39      	ldr	r1, [r7, #32]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 febe 	bl	8003838 <I2C_WaitOnTXEFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00d      	beq.n	8002ade <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d107      	bne.n	8002ada <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e06b      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	781a      	ldrb	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d11b      	bne.n	8002b54 <HAL_I2C_Master_Transmit+0x188>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d017      	beq.n	8002b54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	6a39      	ldr	r1, [r7, #32]
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 feae 	bl	80038ba <I2C_WaitOnBTFFlagUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00d      	beq.n	8002b80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d107      	bne.n	8002b7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e01a      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d194      	bne.n	8002ab2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e000      	b.n	8002bb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bb4:	2302      	movs	r3, #2
  }
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	00100002 	.word	0x00100002
 8002bc4:	ffff0000 	.word	0xffff0000

08002bc8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af02      	add	r7, sp, #8
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	4608      	mov	r0, r1
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	817b      	strh	r3, [r7, #10]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	813b      	strh	r3, [r7, #8]
 8002bde:	4613      	mov	r3, r2
 8002be0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002be2:	f7ff fac7 	bl	8002174 <HAL_GetTick>
 8002be6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b20      	cmp	r3, #32
 8002bf2:	f040 80d9 	bne.w	8002da8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	2319      	movs	r3, #25
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	496d      	ldr	r1, [pc, #436]	; (8002db4 <HAL_I2C_Mem_Write+0x1ec>)
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 fd43 	bl	800368c <I2C_WaitOnFlagUntilTimeout>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e0cc      	b.n	8002daa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_I2C_Mem_Write+0x56>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e0c5      	b.n	8002daa <HAL_I2C_Mem_Write+0x1e2>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d007      	beq.n	8002c44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2221      	movs	r2, #33	; 0x21
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2240      	movs	r2, #64	; 0x40
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a3a      	ldr	r2, [r7, #32]
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4a4d      	ldr	r2, [pc, #308]	; (8002db8 <HAL_I2C_Mem_Write+0x1f0>)
 8002c84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c86:	88f8      	ldrh	r0, [r7, #6]
 8002c88:	893a      	ldrh	r2, [r7, #8]
 8002c8a:	8979      	ldrh	r1, [r7, #10]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	9301      	str	r3, [sp, #4]
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	4603      	mov	r3, r0
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 fb7a 	bl	8003390 <I2C_RequestMemoryWrite>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d052      	beq.n	8002d48 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e081      	b.n	8002daa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 fdc4 	bl	8003838 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00d      	beq.n	8002cd2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d107      	bne.n	8002cce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ccc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e06b      	b.n	8002daa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	781a      	ldrb	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d11b      	bne.n	8002d48 <HAL_I2C_Mem_Write+0x180>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d017      	beq.n	8002d48 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	781a      	ldrb	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1aa      	bne.n	8002ca6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 fdb0 	bl	80038ba <I2C_WaitOnBTFFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00d      	beq.n	8002d7c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d107      	bne.n	8002d78 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e016      	b.n	8002daa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e000      	b.n	8002daa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
  }
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	00100002 	.word	0x00100002
 8002db8:	ffff0000 	.word	0xffff0000

08002dbc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08c      	sub	sp, #48	; 0x30
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	4608      	mov	r0, r1
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4603      	mov	r3, r0
 8002dcc:	817b      	strh	r3, [r7, #10]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	813b      	strh	r3, [r7, #8]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dda:	f7ff f9cb 	bl	8002174 <HAL_GetTick>
 8002dde:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b20      	cmp	r3, #32
 8002dea:	f040 8244 	bne.w	8003276 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	2319      	movs	r3, #25
 8002df4:	2201      	movs	r2, #1
 8002df6:	4982      	ldr	r1, [pc, #520]	; (8003000 <HAL_I2C_Mem_Read+0x244>)
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 fc47 	bl	800368c <I2C_WaitOnFlagUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
 8002e06:	e237      	b.n	8003278 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_I2C_Mem_Read+0x5a>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e230      	b.n	8003278 <HAL_I2C_Mem_Read+0x4bc>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d007      	beq.n	8002e3c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2222      	movs	r2, #34	; 0x22
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2240      	movs	r2, #64	; 0x40
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4a62      	ldr	r2, [pc, #392]	; (8003004 <HAL_I2C_Mem_Read+0x248>)
 8002e7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e7e:	88f8      	ldrh	r0, [r7, #6]
 8002e80:	893a      	ldrh	r2, [r7, #8]
 8002e82:	8979      	ldrh	r1, [r7, #10]
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	9301      	str	r3, [sp, #4]
 8002e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 fb14 	bl	80034bc <I2C_RequestMemoryRead>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e1ec      	b.n	8003278 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d113      	bne.n	8002ece <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	61fb      	str	r3, [r7, #28]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	61fb      	str	r3, [r7, #28]
 8002eba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	e1c0      	b.n	8003250 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d11e      	bne.n	8002f14 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee4:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee6:	b672      	cpsid	i
}
 8002ee8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eea:	2300      	movs	r3, #0
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f10:	b662      	cpsie	i
}
 8002f12:	e035      	b.n	8002f80 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d11e      	bne.n	8002f5a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f2a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f2c:	b672      	cpsid	i
}
 8002f2e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f56:	b662      	cpsie	i
}
 8002f58:	e012      	b.n	8002f80 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f68:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002f80:	e166      	b.n	8003250 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	f200 811f 	bhi.w	80031ca <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d123      	bne.n	8002fdc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 fccf 	bl	800393c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e167      	b.n	8003278 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fda:	e139      	b.n	8003250 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d152      	bne.n	800308a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fea:	2200      	movs	r2, #0
 8002fec:	4906      	ldr	r1, [pc, #24]	; (8003008 <HAL_I2C_Mem_Read+0x24c>)
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 fb4c 	bl	800368c <I2C_WaitOnFlagUntilTimeout>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d008      	beq.n	800300c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e13c      	b.n	8003278 <HAL_I2C_Mem_Read+0x4bc>
 8002ffe:	bf00      	nop
 8003000:	00100002 	.word	0x00100002
 8003004:	ffff0000 	.word	0xffff0000
 8003008:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800300c:	b672      	cpsid	i
}
 800300e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003052:	b662      	cpsie	i
}
 8003054:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003088:	e0e2      	b.n	8003250 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003090:	2200      	movs	r2, #0
 8003092:	497b      	ldr	r1, [pc, #492]	; (8003280 <HAL_I2C_Mem_Read+0x4c4>)
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 faf9 	bl	800368c <I2C_WaitOnFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0e9      	b.n	8003278 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80030b4:	b672      	cpsid	i
}
 80030b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	3b01      	subs	r3, #1
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80030ea:	4b66      	ldr	r3, [pc, #408]	; (8003284 <HAL_I2C_Mem_Read+0x4c8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	08db      	lsrs	r3, r3, #3
 80030f0:	4a65      	ldr	r2, [pc, #404]	; (8003288 <HAL_I2C_Mem_Read+0x4cc>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	0a1a      	lsrs	r2, r3, #8
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	00da      	lsls	r2, r3, #3
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	3b01      	subs	r3, #1
 8003108:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d118      	bne.n	8003142 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f043 0220 	orr.w	r2, r3, #32
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003132:	b662      	cpsie	i
}
 8003134:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e09a      	b.n	8003278 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b04      	cmp	r3, #4
 800314e:	d1d9      	bne.n	8003104 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003192:	b662      	cpsie	i
}
 8003194:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031c8:	e042      	b.n	8003250 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fbb4 	bl	800393c <I2C_WaitOnRXNEFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e04c      	b.n	8003278 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b04      	cmp	r3, #4
 800321c:	d118      	bne.n	8003250 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003246:	b29b      	uxth	r3, r3
 8003248:	3b01      	subs	r3, #1
 800324a:	b29a      	uxth	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003254:	2b00      	cmp	r3, #0
 8003256:	f47f ae94 	bne.w	8002f82 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2220      	movs	r2, #32
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	e000      	b.n	8003278 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003276:	2302      	movs	r3, #2
  }
}
 8003278:	4618      	mov	r0, r3
 800327a:	3728      	adds	r7, #40	; 0x28
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	00010004 	.word	0x00010004
 8003284:	20000080 	.word	0x20000080
 8003288:	14f8b589 	.word	0x14f8b589

0800328c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af02      	add	r7, sp, #8
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	460b      	mov	r3, r1
 800329a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d006      	beq.n	80032b6 <I2C_MasterRequestWrite+0x2a>
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d003      	beq.n	80032b6 <I2C_MasterRequestWrite+0x2a>
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032b4:	d108      	bne.n	80032c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c4:	601a      	str	r2, [r3, #0]
 80032c6:	e00b      	b.n	80032e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	2b12      	cmp	r3, #18
 80032ce:	d107      	bne.n	80032e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 f9cd 	bl	800368c <I2C_WaitOnFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00d      	beq.n	8003314 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003306:	d103      	bne.n	8003310 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800330e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e035      	b.n	8003380 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800331c:	d108      	bne.n	8003330 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800331e:	897b      	ldrh	r3, [r7, #10]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	461a      	mov	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800332c:	611a      	str	r2, [r3, #16]
 800332e:	e01b      	b.n	8003368 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003330:	897b      	ldrh	r3, [r7, #10]
 8003332:	11db      	asrs	r3, r3, #7
 8003334:	b2db      	uxtb	r3, r3
 8003336:	f003 0306 	and.w	r3, r3, #6
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f063 030f 	orn	r3, r3, #15
 8003340:	b2da      	uxtb	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	490e      	ldr	r1, [pc, #56]	; (8003388 <I2C_MasterRequestWrite+0xfc>)
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f9f3 	bl	800373a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e010      	b.n	8003380 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800335e:	897b      	ldrh	r3, [r7, #10]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4907      	ldr	r1, [pc, #28]	; (800338c <I2C_MasterRequestWrite+0x100>)
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f9e3 	bl	800373a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	00010008 	.word	0x00010008
 800338c:	00010002 	.word	0x00010002

08003390 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	4608      	mov	r0, r1
 800339a:	4611      	mov	r1, r2
 800339c:	461a      	mov	r2, r3
 800339e:	4603      	mov	r3, r0
 80033a0:	817b      	strh	r3, [r7, #10]
 80033a2:	460b      	mov	r3, r1
 80033a4:	813b      	strh	r3, [r7, #8]
 80033a6:	4613      	mov	r3, r2
 80033a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f960 	bl	800368c <I2C_WaitOnFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00d      	beq.n	80033ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e0:	d103      	bne.n	80033ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e05f      	b.n	80034ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033ee:	897b      	ldrh	r3, [r7, #10]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	461a      	mov	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	6a3a      	ldr	r2, [r7, #32]
 8003402:	492d      	ldr	r1, [pc, #180]	; (80034b8 <I2C_RequestMemoryWrite+0x128>)
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f998 	bl	800373a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e04c      	b.n	80034ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800342a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800342c:	6a39      	ldr	r1, [r7, #32]
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 fa02 	bl	8003838 <I2C_WaitOnTXEFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00d      	beq.n	8003456 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	2b04      	cmp	r3, #4
 8003440:	d107      	bne.n	8003452 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003450:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e02b      	b.n	80034ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003456:	88fb      	ldrh	r3, [r7, #6]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d105      	bne.n	8003468 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800345c:	893b      	ldrh	r3, [r7, #8]
 800345e:	b2da      	uxtb	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	611a      	str	r2, [r3, #16]
 8003466:	e021      	b.n	80034ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003468:	893b      	ldrh	r3, [r7, #8]
 800346a:	0a1b      	lsrs	r3, r3, #8
 800346c:	b29b      	uxth	r3, r3
 800346e:	b2da      	uxtb	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003478:	6a39      	ldr	r1, [r7, #32]
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f9dc 	bl	8003838 <I2C_WaitOnTXEFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00d      	beq.n	80034a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	2b04      	cmp	r3, #4
 800348c:	d107      	bne.n	800349e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800349c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e005      	b.n	80034ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034a2:	893b      	ldrh	r3, [r7, #8]
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	00010002 	.word	0x00010002

080034bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b088      	sub	sp, #32
 80034c0:	af02      	add	r7, sp, #8
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	4608      	mov	r0, r1
 80034c6:	4611      	mov	r1, r2
 80034c8:	461a      	mov	r2, r3
 80034ca:	4603      	mov	r3, r0
 80034cc:	817b      	strh	r3, [r7, #10]
 80034ce:	460b      	mov	r3, r1
 80034d0:	813b      	strh	r3, [r7, #8]
 80034d2:	4613      	mov	r3, r2
 80034d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f8c2 	bl	800368c <I2C_WaitOnFlagUntilTimeout>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00d      	beq.n	800352a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351c:	d103      	bne.n	8003526 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003524:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e0aa      	b.n	8003680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800352a:	897b      	ldrh	r3, [r7, #10]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	461a      	mov	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003538:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	6a3a      	ldr	r2, [r7, #32]
 800353e:	4952      	ldr	r1, [pc, #328]	; (8003688 <I2C_RequestMemoryRead+0x1cc>)
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 f8fa 	bl	800373a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e097      	b.n	8003680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003568:	6a39      	ldr	r1, [r7, #32]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f964 	bl	8003838 <I2C_WaitOnTXEFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00d      	beq.n	8003592 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	2b04      	cmp	r3, #4
 800357c:	d107      	bne.n	800358e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800358c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e076      	b.n	8003680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d105      	bne.n	80035a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003598:	893b      	ldrh	r3, [r7, #8]
 800359a:	b2da      	uxtb	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	611a      	str	r2, [r3, #16]
 80035a2:	e021      	b.n	80035e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035a4:	893b      	ldrh	r3, [r7, #8]
 80035a6:	0a1b      	lsrs	r3, r3, #8
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b4:	6a39      	ldr	r1, [r7, #32]
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f93e 	bl	8003838 <I2C_WaitOnTXEFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00d      	beq.n	80035de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d107      	bne.n	80035da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e050      	b.n	8003680 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035de:	893b      	ldrh	r3, [r7, #8]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ea:	6a39      	ldr	r1, [r7, #32]
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f923 	bl	8003838 <I2C_WaitOnTXEFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00d      	beq.n	8003614 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d107      	bne.n	8003610 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e035      	b.n	8003680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003622:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	2200      	movs	r2, #0
 800362c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f82b 	bl	800368c <I2C_WaitOnFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00d      	beq.n	8003658 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364a:	d103      	bne.n	8003654 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003652:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e013      	b.n	8003680 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003658:	897b      	ldrh	r3, [r7, #10]
 800365a:	b2db      	uxtb	r3, r3
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	b2da      	uxtb	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	6a3a      	ldr	r2, [r7, #32]
 800366c:	4906      	ldr	r1, [pc, #24]	; (8003688 <I2C_RequestMemoryRead+0x1cc>)
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f863 	bl	800373a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	00010002 	.word	0x00010002

0800368c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	4613      	mov	r3, r2
 800369a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800369c:	e025      	b.n	80036ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a4:	d021      	beq.n	80036ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a6:	f7fe fd65 	bl	8002174 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d302      	bcc.n	80036bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d116      	bne.n	80036ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f043 0220 	orr.w	r2, r3, #32
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e023      	b.n	8003732 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	0c1b      	lsrs	r3, r3, #16
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d10d      	bne.n	8003710 <I2C_WaitOnFlagUntilTimeout+0x84>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	43da      	mvns	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4013      	ands	r3, r2
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	bf0c      	ite	eq
 8003706:	2301      	moveq	r3, #1
 8003708:	2300      	movne	r3, #0
 800370a:	b2db      	uxtb	r3, r3
 800370c:	461a      	mov	r2, r3
 800370e:	e00c      	b.n	800372a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	43da      	mvns	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4013      	ands	r3, r2
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	bf0c      	ite	eq
 8003722:	2301      	moveq	r3, #1
 8003724:	2300      	movne	r3, #0
 8003726:	b2db      	uxtb	r3, r3
 8003728:	461a      	mov	r2, r3
 800372a:	79fb      	ldrb	r3, [r7, #7]
 800372c:	429a      	cmp	r2, r3
 800372e:	d0b6      	beq.n	800369e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b084      	sub	sp, #16
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
 8003746:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003748:	e051      	b.n	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003758:	d123      	bne.n	80037a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003768:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003772:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2220      	movs	r2, #32
 800377e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	f043 0204 	orr.w	r2, r3, #4
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e046      	b.n	8003830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a8:	d021      	beq.n	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037aa:	f7fe fce3 	bl	8002174 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d302      	bcc.n	80037c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d116      	bne.n	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	f043 0220 	orr.w	r2, r3, #32
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e020      	b.n	8003830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	0c1b      	lsrs	r3, r3, #16
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d10c      	bne.n	8003812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	43da      	mvns	r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4013      	ands	r3, r2
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	bf14      	ite	ne
 800380a:	2301      	movne	r3, #1
 800380c:	2300      	moveq	r3, #0
 800380e:	b2db      	uxtb	r3, r3
 8003810:	e00b      	b.n	800382a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	43da      	mvns	r2, r3
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	4013      	ands	r3, r2
 800381e:	b29b      	uxth	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	bf14      	ite	ne
 8003824:	2301      	movne	r3, #1
 8003826:	2300      	moveq	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d18d      	bne.n	800374a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003844:	e02d      	b.n	80038a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f8ce 	bl	80039e8 <I2C_IsAcknowledgeFailed>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e02d      	b.n	80038b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385c:	d021      	beq.n	80038a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385e:	f7fe fc89 	bl	8002174 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	429a      	cmp	r2, r3
 800386c:	d302      	bcc.n	8003874 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d116      	bne.n	80038a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f043 0220 	orr.w	r2, r3, #32
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e007      	b.n	80038b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ac:	2b80      	cmp	r3, #128	; 0x80
 80038ae:	d1ca      	bne.n	8003846 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b084      	sub	sp, #16
 80038be:	af00      	add	r7, sp, #0
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038c6:	e02d      	b.n	8003924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f88d 	bl	80039e8 <I2C_IsAcknowledgeFailed>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e02d      	b.n	8003934 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	d021      	beq.n	8003924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e0:	f7fe fc48 	bl	8002174 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d302      	bcc.n	80038f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d116      	bne.n	8003924 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	f043 0220 	orr.w	r2, r3, #32
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e007      	b.n	8003934 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	f003 0304 	and.w	r3, r3, #4
 800392e:	2b04      	cmp	r3, #4
 8003930:	d1ca      	bne.n	80038c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003948:	e042      	b.n	80039d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	2b10      	cmp	r3, #16
 8003956:	d119      	bne.n	800398c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f06f 0210 	mvn.w	r2, #16
 8003960:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e029      	b.n	80039e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398c:	f7fe fbf2 	bl	8002174 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	429a      	cmp	r2, r3
 800399a:	d302      	bcc.n	80039a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d116      	bne.n	80039d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	f043 0220 	orr.w	r2, r3, #32
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e007      	b.n	80039e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039da:	2b40      	cmp	r3, #64	; 0x40
 80039dc:	d1b5      	bne.n	800394a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039fe:	d11b      	bne.n	8003a38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	f043 0204 	orr.w	r2, r3, #4
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e000      	b.n	8003a3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a46:	b08b      	sub	sp, #44	; 0x2c
 8003a48:	af06      	add	r7, sp, #24
 8003a4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e0fd      	b.n	8003c52 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f006 fd54 	bl	800a518 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2203      	movs	r2, #3
 8003a74:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f002 fa0b 	bl	8005e98 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	687e      	ldr	r6, [r7, #4]
 8003a8a:	466d      	mov	r5, sp
 8003a8c:	f106 0410 	add.w	r4, r6, #16
 8003a90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	602b      	str	r3, [r5, #0]
 8003a98:	1d33      	adds	r3, r6, #4
 8003a9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a9c:	6838      	ldr	r0, [r7, #0]
 8003a9e:	f002 f9d5 	bl	8005e4c <USB_CoreInit>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0ce      	b.n	8003c52 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f002 fa06 	bl	8005ecc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	73fb      	strb	r3, [r7, #15]
 8003ac4:	e04c      	b.n	8003b60 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	440b      	add	r3, r1
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	440b      	add	r3, r1
 8003aec:	7bfa      	ldrb	r2, [r7, #15]
 8003aee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003af0:	7bfa      	ldrb	r2, [r7, #15]
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	b298      	uxth	r0, r3
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	440b      	add	r3, r1
 8003b02:	3336      	adds	r3, #54	; 0x36
 8003b04:	4602      	mov	r2, r0
 8003b06:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	440b      	add	r3, r1
 8003b18:	3303      	adds	r3, #3
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b1e:	7bfa      	ldrb	r2, [r7, #15]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	440b      	add	r3, r1
 8003b2c:	3338      	adds	r3, #56	; 0x38
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b32:	7bfa      	ldrb	r2, [r7, #15]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	440b      	add	r3, r1
 8003b40:	333c      	adds	r3, #60	; 0x3c
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b46:	7bfa      	ldrb	r2, [r7, #15]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	440b      	add	r3, r1
 8003b54:	3340      	adds	r3, #64	; 0x40
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	73fb      	strb	r3, [r7, #15]
 8003b60:	7bfa      	ldrb	r2, [r7, #15]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d3ad      	bcc.n	8003ac6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73fb      	strb	r3, [r7, #15]
 8003b6e:	e044      	b.n	8003bfa <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b70:	7bfa      	ldrb	r2, [r7, #15]
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	440b      	add	r3, r1
 8003b7e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b86:	7bfa      	ldrb	r2, [r7, #15]
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	440b      	add	r3, r1
 8003b94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003b98:	7bfa      	ldrb	r2, [r7, #15]
 8003b9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b9c:	7bfa      	ldrb	r2, [r7, #15]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	440b      	add	r3, r1
 8003baa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003bae:	2200      	movs	r2, #0
 8003bb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bb2:	7bfa      	ldrb	r2, [r7, #15]
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	440b      	add	r3, r1
 8003bc0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bc8:	7bfa      	ldrb	r2, [r7, #15]
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bde:	7bfa      	ldrb	r2, [r7, #15]
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	440b      	add	r3, r1
 8003bec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	73fb      	strb	r3, [r7, #15]
 8003bfa:	7bfa      	ldrb	r2, [r7, #15]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d3b5      	bcc.n	8003b70 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	687e      	ldr	r6, [r7, #4]
 8003c0c:	466d      	mov	r5, sp
 8003c0e:	f106 0410 	add.w	r4, r6, #16
 8003c12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c16:	6823      	ldr	r3, [r4, #0]
 8003c18:	602b      	str	r3, [r5, #0]
 8003c1a:	1d33      	adds	r3, r6, #4
 8003c1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c1e:	6838      	ldr	r0, [r7, #0]
 8003c20:	f002 f960 	bl	8005ee4 <USB_DevInit>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d005      	beq.n	8003c36 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e00d      	b.n	8003c52 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f004 fe12 	bl	8008874 <USB_DevDisconnect>

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c5a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_PCD_Start+0x16>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e016      	b.n	8003c9e <HAL_PCD_Start+0x44>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f002 f8f5 	bl	8005e6c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003c82:	2101      	movs	r1, #1
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f006 feba 	bl	800a9fe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f004 fde6 	bl	8008860 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b088      	sub	sp, #32
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f004 fde8 	bl	8008888 <USB_ReadInterrupts>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc2:	d102      	bne.n	8003cca <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fb5f 	bl	8004388 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f004 fdda 	bl	8008888 <USB_ReadInterrupts>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cde:	d112      	bne.n	8003d06 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cf2:	b292      	uxth	r2, r2
 8003cf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f006 fc88 	bl	800a60e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003cfe:	2100      	movs	r1, #0
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f923 	bl	8003f4c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f004 fdbc 	bl	8008888 <USB_ReadInterrupts>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d1a:	d10b      	bne.n	8003d34 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d2e:	b292      	uxth	r2, r2
 8003d30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f004 fda5 	bl	8008888 <USB_ReadInterrupts>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d48:	d10b      	bne.n	8003d62 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d5c:	b292      	uxth	r2, r2
 8003d5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f004 fd8e 	bl	8008888 <USB_ReadInterrupts>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d76:	d126      	bne.n	8003dc6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0204 	bic.w	r2, r2, #4
 8003d8a:	b292      	uxth	r2, r2
 8003d8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0208 	bic.w	r2, r2, #8
 8003da2:	b292      	uxth	r2, r2
 8003da4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f006 fc69 	bl	800a680 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dc0:	b292      	uxth	r2, r2
 8003dc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f004 fd5c 	bl	8008888 <USB_ReadInterrupts>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dda:	f040 8082 	bne.w	8003ee2 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8003dde:	2300      	movs	r3, #0
 8003de0:	77fb      	strb	r3, [r7, #31]
 8003de2:	e010      	b.n	8003e06 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	7ffb      	ldrb	r3, [r7, #31]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	441a      	add	r2, r3
 8003df0:	7ffb      	ldrb	r3, [r7, #31]
 8003df2:	8812      	ldrh	r2, [r2, #0]
 8003df4:	b292      	uxth	r2, r2
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	3320      	adds	r3, #32
 8003dfa:	443b      	add	r3, r7
 8003dfc:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8003e00:	7ffb      	ldrb	r3, [r7, #31]
 8003e02:	3301      	adds	r3, #1
 8003e04:	77fb      	strb	r3, [r7, #31]
 8003e06:	7ffb      	ldrb	r3, [r7, #31]
 8003e08:	2b07      	cmp	r3, #7
 8003e0a:	d9eb      	bls.n	8003de4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	b292      	uxth	r2, r2
 8003e20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	b292      	uxth	r2, r2
 8003e38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003e3c:	bf00      	nop
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0f6      	beq.n	8003e3e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e62:	b292      	uxth	r2, r2
 8003e64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003e68:	2300      	movs	r3, #0
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	e00f      	b.n	8003e8e <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003e6e:	7ffb      	ldrb	r3, [r7, #31]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	4611      	mov	r1, r2
 8003e76:	7ffa      	ldrb	r2, [r7, #31]
 8003e78:	0092      	lsls	r2, r2, #2
 8003e7a:	440a      	add	r2, r1
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	3320      	adds	r3, #32
 8003e80:	443b      	add	r3, r7
 8003e82:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003e86:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003e88:	7ffb      	ldrb	r3, [r7, #31]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	77fb      	strb	r3, [r7, #31]
 8003e8e:	7ffb      	ldrb	r3, [r7, #31]
 8003e90:	2b07      	cmp	r3, #7
 8003e92:	d9ec      	bls.n	8003e6e <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0208 	orr.w	r2, r2, #8
 8003ea6:	b292      	uxth	r2, r2
 8003ea8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ebe:	b292      	uxth	r2, r2
 8003ec0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0204 	orr.w	r2, r2, #4
 8003ed6:	b292      	uxth	r2, r2
 8003ed8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f006 fbb5 	bl	800a64c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f004 fcce 	bl	8008888 <USB_ReadInterrupts>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef6:	d10e      	bne.n	8003f16 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f0a:	b292      	uxth	r2, r2
 8003f0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f006 fb6e 	bl	800a5f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f004 fcb4 	bl	8008888 <USB_ReadInterrupts>
 8003f20:	4603      	mov	r3, r0
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f2a:	d10b      	bne.n	8003f44 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f3e:	b292      	uxth	r2, r2
 8003f40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003f44:	bf00      	nop
 8003f46:	3720      	adds	r7, #32
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_PCD_SetAddress+0x1a>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e013      	b.n	8003f8e <HAL_PCD_SetAddress+0x42>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	78fa      	ldrb	r2, [r7, #3]
 8003f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	78fa      	ldrb	r2, [r7, #3]
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f004 fc5b 	bl	800883a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	4608      	mov	r0, r1
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	70fb      	strb	r3, [r7, #3]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	803b      	strh	r3, [r7, #0]
 8003fac:	4613      	mov	r3, r2
 8003fae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	da0e      	bge.n	8003fda <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	4413      	add	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	705a      	strb	r2, [r3, #1]
 8003fd8:	e00e      	b.n	8003ff8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fda:	78fb      	ldrb	r3, [r7, #3]
 8003fdc:	f003 0207 	and.w	r2, r3, #7
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	4413      	add	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004004:	883a      	ldrh	r2, [r7, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	78ba      	ldrb	r2, [r7, #2]
 800400e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	785b      	ldrb	r3, [r3, #1]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d004      	beq.n	8004022 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004022:	78bb      	ldrb	r3, [r7, #2]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d102      	bne.n	800402e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_PCD_EP_Open+0xa6>
 8004038:	2302      	movs	r3, #2
 800403a:	e00e      	b.n	800405a <HAL_PCD_EP_Open+0xc4>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68f9      	ldr	r1, [r7, #12]
 800404a:	4618      	mov	r0, r3
 800404c:	f001 ff6a 	bl	8005f24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8004058:	7afb      	ldrb	r3, [r7, #11]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	460b      	mov	r3, r1
 800406c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800406e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004072:	2b00      	cmp	r3, #0
 8004074:	da0e      	bge.n	8004094 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	4613      	mov	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4413      	add	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2201      	movs	r2, #1
 8004090:	705a      	strb	r2, [r3, #1]
 8004092:	e00e      	b.n	80040b2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	f003 0207 	and.w	r2, r3, #7
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	4413      	add	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d101      	bne.n	80040cc <HAL_PCD_EP_Close+0x6a>
 80040c8:	2302      	movs	r3, #2
 80040ca:	e00e      	b.n	80040ea <HAL_PCD_EP_Close+0x88>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68f9      	ldr	r1, [r7, #12]
 80040da:	4618      	mov	r0, r3
 80040dc:	f002 fa8c 	bl	80065f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b086      	sub	sp, #24
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
 80040fe:	460b      	mov	r3, r1
 8004100:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004102:	7afb      	ldrb	r3, [r7, #11]
 8004104:	f003 0207 	and.w	r2, r3, #7
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4413      	add	r3, r2
 8004118:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2200      	movs	r2, #0
 800412a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2200      	movs	r2, #0
 8004130:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004132:	7afb      	ldrb	r3, [r7, #11]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	b2da      	uxtb	r2, r3
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800413e:	7afb      	ldrb	r3, [r7, #11]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	2b00      	cmp	r3, #0
 8004146:	d106      	bne.n	8004156 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6979      	ldr	r1, [r7, #20]
 800414e:	4618      	mov	r0, r3
 8004150:	f002 fc3e 	bl	80069d0 <USB_EPStartXfer>
 8004154:	e005      	b.n	8004162 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6979      	ldr	r1, [r7, #20]
 800415c:	4618      	mov	r0, r3
 800415e:	f002 fc37 	bl	80069d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	f003 0207 	and.w	r2, r3, #7
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	440b      	add	r3, r1
 800418a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800418e:	681b      	ldr	r3, [r3, #0]
}
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr

0800419a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b086      	sub	sp, #24
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
 80041a6:	460b      	mov	r3, r1
 80041a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041aa:	7afb      	ldrb	r3, [r7, #11]
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4413      	add	r3, r2
 80041be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2200      	movs	r2, #0
 80041de:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2201      	movs	r2, #1
 80041e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041e6:	7afb      	ldrb	r3, [r7, #11]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041f2:	7afb      	ldrb	r3, [r7, #11]
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d106      	bne.n	800420a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6979      	ldr	r1, [r7, #20]
 8004202:	4618      	mov	r0, r3
 8004204:	f002 fbe4 	bl	80069d0 <USB_EPStartXfer>
 8004208:	e005      	b.n	8004216 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6979      	ldr	r1, [r7, #20]
 8004210:	4618      	mov	r0, r3
 8004212:	f002 fbdd 	bl	80069d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3718      	adds	r7, #24
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800422c:	78fb      	ldrb	r3, [r7, #3]
 800422e:	f003 0207 	and.w	r2, r3, #7
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	429a      	cmp	r2, r3
 8004238:	d901      	bls.n	800423e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e04c      	b.n	80042d8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800423e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004242:	2b00      	cmp	r3, #0
 8004244:	da0e      	bge.n	8004264 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	4413      	add	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	705a      	strb	r2, [r3, #1]
 8004262:	e00c      	b.n	800427e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004264:	78fa      	ldrb	r2, [r7, #3]
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	4413      	add	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2201      	movs	r2, #1
 8004282:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004284:	78fb      	ldrb	r3, [r7, #3]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	b2da      	uxtb	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_PCD_EP_SetStall+0x7e>
 800429a:	2302      	movs	r3, #2
 800429c:	e01c      	b.n	80042d8 <HAL_PCD_EP_SetStall+0xb8>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68f9      	ldr	r1, [r7, #12]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f004 f9c7 	bl	8008640 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d108      	bne.n	80042ce <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80042c6:	4619      	mov	r1, r3
 80042c8:	4610      	mov	r0, r2
 80042ca:	f004 faec 	bl	80088a6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	f003 020f 	and.w	r2, r3, #15
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d901      	bls.n	80042fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e040      	b.n	8004380 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004302:	2b00      	cmp	r3, #0
 8004304:	da0e      	bge.n	8004324 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004306:	78fb      	ldrb	r3, [r7, #3]
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	4413      	add	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2201      	movs	r2, #1
 8004320:	705a      	strb	r2, [r3, #1]
 8004322:	e00e      	b.n	8004342 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004324:	78fb      	ldrb	r3, [r7, #3]
 8004326:	f003 0207 	and.w	r2, r3, #7
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	4413      	add	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	b2da      	uxtb	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <HAL_PCD_EP_ClrStall+0x82>
 800435e:	2302      	movs	r3, #2
 8004360:	e00e      	b.n	8004380 <HAL_PCD_EP_ClrStall+0xa0>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68f9      	ldr	r1, [r7, #12]
 8004370:	4618      	mov	r0, r3
 8004372:	f004 f9b5 	bl	80086e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08e      	sub	sp, #56	; 0x38
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004390:	e2ec      	b.n	800496c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800439a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800439c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80043a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f040 8161 	bne.w	8004674 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80043b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80043b4:	f003 0310 	and.w	r3, r3, #16
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d152      	bne.n	8004462 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80043c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043cc:	81fb      	strh	r3, [r7, #14]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	89fb      	ldrh	r3, [r7, #14]
 80043d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043dc:	b29b      	uxth	r3, r3
 80043de:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3328      	adds	r3, #40	; 0x28
 80043e4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4413      	add	r3, r2
 80043fa:	3302      	adds	r3, #2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6812      	ldr	r2, [r2, #0]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	695a      	ldr	r2, [r3, #20]
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	441a      	add	r2, r3
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004420:	2100      	movs	r1, #0
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f006 f8cb 	bl	800a5be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 829b 	beq.w	800496c <PCD_EP_ISR_Handler+0x5e4>
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	2b00      	cmp	r3, #0
 800443c:	f040 8296 	bne.w	800496c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800444c:	b2da      	uxtb	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	b292      	uxth	r2, r2
 8004454:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004460:	e284      	b.n	800496c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004472:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004478:	2b00      	cmp	r3, #0
 800447a:	d034      	beq.n	80044e6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004484:	b29b      	uxth	r3, r3
 8004486:	461a      	mov	r2, r3
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	4413      	add	r3, r2
 8004490:	3306      	adds	r3, #6
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6812      	ldr	r2, [r2, #0]
 8004498:	4413      	add	r3, r2
 800449a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6818      	ldr	r0, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	f004 fa43 	bl	8008946 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	881b      	ldrh	r3, [r3, #0]
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80044cc:	4013      	ands	r3, r2
 80044ce:	823b      	strh	r3, [r7, #16]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	8a3a      	ldrh	r2, [r7, #16]
 80044d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044da:	b292      	uxth	r2, r2
 80044dc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f006 f840 	bl	800a564 <HAL_PCD_SetupStageCallback>
 80044e4:	e242      	b.n	800496c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80044e6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f280 823e 	bge.w	800496c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80044fc:	4013      	ands	r3, r2
 80044fe:	83bb      	strh	r3, [r7, #28]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	8bba      	ldrh	r2, [r7, #28]
 8004506:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800450a:	b292      	uxth	r2, r2
 800450c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004516:	b29b      	uxth	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	4413      	add	r3, r2
 8004522:	3306      	adds	r3, #6
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6812      	ldr	r2, [r2, #0]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d019      	beq.n	8004576 <PCD_EP_ISR_Handler+0x1ee>
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d015      	beq.n	8004576 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	6959      	ldr	r1, [r3, #20]
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800455a:	b29b      	uxth	r3, r3
 800455c:	f004 f9f3 	bl	8008946 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	695a      	ldr	r2, [r3, #20]
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	441a      	add	r2, r3
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800456e:	2100      	movs	r1, #0
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f006 f809 	bl	800a588 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	b29b      	uxth	r3, r3
 800457e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004582:	2b00      	cmp	r3, #0
 8004584:	f040 81f2 	bne.w	800496c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	61bb      	str	r3, [r7, #24]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004596:	b29b      	uxth	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	4413      	add	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d112      	bne.n	80045d6 <PCD_EP_ISR_Handler+0x24e>
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	801a      	strh	r2, [r3, #0]
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	801a      	strh	r2, [r3, #0]
 80045d4:	e02f      	b.n	8004636 <PCD_EP_ISR_Handler+0x2ae>
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b3e      	cmp	r3, #62	; 0x3e
 80045dc:	d813      	bhi.n	8004606 <PCD_EP_ISR_Handler+0x27e>
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	633b      	str	r3, [r7, #48]	; 0x30
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <PCD_EP_ISR_Handler+0x270>
 80045f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f4:	3301      	adds	r3, #1
 80045f6:	633b      	str	r3, [r7, #48]	; 0x30
 80045f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	029b      	lsls	r3, r3, #10
 80045fe:	b29a      	uxth	r2, r3
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	801a      	strh	r2, [r3, #0]
 8004604:	e017      	b.n	8004636 <PCD_EP_ISR_Handler+0x2ae>
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	633b      	str	r3, [r7, #48]	; 0x30
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f003 031f 	and.w	r3, r3, #31
 8004616:	2b00      	cmp	r3, #0
 8004618:	d102      	bne.n	8004620 <PCD_EP_ISR_Handler+0x298>
 800461a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461c:	3b01      	subs	r3, #1
 800461e:	633b      	str	r3, [r7, #48]	; 0x30
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	b29b      	uxth	r3, r3
 8004624:	029b      	lsls	r3, r3, #10
 8004626:	b29b      	uxth	r3, r3
 8004628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800462c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004630:	b29a      	uxth	r2, r3
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	b29b      	uxth	r3, r3
 800463e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004646:	827b      	strh	r3, [r7, #18]
 8004648:	8a7b      	ldrh	r3, [r7, #18]
 800464a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800464e:	827b      	strh	r3, [r7, #18]
 8004650:	8a7b      	ldrh	r3, [r7, #18]
 8004652:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004656:	827b      	strh	r3, [r7, #18]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	8a7b      	ldrh	r3, [r7, #18]
 800465e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800466a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466e:	b29b      	uxth	r3, r3
 8004670:	8013      	strh	r3, [r2, #0]
 8004672:	e17b      	b.n	800496c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	881b      	ldrh	r3, [r3, #0]
 8004684:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004686:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800468a:	2b00      	cmp	r3, #0
 800468c:	f280 80ea 	bge.w	8004864 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80046a6:	4013      	ands	r3, r2
 80046a8:	853b      	strh	r3, [r7, #40]	; 0x28
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80046ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046be:	b292      	uxth	r2, r2
 80046c0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80046c2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80046c6:	4613      	mov	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	4413      	add	r3, r2
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	7b1b      	ldrb	r3, [r3, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d122      	bne.n	8004726 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	461a      	mov	r2, r3
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	4413      	add	r3, r2
 80046f4:	3306      	adds	r3, #6
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004708:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800470a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 8087 	beq.w	8004820 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	6959      	ldr	r1, [r3, #20]
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	88da      	ldrh	r2, [r3, #6]
 800471e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004720:	f004 f911 	bl	8008946 <USB_ReadPMA>
 8004724:	e07c      	b.n	8004820 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	78db      	ldrb	r3, [r3, #3]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d108      	bne.n	8004740 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800472e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004730:	461a      	mov	r2, r3
 8004732:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f927 	bl	8004988 <HAL_PCD_EP_DB_Receive>
 800473a:	4603      	mov	r3, r0
 800473c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800473e:	e06f      	b.n	8004820 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	b29b      	uxth	r3, r3
 8004752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475a:	847b      	strh	r3, [r7, #34]	; 0x22
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	461a      	mov	r2, r3
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	441a      	add	r2, r3
 800476a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800476c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004770:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004774:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004778:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800477c:	b29b      	uxth	r3, r3
 800477e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	461a      	mov	r2, r3
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	b29b      	uxth	r3, r3
 8004792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d021      	beq.n	80047de <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	461a      	mov	r2, r3
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	4413      	add	r3, r2
 80047ae:	3302      	adds	r3, #2
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6812      	ldr	r2, [r2, #0]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047c2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80047c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d02a      	beq.n	8004820 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	6959      	ldr	r1, [r3, #20]
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	891a      	ldrh	r2, [r3, #8]
 80047d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80047d8:	f004 f8b5 	bl	8008946 <USB_ReadPMA>
 80047dc:	e020      	b.n	8004820 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	461a      	mov	r2, r3
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	4413      	add	r3, r2
 80047f2:	3306      	adds	r3, #6
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6812      	ldr	r2, [r2, #0]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004806:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8004808:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800480a:	2b00      	cmp	r3, #0
 800480c:	d008      	beq.n	8004820 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	6959      	ldr	r1, [r3, #20]
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	895a      	ldrh	r2, [r3, #10]
 800481a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800481c:	f004 f893 	bl	8008946 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004826:	441a      	add	r2, r3
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	695a      	ldr	r2, [r3, #20]
 8004830:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004832:	441a      	add	r2, r3
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d004      	beq.n	800484a <PCD_EP_ISR_Handler+0x4c2>
 8004840:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	429a      	cmp	r2, r3
 8004848:	d206      	bcs.n	8004858 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	4619      	mov	r1, r3
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f005 fe99 	bl	800a588 <HAL_PCD_DataOutStageCallback>
 8004856:	e005      	b.n	8004864 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800485e:	4618      	mov	r0, r3
 8004860:	f002 f8b6 	bl	80069d0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004864:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486a:	2b00      	cmp	r3, #0
 800486c:	d07e      	beq.n	800496c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800486e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	4413      	add	r3, r2
 8004880:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	b29b      	uxth	r3, r3
 8004894:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489c:	843b      	strh	r3, [r7, #32]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	441a      	add	r2, r3
 80048ac:	8c3b      	ldrh	r3, [r7, #32]
 80048ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	78db      	ldrb	r3, [r3, #3]
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d00c      	beq.n	80048dc <PCD_EP_ISR_Handler+0x554>
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	78db      	ldrb	r3, [r3, #3]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d008      	beq.n	80048dc <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d146      	bne.n	8004960 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80048d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80048d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d141      	bne.n	8004960 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	4413      	add	r3, r2
 80048f0:	3302      	adds	r3, #2
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6812      	ldr	r2, [r2, #0]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004904:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	8bfb      	ldrh	r3, [r7, #30]
 800490c:	429a      	cmp	r2, r3
 800490e:	d906      	bls.n	800491e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	699a      	ldr	r2, [r3, #24]
 8004914:	8bfb      	ldrh	r3, [r7, #30]
 8004916:	1ad2      	subs	r2, r2, r3
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	619a      	str	r2, [r3, #24]
 800491c:	e002      	b.n	8004924 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	2200      	movs	r2, #0
 8004922:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d106      	bne.n	800493a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	4619      	mov	r1, r3
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f005 fe43 	bl	800a5be <HAL_PCD_DataInStageCallback>
 8004938:	e018      	b.n	800496c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	695a      	ldr	r2, [r3, #20]
 800493e:	8bfb      	ldrh	r3, [r7, #30]
 8004940:	441a      	add	r2, r3
 8004942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004944:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	69da      	ldr	r2, [r3, #28]
 800494a:	8bfb      	ldrh	r3, [r7, #30]
 800494c:	441a      	add	r2, r3
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004958:	4618      	mov	r0, r3
 800495a:	f002 f839 	bl	80069d0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800495e:	e005      	b.n	800496c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004960:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004962:	461a      	mov	r2, r3
 8004964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f91b 	bl	8004ba2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004974:	b29b      	uxth	r3, r3
 8004976:	b21b      	sxth	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	f6ff ad0a 	blt.w	8004392 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3738      	adds	r7, #56	; 0x38
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b088      	sub	sp, #32
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	4613      	mov	r3, r2
 8004994:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004996:	88fb      	ldrh	r3, [r7, #6]
 8004998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d07e      	beq.n	8004a9e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	461a      	mov	r2, r3
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	4413      	add	r3, r2
 80049b4:	3302      	adds	r3, #2
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	6812      	ldr	r2, [r2, #0]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049c2:	881b      	ldrh	r3, [r3, #0]
 80049c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049c8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	699a      	ldr	r2, [r3, #24]
 80049ce:	8b7b      	ldrh	r3, [r7, #26]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d306      	bcc.n	80049e2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	699a      	ldr	r2, [r3, #24]
 80049d8:	8b7b      	ldrh	r3, [r7, #26]
 80049da:	1ad2      	subs	r2, r2, r3
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	619a      	str	r2, [r3, #24]
 80049e0:	e002      	b.n	80049e8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2200      	movs	r2, #0
 80049e6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d123      	bne.n	8004a38 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0a:	833b      	strh	r3, [r7, #24]
 8004a0c:	8b3b      	ldrh	r3, [r7, #24]
 8004a0e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a12:	833b      	strh	r3, [r7, #24]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	441a      	add	r2, r3
 8004a22:	8b3b      	ldrh	r3, [r7, #24]
 8004a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a38:	88fb      	ldrh	r3, [r7, #6]
 8004a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d01f      	beq.n	8004a82 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5c:	82fb      	strh	r3, [r7, #22]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	441a      	add	r2, r3
 8004a6c:	8afb      	ldrh	r3, [r7, #22]
 8004a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004a82:	8b7b      	ldrh	r3, [r7, #26]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 8087 	beq.w	8004b98 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6818      	ldr	r0, [r3, #0]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	6959      	ldr	r1, [r3, #20]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	891a      	ldrh	r2, [r3, #8]
 8004a96:	8b7b      	ldrh	r3, [r7, #26]
 8004a98:	f003 ff55 	bl	8008946 <USB_ReadPMA>
 8004a9c:	e07c      	b.n	8004b98 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3306      	adds	r3, #6
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ac6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	699a      	ldr	r2, [r3, #24]
 8004acc:	8b7b      	ldrh	r3, [r7, #26]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d306      	bcc.n	8004ae0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	8b7b      	ldrh	r3, [r7, #26]
 8004ad8:	1ad2      	subs	r2, r2, r3
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	619a      	str	r2, [r3, #24]
 8004ade:	e002      	b.n	8004ae6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d123      	bne.n	8004b36 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	461a      	mov	r2, r3
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b08:	83fb      	strh	r3, [r7, #30]
 8004b0a:	8bfb      	ldrh	r3, [r7, #30]
 8004b0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b10:	83fb      	strh	r3, [r7, #30]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	441a      	add	r2, r3
 8004b20:	8bfb      	ldrh	r3, [r7, #30]
 8004b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004b36:	88fb      	ldrh	r3, [r7, #6]
 8004b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d11f      	bne.n	8004b80 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5a:	83bb      	strh	r3, [r7, #28]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	461a      	mov	r2, r3
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	441a      	add	r2, r3
 8004b6a:	8bbb      	ldrh	r3, [r7, #28]
 8004b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004b80:	8b7b      	ldrh	r3, [r7, #26]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d008      	beq.n	8004b98 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6959      	ldr	r1, [r3, #20]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	895a      	ldrh	r2, [r3, #10]
 8004b92:	8b7b      	ldrh	r3, [r7, #26]
 8004b94:	f003 fed7 	bl	8008946 <USB_ReadPMA>
    }
  }

  return count;
 8004b98:	8b7b      	ldrh	r3, [r7, #26]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3720      	adds	r7, #32
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b0a2      	sub	sp, #136	; 0x88
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	4613      	mov	r3, r2
 8004bae:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004bb0:	88fb      	ldrh	r3, [r7, #6]
 8004bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 81c7 	beq.w	8004f4a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	4413      	add	r3, r2
 8004bd0:	3302      	adds	r3, #2
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	6812      	ldr	r2, [r2, #0]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004be4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	699a      	ldr	r2, [r3, #24]
 8004bec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d907      	bls.n	8004c04 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	699a      	ldr	r2, [r3, #24]
 8004bf8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004bfc:	1ad2      	subs	r2, r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	619a      	str	r2, [r3, #24]
 8004c02:	e002      	b.n	8004c0a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2200      	movs	r2, #0
 8004c08:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f040 80b9 	bne.w	8004d86 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	785b      	ldrb	r3, [r3, #1]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d126      	bne.n	8004c6a <HAL_PCD_EP_DB_Transmit+0xc8>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c30:	4413      	add	r3, r2
 8004c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	011a      	lsls	r2, r3, #4
 8004c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	801a      	strh	r2, [r3, #0]
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	801a      	strh	r2, [r3, #0]
 8004c68:	e01a      	b.n	8004ca0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	785b      	ldrb	r3, [r3, #1]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d116      	bne.n	8004ca0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	633b      	str	r3, [r7, #48]	; 0x30
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	4413      	add	r3, r2
 8004c88:	633b      	str	r3, [r7, #48]	; 0x30
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	011a      	lsls	r2, r3, #4
 8004c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c92:	4413      	add	r3, r2
 8004c94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	623b      	str	r3, [r7, #32]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	785b      	ldrb	r3, [r3, #1]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d126      	bne.n	8004cfc <HAL_PCD_EP_DB_Transmit+0x15a>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	61bb      	str	r3, [r7, #24]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	011a      	lsls	r2, r3, #4
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	801a      	strh	r2, [r3, #0]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	801a      	strh	r2, [r3, #0]
 8004cfa:	e017      	b.n	8004d2c <HAL_PCD_EP_DB_Transmit+0x18a>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	785b      	ldrb	r3, [r3, #1]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d113      	bne.n	8004d2c <HAL_PCD_EP_DB_Transmit+0x18a>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	4413      	add	r3, r2
 8004d14:	623b      	str	r3, [r7, #32]
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	011a      	lsls	r2, r3, #4
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d24:	61fb      	str	r3, [r7, #28]
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	4619      	mov	r1, r3
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f005 fc43 	bl	800a5be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d38:	88fb      	ldrh	r3, [r7, #6]
 8004d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 82d4 	beq.w	80052ec <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5e:	827b      	strh	r3, [r7, #18]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	461a      	mov	r2, r3
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	441a      	add	r2, r3
 8004d6e:	8a7b      	ldrh	r3, [r7, #18]
 8004d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	8013      	strh	r3, [r2, #0]
 8004d84:	e2b2      	b.n	80052ec <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d86:	88fb      	ldrh	r3, [r7, #6]
 8004d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d021      	beq.n	8004dd4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	461a      	mov	r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004daa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	441a      	add	r2, r3
 8004dbc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	f040 8286 	bne.w	80052ec <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	695a      	ldr	r2, [r3, #20]
 8004de4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004de8:	441a      	add	r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	69da      	ldr	r2, [r3, #28]
 8004df2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004df6:	441a      	add	r2, r3
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	6a1a      	ldr	r2, [r3, #32]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d309      	bcc.n	8004e1c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6a1a      	ldr	r2, [r3, #32]
 8004e12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e14:	1ad2      	subs	r2, r2, r3
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	621a      	str	r2, [r3, #32]
 8004e1a:	e015      	b.n	8004e48 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d107      	bne.n	8004e34 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8004e24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e28:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e32:	e009      	b.n	8004e48 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2200      	movs	r2, #0
 8004e46:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	785b      	ldrb	r3, [r3, #1]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d155      	bne.n	8004efc <HAL_PCD_EP_DB_Transmit+0x35a>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	461a      	mov	r2, r3
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	4413      	add	r3, r2
 8004e66:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	011a      	lsls	r2, r3, #4
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e70:	4413      	add	r3, r2
 8004e72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e76:	637b      	str	r3, [r7, #52]	; 0x34
 8004e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d112      	bne.n	8004ea4 <HAL_PCD_EP_DB_Transmit+0x302>
 8004e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8c:	801a      	strh	r2, [r3, #0]
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea0:	801a      	strh	r2, [r3, #0]
 8004ea2:	e047      	b.n	8004f34 <HAL_PCD_EP_DB_Transmit+0x392>
 8004ea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ea6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ea8:	d811      	bhi.n	8004ece <HAL_PCD_EP_DB_Transmit+0x32c>
 8004eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eac:	085b      	lsrs	r3, r3, #1
 8004eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_PCD_EP_DB_Transmit+0x31e>
 8004eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	029b      	lsls	r3, r3, #10
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eca:	801a      	strh	r2, [r3, #0]
 8004ecc:	e032      	b.n	8004f34 <HAL_PCD_EP_DB_Transmit+0x392>
 8004ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed0:	095b      	lsrs	r3, r3, #5
 8004ed2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed6:	f003 031f 	and.w	r3, r3, #31
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d102      	bne.n	8004ee4 <HAL_PCD_EP_DB_Transmit+0x342>
 8004ede:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	029b      	lsls	r3, r3, #10
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ef0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef8:	801a      	strh	r2, [r3, #0]
 8004efa:	e01b      	b.n	8004f34 <HAL_PCD_EP_DB_Transmit+0x392>
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	785b      	ldrb	r3, [r3, #1]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d117      	bne.n	8004f34 <HAL_PCD_EP_DB_Transmit+0x392>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	643b      	str	r3, [r7, #64]	; 0x40
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	461a      	mov	r2, r3
 8004f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f18:	4413      	add	r3, r2
 8004f1a:	643b      	str	r3, [r7, #64]	; 0x40
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	011a      	lsls	r2, r3, #4
 8004f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f24:	4413      	add	r3, r2
 8004f26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f32:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6818      	ldr	r0, [r3, #0]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	6959      	ldr	r1, [r3, #20]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	891a      	ldrh	r2, [r3, #8]
 8004f40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	f003 fcba 	bl	80088bc <USB_WritePMA>
 8004f48:	e1d0      	b.n	80052ec <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	461a      	mov	r2, r3
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	4413      	add	r3, r2
 8004f5e:	3306      	adds	r3, #6
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	6812      	ldr	r2, [r2, #0]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f72:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	699a      	ldr	r2, [r3, #24]
 8004f7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d307      	bcc.n	8004f92 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004f8a:	1ad2      	subs	r2, r2, r3
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	619a      	str	r2, [r3, #24]
 8004f90:	e002      	b.n	8004f98 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2200      	movs	r2, #0
 8004f96:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f040 80c4 	bne.w	800512a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	785b      	ldrb	r3, [r3, #1]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d126      	bne.n	8004ff8 <HAL_PCD_EP_DB_Transmit+0x456>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fbe:	4413      	add	r3, r2
 8004fc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	011a      	lsls	r2, r3, #4
 8004fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fca:	4413      	add	r3, r2
 8004fcc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fe0:	801a      	strh	r2, [r3, #0]
 8004fe2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ff4:	801a      	strh	r2, [r3, #0]
 8004ff6:	e01a      	b.n	800502e <HAL_PCD_EP_DB_Transmit+0x48c>
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	785b      	ldrb	r3, [r3, #1]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d116      	bne.n	800502e <HAL_PCD_EP_DB_Transmit+0x48c>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	677b      	str	r3, [r7, #116]	; 0x74
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800500e:	b29b      	uxth	r3, r3
 8005010:	461a      	mov	r2, r3
 8005012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005014:	4413      	add	r3, r2
 8005016:	677b      	str	r3, [r7, #116]	; 0x74
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	011a      	lsls	r2, r3, #4
 800501e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005020:	4413      	add	r3, r2
 8005022:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005026:	673b      	str	r3, [r7, #112]	; 0x70
 8005028:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800502a:	2200      	movs	r2, #0
 800502c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	67bb      	str	r3, [r7, #120]	; 0x78
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	785b      	ldrb	r3, [r3, #1]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d12f      	bne.n	800509c <HAL_PCD_EP_DB_Transmit+0x4fa>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800504c:	b29b      	uxth	r3, r3
 800504e:	461a      	mov	r2, r3
 8005050:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005054:	4413      	add	r3, r2
 8005056:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	011a      	lsls	r2, r3, #4
 8005060:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005064:	4413      	add	r3, r2
 8005066:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800506a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800506e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	b29b      	uxth	r3, r3
 8005076:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800507a:	b29a      	uxth	r2, r3
 800507c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005080:	801a      	strh	r2, [r3, #0]
 8005082:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	b29b      	uxth	r3, r3
 800508a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800508e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005092:	b29a      	uxth	r2, r3
 8005094:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005098:	801a      	strh	r2, [r3, #0]
 800509a:	e017      	b.n	80050cc <HAL_PCD_EP_DB_Transmit+0x52a>
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	785b      	ldrb	r3, [r3, #1]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d113      	bne.n	80050cc <HAL_PCD_EP_DB_Transmit+0x52a>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050b2:	4413      	add	r3, r2
 80050b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	011a      	lsls	r2, r3, #4
 80050bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050be:	4413      	add	r3, r2
 80050c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050c8:	2200      	movs	r2, #0
 80050ca:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	4619      	mov	r1, r3
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f005 fa73 	bl	800a5be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80050d8:	88fb      	ldrh	r3, [r7, #6]
 80050da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f040 8104 	bne.w	80052ec <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	461a      	mov	r2, r3
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	461a      	mov	r2, r3
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	441a      	add	r2, r3
 8005110:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800511c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005124:	b29b      	uxth	r3, r3
 8005126:	8013      	strh	r3, [r2, #0]
 8005128:	e0e0      	b.n	80052ec <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800512a:	88fb      	ldrh	r3, [r7, #6]
 800512c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d121      	bne.n	8005178 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	461a      	mov	r2, r3
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	b29b      	uxth	r3, r3
 8005146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	441a      	add	r2, r3
 8005160:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800516c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005174:	b29b      	uxth	r3, r3
 8005176:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800517e:	2b01      	cmp	r3, #1
 8005180:	f040 80b4 	bne.w	80052ec <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	695a      	ldr	r2, [r3, #20]
 8005188:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800518c:	441a      	add	r2, r3
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	69da      	ldr	r2, [r3, #28]
 8005196:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800519a:	441a      	add	r2, r3
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	6a1a      	ldr	r2, [r3, #32]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d309      	bcc.n	80051c0 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	6a1a      	ldr	r2, [r3, #32]
 80051b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051b8:	1ad2      	subs	r2, r2, r3
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	621a      	str	r2, [r3, #32]
 80051be:	e015      	b.n	80051ec <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d107      	bne.n	80051d8 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80051c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80051cc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80051d6:	e009      	b.n	80051ec <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2200      	movs	r2, #0
 80051e2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	667b      	str	r3, [r7, #100]	; 0x64
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	785b      	ldrb	r3, [r3, #1]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d155      	bne.n	80052a6 <HAL_PCD_EP_DB_Transmit+0x704>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005208:	b29b      	uxth	r3, r3
 800520a:	461a      	mov	r2, r3
 800520c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800520e:	4413      	add	r3, r2
 8005210:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	011a      	lsls	r2, r3, #4
 8005218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800521a:	4413      	add	r3, r2
 800521c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005220:	65bb      	str	r3, [r7, #88]	; 0x58
 8005222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005224:	2b00      	cmp	r3, #0
 8005226:	d112      	bne.n	800524e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8005228:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	b29b      	uxth	r3, r3
 800522e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005232:	b29a      	uxth	r2, r3
 8005234:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005236:	801a      	strh	r2, [r3, #0]
 8005238:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	b29b      	uxth	r3, r3
 800523e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005246:	b29a      	uxth	r2, r3
 8005248:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800524a:	801a      	strh	r2, [r3, #0]
 800524c:	e044      	b.n	80052d8 <HAL_PCD_EP_DB_Transmit+0x736>
 800524e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005250:	2b3e      	cmp	r3, #62	; 0x3e
 8005252:	d811      	bhi.n	8005278 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005256:	085b      	lsrs	r3, r3, #1
 8005258:	657b      	str	r3, [r7, #84]	; 0x54
 800525a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d002      	beq.n	800526a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005266:	3301      	adds	r3, #1
 8005268:	657b      	str	r3, [r7, #84]	; 0x54
 800526a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800526c:	b29b      	uxth	r3, r3
 800526e:	029b      	lsls	r3, r3, #10
 8005270:	b29a      	uxth	r2, r3
 8005272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005274:	801a      	strh	r2, [r3, #0]
 8005276:	e02f      	b.n	80052d8 <HAL_PCD_EP_DB_Transmit+0x736>
 8005278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	657b      	str	r3, [r7, #84]	; 0x54
 800527e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005280:	f003 031f 	and.w	r3, r3, #31
 8005284:	2b00      	cmp	r3, #0
 8005286:	d102      	bne.n	800528e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8005288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800528a:	3b01      	subs	r3, #1
 800528c:	657b      	str	r3, [r7, #84]	; 0x54
 800528e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005290:	b29b      	uxth	r3, r3
 8005292:	029b      	lsls	r3, r3, #10
 8005294:	b29b      	uxth	r3, r3
 8005296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800529a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800529e:	b29a      	uxth	r2, r3
 80052a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052a2:	801a      	strh	r2, [r3, #0]
 80052a4:	e018      	b.n	80052d8 <HAL_PCD_EP_DB_Transmit+0x736>
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	785b      	ldrb	r3, [r3, #1]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d114      	bne.n	80052d8 <HAL_PCD_EP_DB_Transmit+0x736>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	461a      	mov	r2, r3
 80052ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052bc:	4413      	add	r3, r2
 80052be:	667b      	str	r3, [r7, #100]	; 0x64
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	011a      	lsls	r2, r3, #4
 80052c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052c8:	4413      	add	r3, r2
 80052ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052ce:	663b      	str	r3, [r7, #96]	; 0x60
 80052d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052d6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6818      	ldr	r0, [r3, #0]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	6959      	ldr	r1, [r3, #20]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	895a      	ldrh	r2, [r3, #10]
 80052e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	f003 fae8 	bl	80088bc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	461a      	mov	r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005306:	823b      	strh	r3, [r7, #16]
 8005308:	8a3b      	ldrh	r3, [r7, #16]
 800530a:	f083 0310 	eor.w	r3, r3, #16
 800530e:	823b      	strh	r3, [r7, #16]
 8005310:	8a3b      	ldrh	r3, [r7, #16]
 8005312:	f083 0320 	eor.w	r3, r3, #32
 8005316:	823b      	strh	r3, [r7, #16]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	441a      	add	r2, r3
 8005326:	8a3b      	ldrh	r3, [r7, #16]
 8005328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800532c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005338:	b29b      	uxth	r3, r3
 800533a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3788      	adds	r7, #136	; 0x88
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005346:	b480      	push	{r7}
 8005348:	b087      	sub	sp, #28
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	607b      	str	r3, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	817b      	strh	r3, [r7, #10]
 8005354:	4613      	mov	r3, r2
 8005356:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005358:	897b      	ldrh	r3, [r7, #10]
 800535a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00b      	beq.n	800537c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005364:	897b      	ldrh	r3, [r7, #10]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4413      	add	r3, r2
 8005378:	617b      	str	r3, [r7, #20]
 800537a:	e009      	b.n	8005390 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800537c:	897a      	ldrh	r2, [r7, #10]
 800537e:	4613      	mov	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	4413      	add	r3, r2
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4413      	add	r3, r2
 800538e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005390:	893b      	ldrh	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d107      	bne.n	80053a6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2200      	movs	r2, #0
 800539a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	b29a      	uxth	r2, r3
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	80da      	strh	r2, [r3, #6]
 80053a4:	e00b      	b.n	80053be <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2201      	movs	r2, #1
 80053aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	0c1b      	lsrs	r3, r3, #16
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	371c      	adds	r7, #28
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bc80      	pop	{r7}
 80053c8:	4770      	bx	lr
	...

080053cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e272      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 8087 	beq.w	80054fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053ec:	4b92      	ldr	r3, [pc, #584]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f003 030c 	and.w	r3, r3, #12
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d00c      	beq.n	8005412 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80053f8:	4b8f      	ldr	r3, [pc, #572]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f003 030c 	and.w	r3, r3, #12
 8005400:	2b08      	cmp	r3, #8
 8005402:	d112      	bne.n	800542a <HAL_RCC_OscConfig+0x5e>
 8005404:	4b8c      	ldr	r3, [pc, #560]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800540c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005410:	d10b      	bne.n	800542a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005412:	4b89      	ldr	r3, [pc, #548]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d06c      	beq.n	80054f8 <HAL_RCC_OscConfig+0x12c>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d168      	bne.n	80054f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e24c      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005432:	d106      	bne.n	8005442 <HAL_RCC_OscConfig+0x76>
 8005434:	4b80      	ldr	r3, [pc, #512]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a7f      	ldr	r2, [pc, #508]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 800543a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	e02e      	b.n	80054a0 <HAL_RCC_OscConfig+0xd4>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10c      	bne.n	8005464 <HAL_RCC_OscConfig+0x98>
 800544a:	4b7b      	ldr	r3, [pc, #492]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a7a      	ldr	r2, [pc, #488]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	4b78      	ldr	r3, [pc, #480]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a77      	ldr	r2, [pc, #476]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 800545c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	e01d      	b.n	80054a0 <HAL_RCC_OscConfig+0xd4>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800546c:	d10c      	bne.n	8005488 <HAL_RCC_OscConfig+0xbc>
 800546e:	4b72      	ldr	r3, [pc, #456]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a71      	ldr	r2, [pc, #452]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	4b6f      	ldr	r3, [pc, #444]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a6e      	ldr	r2, [pc, #440]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	e00b      	b.n	80054a0 <HAL_RCC_OscConfig+0xd4>
 8005488:	4b6b      	ldr	r3, [pc, #428]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a6a      	ldr	r2, [pc, #424]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 800548e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	4b68      	ldr	r3, [pc, #416]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a67      	ldr	r2, [pc, #412]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 800549a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800549e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d013      	beq.n	80054d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a8:	f7fc fe64 	bl	8002174 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b0:	f7fc fe60 	bl	8002174 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	; 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e200      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c2:	4b5d      	ldr	r3, [pc, #372]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCC_OscConfig+0xe4>
 80054ce:	e014      	b.n	80054fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d0:	f7fc fe50 	bl	8002174 <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054d8:	f7fc fe4c 	bl	8002174 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b64      	cmp	r3, #100	; 0x64
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e1ec      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ea:	4b53      	ldr	r3, [pc, #332]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1f0      	bne.n	80054d8 <HAL_RCC_OscConfig+0x10c>
 80054f6:	e000      	b.n	80054fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d063      	beq.n	80055ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005506:	4b4c      	ldr	r3, [pc, #304]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f003 030c 	and.w	r3, r3, #12
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00b      	beq.n	800552a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005512:	4b49      	ldr	r3, [pc, #292]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f003 030c 	and.w	r3, r3, #12
 800551a:	2b08      	cmp	r3, #8
 800551c:	d11c      	bne.n	8005558 <HAL_RCC_OscConfig+0x18c>
 800551e:	4b46      	ldr	r3, [pc, #280]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d116      	bne.n	8005558 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800552a:	4b43      	ldr	r3, [pc, #268]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <HAL_RCC_OscConfig+0x176>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d001      	beq.n	8005542 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e1c0      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005542:	4b3d      	ldr	r3, [pc, #244]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	4939      	ldr	r1, [pc, #228]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005552:	4313      	orrs	r3, r2
 8005554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005556:	e03a      	b.n	80055ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d020      	beq.n	80055a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005560:	4b36      	ldr	r3, [pc, #216]	; (800563c <HAL_RCC_OscConfig+0x270>)
 8005562:	2201      	movs	r2, #1
 8005564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005566:	f7fc fe05 	bl	8002174 <HAL_GetTick>
 800556a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800556c:	e008      	b.n	8005580 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800556e:	f7fc fe01 	bl	8002174 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d901      	bls.n	8005580 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e1a1      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005580:	4b2d      	ldr	r3, [pc, #180]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0f0      	beq.n	800556e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558c:	4b2a      	ldr	r3, [pc, #168]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	4927      	ldr	r1, [pc, #156]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 800559c:	4313      	orrs	r3, r2
 800559e:	600b      	str	r3, [r1, #0]
 80055a0:	e015      	b.n	80055ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055a2:	4b26      	ldr	r3, [pc, #152]	; (800563c <HAL_RCC_OscConfig+0x270>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a8:	f7fc fde4 	bl	8002174 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055b0:	f7fc fde0 	bl	8002174 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e180      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055c2:	4b1d      	ldr	r3, [pc, #116]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d03a      	beq.n	8005650 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d019      	beq.n	8005616 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055e2:	4b17      	ldr	r3, [pc, #92]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055e8:	f7fc fdc4 	bl	8002174 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055f0:	f7fc fdc0 	bl	8002174 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e160      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005602:	4b0d      	ldr	r3, [pc, #52]	; (8005638 <HAL_RCC_OscConfig+0x26c>)
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f0      	beq.n	80055f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800560e:	2001      	movs	r0, #1
 8005610:	f000 fac4 	bl	8005b9c <RCC_Delay>
 8005614:	e01c      	b.n	8005650 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005616:	4b0a      	ldr	r3, [pc, #40]	; (8005640 <HAL_RCC_OscConfig+0x274>)
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800561c:	f7fc fdaa 	bl	8002174 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005622:	e00f      	b.n	8005644 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005624:	f7fc fda6 	bl	8002174 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d908      	bls.n	8005644 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e146      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
 8005636:	bf00      	nop
 8005638:	40021000 	.word	0x40021000
 800563c:	42420000 	.word	0x42420000
 8005640:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005644:	4b92      	ldr	r3, [pc, #584]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e9      	bne.n	8005624 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 80a6 	beq.w	80057aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800565e:	2300      	movs	r3, #0
 8005660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005662:	4b8b      	ldr	r3, [pc, #556]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10d      	bne.n	800568a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800566e:	4b88      	ldr	r3, [pc, #544]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	4a87      	ldr	r2, [pc, #540]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005678:	61d3      	str	r3, [r2, #28]
 800567a:	4b85      	ldr	r3, [pc, #532]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005682:	60bb      	str	r3, [r7, #8]
 8005684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005686:	2301      	movs	r3, #1
 8005688:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800568a:	4b82      	ldr	r3, [pc, #520]	; (8005894 <HAL_RCC_OscConfig+0x4c8>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005692:	2b00      	cmp	r3, #0
 8005694:	d118      	bne.n	80056c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005696:	4b7f      	ldr	r3, [pc, #508]	; (8005894 <HAL_RCC_OscConfig+0x4c8>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a7e      	ldr	r2, [pc, #504]	; (8005894 <HAL_RCC_OscConfig+0x4c8>)
 800569c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056a2:	f7fc fd67 	bl	8002174 <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a8:	e008      	b.n	80056bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056aa:	f7fc fd63 	bl	8002174 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b64      	cmp	r3, #100	; 0x64
 80056b6:	d901      	bls.n	80056bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e103      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056bc:	4b75      	ldr	r3, [pc, #468]	; (8005894 <HAL_RCC_OscConfig+0x4c8>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0f0      	beq.n	80056aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d106      	bne.n	80056de <HAL_RCC_OscConfig+0x312>
 80056d0:	4b6f      	ldr	r3, [pc, #444]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	4a6e      	ldr	r2, [pc, #440]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 80056d6:	f043 0301 	orr.w	r3, r3, #1
 80056da:	6213      	str	r3, [r2, #32]
 80056dc:	e02d      	b.n	800573a <HAL_RCC_OscConfig+0x36e>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10c      	bne.n	8005700 <HAL_RCC_OscConfig+0x334>
 80056e6:	4b6a      	ldr	r3, [pc, #424]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	4a69      	ldr	r2, [pc, #420]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 80056ec:	f023 0301 	bic.w	r3, r3, #1
 80056f0:	6213      	str	r3, [r2, #32]
 80056f2:	4b67      	ldr	r3, [pc, #412]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	4a66      	ldr	r2, [pc, #408]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 80056f8:	f023 0304 	bic.w	r3, r3, #4
 80056fc:	6213      	str	r3, [r2, #32]
 80056fe:	e01c      	b.n	800573a <HAL_RCC_OscConfig+0x36e>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	2b05      	cmp	r3, #5
 8005706:	d10c      	bne.n	8005722 <HAL_RCC_OscConfig+0x356>
 8005708:	4b61      	ldr	r3, [pc, #388]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	4a60      	ldr	r2, [pc, #384]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 800570e:	f043 0304 	orr.w	r3, r3, #4
 8005712:	6213      	str	r3, [r2, #32]
 8005714:	4b5e      	ldr	r3, [pc, #376]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	4a5d      	ldr	r2, [pc, #372]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 800571a:	f043 0301 	orr.w	r3, r3, #1
 800571e:	6213      	str	r3, [r2, #32]
 8005720:	e00b      	b.n	800573a <HAL_RCC_OscConfig+0x36e>
 8005722:	4b5b      	ldr	r3, [pc, #364]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	4a5a      	ldr	r2, [pc, #360]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005728:	f023 0301 	bic.w	r3, r3, #1
 800572c:	6213      	str	r3, [r2, #32]
 800572e:	4b58      	ldr	r3, [pc, #352]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	4a57      	ldr	r2, [pc, #348]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005734:	f023 0304 	bic.w	r3, r3, #4
 8005738:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d015      	beq.n	800576e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005742:	f7fc fd17 	bl	8002174 <HAL_GetTick>
 8005746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005748:	e00a      	b.n	8005760 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800574a:	f7fc fd13 	bl	8002174 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	f241 3288 	movw	r2, #5000	; 0x1388
 8005758:	4293      	cmp	r3, r2
 800575a:	d901      	bls.n	8005760 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e0b1      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005760:	4b4b      	ldr	r3, [pc, #300]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0ee      	beq.n	800574a <HAL_RCC_OscConfig+0x37e>
 800576c:	e014      	b.n	8005798 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800576e:	f7fc fd01 	bl	8002174 <HAL_GetTick>
 8005772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005774:	e00a      	b.n	800578c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005776:	f7fc fcfd 	bl	8002174 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	f241 3288 	movw	r2, #5000	; 0x1388
 8005784:	4293      	cmp	r3, r2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e09b      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800578c:	4b40      	ldr	r3, [pc, #256]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1ee      	bne.n	8005776 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005798:	7dfb      	ldrb	r3, [r7, #23]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d105      	bne.n	80057aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800579e:	4b3c      	ldr	r3, [pc, #240]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	4a3b      	ldr	r2, [pc, #236]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 80057a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 8087 	beq.w	80058c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057b4:	4b36      	ldr	r3, [pc, #216]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f003 030c 	and.w	r3, r3, #12
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d061      	beq.n	8005884 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d146      	bne.n	8005856 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c8:	4b33      	ldr	r3, [pc, #204]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ce:	f7fc fcd1 	bl	8002174 <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057d4:	e008      	b.n	80057e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d6:	f7fc fccd 	bl	8002174 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e06d      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057e8:	4b29      	ldr	r3, [pc, #164]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1f0      	bne.n	80057d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057fc:	d108      	bne.n	8005810 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80057fe:	4b24      	ldr	r3, [pc, #144]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	4921      	ldr	r1, [pc, #132]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 800580c:	4313      	orrs	r3, r2
 800580e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005810:	4b1f      	ldr	r3, [pc, #124]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a19      	ldr	r1, [r3, #32]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	430b      	orrs	r3, r1
 8005822:	491b      	ldr	r1, [pc, #108]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005824:	4313      	orrs	r3, r2
 8005826:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005828:	4b1b      	ldr	r3, [pc, #108]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 800582a:	2201      	movs	r2, #1
 800582c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582e:	f7fc fca1 	bl	8002174 <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005834:	e008      	b.n	8005848 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005836:	f7fc fc9d 	bl	8002174 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e03d      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005848:	4b11      	ldr	r3, [pc, #68]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0f0      	beq.n	8005836 <HAL_RCC_OscConfig+0x46a>
 8005854:	e035      	b.n	80058c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005856:	4b10      	ldr	r3, [pc, #64]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800585c:	f7fc fc8a 	bl	8002174 <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005864:	f7fc fc86 	bl	8002174 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e026      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005876:	4b06      	ldr	r3, [pc, #24]	; (8005890 <HAL_RCC_OscConfig+0x4c4>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1f0      	bne.n	8005864 <HAL_RCC_OscConfig+0x498>
 8005882:	e01e      	b.n	80058c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d107      	bne.n	800589c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e019      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
 8005890:	40021000 	.word	0x40021000
 8005894:	40007000 	.word	0x40007000
 8005898:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800589c:	4b0b      	ldr	r3, [pc, #44]	; (80058cc <HAL_RCC_OscConfig+0x500>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d106      	bne.n	80058be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d001      	beq.n	80058c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e000      	b.n	80058c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40021000 	.word	0x40021000

080058d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e0d0      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058e4:	4b6a      	ldr	r3, [pc, #424]	; (8005a90 <HAL_RCC_ClockConfig+0x1c0>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d910      	bls.n	8005914 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058f2:	4b67      	ldr	r3, [pc, #412]	; (8005a90 <HAL_RCC_ClockConfig+0x1c0>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f023 0207 	bic.w	r2, r3, #7
 80058fa:	4965      	ldr	r1, [pc, #404]	; (8005a90 <HAL_RCC_ClockConfig+0x1c0>)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	4313      	orrs	r3, r2
 8005900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005902:	4b63      	ldr	r3, [pc, #396]	; (8005a90 <HAL_RCC_ClockConfig+0x1c0>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0307 	and.w	r3, r3, #7
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	429a      	cmp	r2, r3
 800590e:	d001      	beq.n	8005914 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e0b8      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d020      	beq.n	8005962 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800592c:	4b59      	ldr	r3, [pc, #356]	; (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	4a58      	ldr	r2, [pc, #352]	; (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005932:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005936:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b00      	cmp	r3, #0
 8005942:	d005      	beq.n	8005950 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005944:	4b53      	ldr	r3, [pc, #332]	; (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	4a52      	ldr	r2, [pc, #328]	; (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 800594a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800594e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005950:	4b50      	ldr	r3, [pc, #320]	; (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	494d      	ldr	r1, [pc, #308]	; (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 800595e:	4313      	orrs	r3, r2
 8005960:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d040      	beq.n	80059f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d107      	bne.n	8005986 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005976:	4b47      	ldr	r3, [pc, #284]	; (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d115      	bne.n	80059ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e07f      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b02      	cmp	r3, #2
 800598c:	d107      	bne.n	800599e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800598e:	4b41      	ldr	r3, [pc, #260]	; (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d109      	bne.n	80059ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e073      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800599e:	4b3d      	ldr	r3, [pc, #244]	; (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e06b      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ae:	4b39      	ldr	r3, [pc, #228]	; (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f023 0203 	bic.w	r2, r3, #3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	4936      	ldr	r1, [pc, #216]	; (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059c0:	f7fc fbd8 	bl	8002174 <HAL_GetTick>
 80059c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c6:	e00a      	b.n	80059de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059c8:	f7fc fbd4 	bl	8002174 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e053      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059de:	4b2d      	ldr	r3, [pc, #180]	; (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f003 020c 	and.w	r2, r3, #12
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d1eb      	bne.n	80059c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059f0:	4b27      	ldr	r3, [pc, #156]	; (8005a90 <HAL_RCC_ClockConfig+0x1c0>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0307 	and.w	r3, r3, #7
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d210      	bcs.n	8005a20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fe:	4b24      	ldr	r3, [pc, #144]	; (8005a90 <HAL_RCC_ClockConfig+0x1c0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f023 0207 	bic.w	r2, r3, #7
 8005a06:	4922      	ldr	r1, [pc, #136]	; (8005a90 <HAL_RCC_ClockConfig+0x1c0>)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0e:	4b20      	ldr	r3, [pc, #128]	; (8005a90 <HAL_RCC_ClockConfig+0x1c0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d001      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e032      	b.n	8005a86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d008      	beq.n	8005a3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a2c:	4b19      	ldr	r3, [pc, #100]	; (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	4916      	ldr	r1, [pc, #88]	; (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d009      	beq.n	8005a5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a4a:	4b12      	ldr	r3, [pc, #72]	; (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	490e      	ldr	r1, [pc, #56]	; (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a5e:	f000 f821 	bl	8005aa4 <HAL_RCC_GetSysClockFreq>
 8005a62:	4602      	mov	r2, r0
 8005a64:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <HAL_RCC_ClockConfig+0x1c4>)
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	091b      	lsrs	r3, r3, #4
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	490a      	ldr	r1, [pc, #40]	; (8005a98 <HAL_RCC_ClockConfig+0x1c8>)
 8005a70:	5ccb      	ldrb	r3, [r1, r3]
 8005a72:	fa22 f303 	lsr.w	r3, r2, r3
 8005a76:	4a09      	ldr	r2, [pc, #36]	; (8005a9c <HAL_RCC_ClockConfig+0x1cc>)
 8005a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a7a:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <HAL_RCC_ClockConfig+0x1d0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fc fb36 	bl	80020f0 <HAL_InitTick>

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	40022000 	.word	0x40022000
 8005a94:	40021000 	.word	0x40021000
 8005a98:	0800ac38 	.word	0x0800ac38
 8005a9c:	20000080 	.word	0x20000080
 8005aa0:	20000084 	.word	0x20000084

08005aa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aa4:	b490      	push	{r4, r7}
 8005aa6:	b08a      	sub	sp, #40	; 0x28
 8005aa8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005aaa:	4b29      	ldr	r3, [pc, #164]	; (8005b50 <HAL_RCC_GetSysClockFreq+0xac>)
 8005aac:	1d3c      	adds	r4, r7, #4
 8005aae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005ab0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005ab4:	f240 2301 	movw	r3, #513	; 0x201
 8005ab8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	61fb      	str	r3, [r7, #28]
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61bb      	str	r3, [r7, #24]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005ace:	4b21      	ldr	r3, [pc, #132]	; (8005b54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	f003 030c 	and.w	r3, r3, #12
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d002      	beq.n	8005ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8005ade:	2b08      	cmp	r3, #8
 8005ae0:	d003      	beq.n	8005aea <HAL_RCC_GetSysClockFreq+0x46>
 8005ae2:	e02b      	b.n	8005b3c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ae4:	4b1c      	ldr	r3, [pc, #112]	; (8005b58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005ae6:	623b      	str	r3, [r7, #32]
      break;
 8005ae8:	e02b      	b.n	8005b42 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	0c9b      	lsrs	r3, r3, #18
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	3328      	adds	r3, #40	; 0x28
 8005af4:	443b      	add	r3, r7
 8005af6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005afa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d012      	beq.n	8005b2c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b06:	4b13      	ldr	r3, [pc, #76]	; (8005b54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	0c5b      	lsrs	r3, r3, #17
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	3328      	adds	r3, #40	; 0x28
 8005b12:	443b      	add	r3, r7
 8005b14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005b18:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	4a0e      	ldr	r2, [pc, #56]	; (8005b58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005b1e:	fb03 f202 	mul.w	r2, r3, r2
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
 8005b2a:	e004      	b.n	8005b36 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	4a0b      	ldr	r2, [pc, #44]	; (8005b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b30:	fb02 f303 	mul.w	r3, r2, r3
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	623b      	str	r3, [r7, #32]
      break;
 8005b3a:	e002      	b.n	8005b42 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b3c:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005b3e:	623b      	str	r3, [r7, #32]
      break;
 8005b40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b42:	6a3b      	ldr	r3, [r7, #32]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3728      	adds	r7, #40	; 0x28
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bc90      	pop	{r4, r7}
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	0800abe0 	.word	0x0800abe0
 8005b54:	40021000 	.word	0x40021000
 8005b58:	007a1200 	.word	0x007a1200
 8005b5c:	003d0900 	.word	0x003d0900

08005b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b64:	4b02      	ldr	r3, [pc, #8]	; (8005b70 <HAL_RCC_GetHCLKFreq+0x10>)
 8005b66:	681b      	ldr	r3, [r3, #0]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr
 8005b70:	20000080 	.word	0x20000080

08005b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b78:	f7ff fff2 	bl	8005b60 <HAL_RCC_GetHCLKFreq>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	0a1b      	lsrs	r3, r3, #8
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	4903      	ldr	r1, [pc, #12]	; (8005b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b8a:	5ccb      	ldrb	r3, [r1, r3]
 8005b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40021000 	.word	0x40021000
 8005b98:	0800ac48 	.word	0x0800ac48

08005b9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005ba4:	4b0a      	ldr	r3, [pc, #40]	; (8005bd0 <RCC_Delay+0x34>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a0a      	ldr	r2, [pc, #40]	; (8005bd4 <RCC_Delay+0x38>)
 8005baa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bae:	0a5b      	lsrs	r3, r3, #9
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	fb02 f303 	mul.w	r3, r2, r3
 8005bb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005bb8:	bf00      	nop
  }
  while (Delay --);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	1e5a      	subs	r2, r3, #1
 8005bbe:	60fa      	str	r2, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1f9      	bne.n	8005bb8 <RCC_Delay+0x1c>
}
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop
 8005bc8:	3714      	adds	r7, #20
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr
 8005bd0:	20000080 	.word	0x20000080
 8005bd4:	10624dd3 	.word	0x10624dd3

08005bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	613b      	str	r3, [r7, #16]
 8005be4:	2300      	movs	r3, #0
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d07d      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bf8:	4b4f      	ldr	r3, [pc, #316]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10d      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c04:	4b4c      	ldr	r3, [pc, #304]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	4a4b      	ldr	r2, [pc, #300]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c0e:	61d3      	str	r3, [r2, #28]
 8005c10:	4b49      	ldr	r3, [pc, #292]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c18:	60bb      	str	r3, [r7, #8]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c20:	4b46      	ldr	r3, [pc, #280]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d118      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c2c:	4b43      	ldr	r3, [pc, #268]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a42      	ldr	r2, [pc, #264]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c38:	f7fc fa9c 	bl	8002174 <HAL_GetTick>
 8005c3c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c3e:	e008      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c40:	f7fc fa98 	bl	8002174 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b64      	cmp	r3, #100	; 0x64
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e06d      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c52:	4b3a      	ldr	r3, [pc, #232]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0f0      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c5e:	4b36      	ldr	r3, [pc, #216]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c66:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d02e      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d027      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c7c:	4b2e      	ldr	r3, [pc, #184]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c84:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c86:	4b2e      	ldr	r3, [pc, #184]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c88:	2201      	movs	r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c8c:	4b2c      	ldr	r3, [pc, #176]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c92:	4a29      	ldr	r2, [pc, #164]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d014      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca2:	f7fc fa67 	bl	8002174 <HAL_GetTick>
 8005ca6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ca8:	e00a      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005caa:	f7fc fa63 	bl	8002174 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e036      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cc0:	4b1d      	ldr	r3, [pc, #116]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0ee      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ccc:	4b1a      	ldr	r3, [pc, #104]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	4917      	ldr	r1, [pc, #92]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d105      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ce4:	4b14      	ldr	r3, [pc, #80]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	4a13      	ldr	r2, [pc, #76]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d008      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005cfc:	4b0e      	ldr	r3, [pc, #56]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	490b      	ldr	r1, [pc, #44]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0310 	and.w	r3, r3, #16
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d008      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d1a:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	4904      	ldr	r1, [pc, #16]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	40007000 	.word	0x40007000
 8005d40:	42420440 	.word	0x42420440

08005d44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e076      	b.n	8005e44 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d108      	bne.n	8005d70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d66:	d009      	beq.n	8005d7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	61da      	str	r2, [r3, #28]
 8005d6e:	e005      	b.n	8005d7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d106      	bne.n	8005d9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7fc f8ea 	bl	8001f70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005db2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	431a      	orrs	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dec:	431a      	orrs	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e00:	ea42 0103 	orr.w	r1, r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	0c1a      	lsrs	r2, r3, #16
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f002 0204 	and.w	r2, r2, #4
 8005e22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	69da      	ldr	r2, [r3, #28]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3708      	adds	r7, #8
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	f107 0014 	add.w	r0, r7, #20
 8005e5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bc80      	pop	{r7}
 8005e68:	b004      	add	sp, #16
 8005e6a:	4770      	bx	lr

08005e6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e7c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005e80:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr

08005e98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ea0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005ea4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bc80      	pop	{r7}
 8005eca:	4770      	bx	lr

08005ecc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bc80      	pop	{r7}
 8005ee2:	4770      	bx	lr

08005ee4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
 8005eee:	f107 0014 	add.w	r0, r7, #20
 8005ef2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bc80      	pop	{r7}
 8005f20:	b004      	add	sp, #16
 8005f22:	4770      	bx	lr

08005f24 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b09b      	sub	sp, #108	; 0x6c
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	78db      	ldrb	r3, [r3, #3]
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	d81f      	bhi.n	8005f96 <USB_ActivateEndpoint+0x72>
 8005f56:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <USB_ActivateEndpoint+0x38>)
 8005f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5c:	08005f6d 	.word	0x08005f6d
 8005f60:	08005f89 	.word	0x08005f89
 8005f64:	08005f9f 	.word	0x08005f9f
 8005f68:	08005f7b 	.word	0x08005f7b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005f6c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005f70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f74:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005f78:	e012      	b.n	8005fa0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005f7a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005f7e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005f82:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005f86:	e00b      	b.n	8005fa0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005f88:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005f8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f90:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005f94:	e004      	b.n	8005fa0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005f9c:	e000      	b.n	8005fa0 <USB_ActivateEndpoint+0x7c>
      break;
 8005f9e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	441a      	add	r2, r3
 8005faa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	441a      	add	r2, r3
 8005ff0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006004:	b29b      	uxth	r3, r3
 8006006:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	7b1b      	ldrb	r3, [r3, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	f040 8149 	bne.w	80062a4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	785b      	ldrb	r3, [r3, #1]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 8084 	beq.w	8006124 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006026:	b29b      	uxth	r3, r3
 8006028:	461a      	mov	r2, r3
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	4413      	add	r3, r2
 800602e:	617b      	str	r3, [r7, #20]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	011a      	lsls	r2, r3, #4
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800603e:	613b      	str	r3, [r7, #16]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	88db      	ldrh	r3, [r3, #6]
 8006044:	085b      	lsrs	r3, r3, #1
 8006046:	b29b      	uxth	r3, r3
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	b29a      	uxth	r2, r3
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	81fb      	strh	r3, [r7, #14]
 800605e:	89fb      	ldrh	r3, [r7, #14]
 8006060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006064:	2b00      	cmp	r3, #0
 8006066:	d01b      	beq.n	80060a0 <USB_ActivateEndpoint+0x17c>
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	4413      	add	r3, r2
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	b29b      	uxth	r3, r3
 8006076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800607a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607e:	81bb      	strh	r3, [r7, #12]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	441a      	add	r2, r3
 800608a:	89bb      	ldrh	r3, [r7, #12]
 800608c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006098:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800609c:	b29b      	uxth	r3, r3
 800609e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	78db      	ldrb	r3, [r3, #3]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d020      	beq.n	80060ea <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060be:	813b      	strh	r3, [r7, #8]
 80060c0:	893b      	ldrh	r3, [r7, #8]
 80060c2:	f083 0320 	eor.w	r3, r3, #32
 80060c6:	813b      	strh	r3, [r7, #8]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	441a      	add	r2, r3
 80060d2:	893b      	ldrh	r3, [r7, #8]
 80060d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	8013      	strh	r3, [r2, #0]
 80060e8:	e27f      	b.n	80065ea <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	881b      	ldrh	r3, [r3, #0]
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006100:	817b      	strh	r3, [r7, #10]
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	441a      	add	r2, r3
 800610c:	897b      	ldrh	r3, [r7, #10]
 800610e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800611e:	b29b      	uxth	r3, r3
 8006120:	8013      	strh	r3, [r2, #0]
 8006122:	e262      	b.n	80065ea <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800612e:	b29b      	uxth	r3, r3
 8006130:	461a      	mov	r2, r3
 8006132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006134:	4413      	add	r3, r2
 8006136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	011a      	lsls	r2, r3, #4
 800613e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006140:	4413      	add	r3, r2
 8006142:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006146:	62bb      	str	r3, [r7, #40]	; 0x28
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	88db      	ldrh	r3, [r3, #6]
 800614c:	085b      	lsrs	r3, r3, #1
 800614e:	b29b      	uxth	r3, r3
 8006150:	005b      	lsls	r3, r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	627b      	str	r3, [r7, #36]	; 0x24
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006162:	b29b      	uxth	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	4413      	add	r3, r2
 800616a:	627b      	str	r3, [r7, #36]	; 0x24
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	011a      	lsls	r2, r3, #4
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	4413      	add	r3, r2
 8006176:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800617a:	623b      	str	r3, [r7, #32]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d112      	bne.n	80061aa <USB_ActivateEndpoint+0x286>
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	b29b      	uxth	r3, r3
 800618a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800618e:	b29a      	uxth	r2, r3
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	801a      	strh	r2, [r3, #0]
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	b29b      	uxth	r3, r3
 800619a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800619e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	801a      	strh	r2, [r3, #0]
 80061a8:	e02f      	b.n	800620a <USB_ActivateEndpoint+0x2e6>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	2b3e      	cmp	r3, #62	; 0x3e
 80061b0:	d813      	bhi.n	80061da <USB_ActivateEndpoint+0x2b6>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	085b      	lsrs	r3, r3, #1
 80061b8:	663b      	str	r3, [r7, #96]	; 0x60
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <USB_ActivateEndpoint+0x2a8>
 80061c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061c8:	3301      	adds	r3, #1
 80061ca:	663b      	str	r3, [r7, #96]	; 0x60
 80061cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	029b      	lsls	r3, r3, #10
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	801a      	strh	r2, [r3, #0]
 80061d8:	e017      	b.n	800620a <USB_ActivateEndpoint+0x2e6>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	663b      	str	r3, [r7, #96]	; 0x60
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	f003 031f 	and.w	r3, r3, #31
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d102      	bne.n	80061f4 <USB_ActivateEndpoint+0x2d0>
 80061ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061f0:	3b01      	subs	r3, #1
 80061f2:	663b      	str	r3, [r7, #96]	; 0x60
 80061f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	029b      	lsls	r3, r3, #10
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006204:	b29a      	uxth	r2, r3
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	83fb      	strh	r3, [r7, #30]
 8006218:	8bfb      	ldrh	r3, [r7, #30]
 800621a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d01b      	beq.n	800625a <USB_ActivateEndpoint+0x336>
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	b29b      	uxth	r3, r3
 8006230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006238:	83bb      	strh	r3, [r7, #28]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	441a      	add	r2, r3
 8006244:	8bbb      	ldrh	r3, [r7, #28]
 8006246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800624a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800624e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006256:	b29b      	uxth	r3, r3
 8006258:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	b29b      	uxth	r3, r3
 8006268:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800626c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006270:	837b      	strh	r3, [r7, #26]
 8006272:	8b7b      	ldrh	r3, [r7, #26]
 8006274:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006278:	837b      	strh	r3, [r7, #26]
 800627a:	8b7b      	ldrh	r3, [r7, #26]
 800627c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006280:	837b      	strh	r3, [r7, #26]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	441a      	add	r2, r3
 800628c:	8b7b      	ldrh	r3, [r7, #26]
 800628e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800629a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800629e:	b29b      	uxth	r3, r3
 80062a0:	8013      	strh	r3, [r2, #0]
 80062a2:	e1a2      	b.n	80065ea <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ba:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	441a      	add	r2, r3
 80062c8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80062cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80062d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062dc:	b29b      	uxth	r3, r3
 80062de:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	461a      	mov	r2, r3
 80062ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062f0:	4413      	add	r3, r2
 80062f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	011a      	lsls	r2, r3, #4
 80062fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006302:	657b      	str	r3, [r7, #84]	; 0x54
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	891b      	ldrh	r3, [r3, #8]
 8006308:	085b      	lsrs	r3, r3, #1
 800630a:	b29b      	uxth	r3, r3
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	b29a      	uxth	r2, r3
 8006310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006312:	801a      	strh	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	653b      	str	r3, [r7, #80]	; 0x50
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800631e:	b29b      	uxth	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006324:	4413      	add	r3, r2
 8006326:	653b      	str	r3, [r7, #80]	; 0x50
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	011a      	lsls	r2, r3, #4
 800632e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006330:	4413      	add	r3, r2
 8006332:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	895b      	ldrh	r3, [r3, #10]
 800633c:	085b      	lsrs	r3, r3, #1
 800633e:	b29b      	uxth	r3, r3
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006346:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	785b      	ldrb	r3, [r3, #1]
 800634c:	2b00      	cmp	r3, #0
 800634e:	f040 8091 	bne.w	8006474 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006360:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d01b      	beq.n	80063a2 <USB_ActivateEndpoint+0x47e>
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	b29b      	uxth	r3, r3
 8006378:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006380:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	441a      	add	r2, r3
 800638c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800638e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006396:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800639a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800639e:	b29b      	uxth	r3, r3
 80063a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	873b      	strh	r3, [r7, #56]	; 0x38
 80063b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80063b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d01b      	beq.n	80063f2 <USB_ActivateEndpoint+0x4ce>
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	441a      	add	r2, r3
 80063dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80063de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006408:	86bb      	strh	r3, [r7, #52]	; 0x34
 800640a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800640c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006410:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006412:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006414:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006418:	86bb      	strh	r3, [r7, #52]	; 0x34
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	441a      	add	r2, r3
 8006424:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800642a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800642e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006436:	b29b      	uxth	r3, r3
 8006438:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	b29b      	uxth	r3, r3
 8006448:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800644c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006450:	867b      	strh	r3, [r7, #50]	; 0x32
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	441a      	add	r2, r3
 800645c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800645e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006462:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800646a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800646e:	b29b      	uxth	r3, r3
 8006470:	8013      	strh	r3, [r2, #0]
 8006472:	e0ba      	b.n	80065ea <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	881b      	ldrh	r3, [r3, #0]
 8006480:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006484:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d01d      	beq.n	80064cc <USB_ActivateEndpoint+0x5a8>
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	b29b      	uxth	r3, r3
 800649e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	441a      	add	r2, r3
 80064b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80064b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80064dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80064e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d01d      	beq.n	8006524 <USB_ActivateEndpoint+0x600>
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	441a      	add	r2, r3
 800650c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800651c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006520:	b29b      	uxth	r3, r3
 8006522:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	78db      	ldrb	r3, [r3, #3]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d024      	beq.n	8006576 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	b29b      	uxth	r3, r3
 800653a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800653e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006542:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006546:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800654a:	f083 0320 	eor.w	r3, r3, #32
 800654e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	441a      	add	r2, r3
 800655c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800656c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006570:	b29b      	uxth	r3, r3
 8006572:	8013      	strh	r3, [r2, #0]
 8006574:	e01d      	b.n	80065b2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29b      	uxth	r3, r3
 8006584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800658c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	441a      	add	r2, r3
 800659a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800659e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	441a      	add	r2, r3
 80065d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80065d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80065ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	376c      	adds	r7, #108	; 0x6c
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bc80      	pop	{r7}
 80065f6:	4770      	bx	lr

080065f8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b08d      	sub	sp, #52	; 0x34
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	7b1b      	ldrb	r3, [r3, #12]
 8006606:	2b00      	cmp	r3, #0
 8006608:	f040 808e 	bne.w	8006728 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	785b      	ldrb	r3, [r3, #1]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d044      	beq.n	800669e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	81bb      	strh	r3, [r7, #12]
 8006622:	89bb      	ldrh	r3, [r7, #12]
 8006624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01b      	beq.n	8006664 <USB_DeactivateEndpoint+0x6c>
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	b29b      	uxth	r3, r3
 800663a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800663e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006642:	817b      	strh	r3, [r7, #10]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	441a      	add	r2, r3
 800664e:	897b      	ldrh	r3, [r7, #10]
 8006650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800665c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006660:	b29b      	uxth	r3, r3
 8006662:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	881b      	ldrh	r3, [r3, #0]
 8006670:	b29b      	uxth	r3, r3
 8006672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800667a:	813b      	strh	r3, [r7, #8]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	441a      	add	r2, r3
 8006686:	893b      	ldrh	r3, [r7, #8]
 8006688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800668c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006698:	b29b      	uxth	r3, r3
 800669a:	8013      	strh	r3, [r2, #0]
 800669c:	e192      	b.n	80069c4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	827b      	strh	r3, [r7, #18]
 80066ac:	8a7b      	ldrh	r3, [r7, #18]
 80066ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d01b      	beq.n	80066ee <USB_DeactivateEndpoint+0xf6>
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066cc:	823b      	strh	r3, [r7, #16]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	441a      	add	r2, r3
 80066d8:	8a3b      	ldrh	r3, [r7, #16]
 80066da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	881b      	ldrh	r3, [r3, #0]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006704:	81fb      	strh	r3, [r7, #14]
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	441a      	add	r2, r3
 8006710:	89fb      	ldrh	r3, [r7, #14]
 8006712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800671a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800671e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006722:	b29b      	uxth	r3, r3
 8006724:	8013      	strh	r3, [r2, #0]
 8006726:	e14d      	b.n	80069c4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	785b      	ldrb	r3, [r3, #1]
 800672c:	2b00      	cmp	r3, #0
 800672e:	f040 80a5 	bne.w	800687c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	843b      	strh	r3, [r7, #32]
 8006740:	8c3b      	ldrh	r3, [r7, #32]
 8006742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d01b      	beq.n	8006782 <USB_DeactivateEndpoint+0x18a>
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	b29b      	uxth	r3, r3
 8006758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800675c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006760:	83fb      	strh	r3, [r7, #30]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	441a      	add	r2, r3
 800676c:	8bfb      	ldrh	r3, [r7, #30]
 800676e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006772:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006776:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800677a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800677e:	b29b      	uxth	r3, r3
 8006780:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	83bb      	strh	r3, [r7, #28]
 8006790:	8bbb      	ldrh	r3, [r7, #28]
 8006792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006796:	2b00      	cmp	r3, #0
 8006798:	d01b      	beq.n	80067d2 <USB_DeactivateEndpoint+0x1da>
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4413      	add	r3, r2
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b0:	837b      	strh	r3, [r7, #26]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	441a      	add	r2, r3
 80067bc:	8b7b      	ldrh	r3, [r7, #26]
 80067be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	881b      	ldrh	r3, [r3, #0]
 80067de:	b29b      	uxth	r3, r3
 80067e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e8:	833b      	strh	r3, [r7, #24]
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	441a      	add	r2, r3
 80067f4:	8b3b      	ldrh	r3, [r7, #24]
 80067f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006802:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006806:	b29b      	uxth	r3, r3
 8006808:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	b29b      	uxth	r3, r3
 8006818:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800681c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006820:	82fb      	strh	r3, [r7, #22]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	441a      	add	r2, r3
 800682c:	8afb      	ldrh	r3, [r7, #22]
 800682e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800683a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800683e:	b29b      	uxth	r3, r3
 8006840:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	881b      	ldrh	r3, [r3, #0]
 800684e:	b29b      	uxth	r3, r3
 8006850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006854:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006858:	82bb      	strh	r3, [r7, #20]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	441a      	add	r2, r3
 8006864:	8abb      	ldrh	r3, [r7, #20]
 8006866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800686a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800686e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006876:	b29b      	uxth	r3, r3
 8006878:	8013      	strh	r3, [r2, #0]
 800687a:	e0a3      	b.n	80069c4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800688a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800688c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d01b      	beq.n	80068cc <USB_DeactivateEndpoint+0x2d4>
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	441a      	add	r2, r3
 80068b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80068b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80068da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80068dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d01b      	beq.n	800691c <USB_DeactivateEndpoint+0x324>
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fa:	853b      	strh	r3, [r7, #40]	; 0x28
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	441a      	add	r2, r3
 8006906:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006908:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800690c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006914:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006918:	b29b      	uxth	r3, r3
 800691a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	b29b      	uxth	r3, r3
 800692a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800692e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006932:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	441a      	add	r2, r3
 800693e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800694c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006950:	b29b      	uxth	r3, r3
 8006952:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	881b      	ldrh	r3, [r3, #0]
 8006960:	b29b      	uxth	r3, r3
 8006962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800696a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	441a      	add	r2, r3
 8006976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006978:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800697c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006988:	b29b      	uxth	r3, r3
 800698a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	881b      	ldrh	r3, [r3, #0]
 8006998:	b29b      	uxth	r3, r3
 800699a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800699e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	441a      	add	r2, r3
 80069ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3734      	adds	r7, #52	; 0x34
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bc80      	pop	{r7}
 80069ce:	4770      	bx	lr

080069d0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b0cc      	sub	sp, #304	; 0x130
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069de:	6018      	str	r0, [r3, #0]
 80069e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069e8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80069ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	785b      	ldrb	r3, [r3, #1]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	f041 817d 	bne.w	8007cf6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80069fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	699a      	ldr	r2, [r3, #24]
 8006a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d908      	bls.n	8006a2a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006a28:	e007      	b.n	8006a3a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	7b1b      	ldrb	r3, [r3, #12]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d152      	bne.n	8006af0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6959      	ldr	r1, [r3, #20]
 8006a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	88da      	ldrh	r2, [r3, #6]
 8006a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a6c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a70:	6800      	ldr	r0, [r0, #0]
 8006a72:	f001 ff23 	bl	80088bc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a7a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006a7e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a82:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006a86:	6812      	ldr	r2, [r2, #0]
 8006a88:	601a      	str	r2, [r3, #0]
 8006a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006aa4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006aa8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006aac:	6812      	ldr	r2, [r2, #0]
 8006aae:	440a      	add	r2, r1
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	011a      	lsls	r2, r3, #4
 8006ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4413      	add	r3, r2
 8006acc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	801a      	strh	r2, [r3, #0]
 8006aec:	f001 b8b5 	b.w	8007c5a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	78db      	ldrb	r3, [r3, #3]
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	f040 84c6 	bne.w	800748e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6a1a      	ldr	r2, [r3, #32]
 8006b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	f240 8443 	bls.w	80073a6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b46:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	441a      	add	r2, r3
 8006b64:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b70:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6a1a      	ldr	r2, [r3, #32]
 8006b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b8c:	1ad2      	subs	r2, r2, r3
 8006b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ba8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 823e 	beq.w	800703e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006bca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006bce:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006bd2:	6812      	ldr	r2, [r2, #0]
 8006bd4:	601a      	str	r2, [r3, #0]
 8006bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	785b      	ldrb	r3, [r3, #1]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f040 809a 	bne.w	8006d1c <USB_EPStartXfer+0x34c>
 8006be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bf0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006bf4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006bf8:	6812      	ldr	r2, [r2, #0]
 8006bfa:	601a      	str	r2, [r3, #0]
 8006bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c1a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8006c1e:	6812      	ldr	r2, [r2, #0]
 8006c20:	440a      	add	r2, r1
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	011a      	lsls	r2, r3, #4
 8006c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d122      	bne.n	8006c9a <USB_EPStartXfer+0x2ca>
 8006c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c58:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	801a      	strh	r2, [r3, #0]
 8006c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	881b      	ldrh	r3, [r3, #0]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	801a      	strh	r2, [r3, #0]
 8006c98:	e079      	b.n	8006d8e <USB_EPStartXfer+0x3be>
 8006c9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c9e:	2b3e      	cmp	r3, #62	; 0x3e
 8006ca0:	d81b      	bhi.n	8006cda <USB_EPStartXfer+0x30a>
 8006ca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ca6:	085b      	lsrs	r3, r3, #1
 8006ca8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d004      	beq.n	8006cc2 <USB_EPStartXfer+0x2f2>
 8006cb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006cc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	029b      	lsls	r3, r3, #10
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	801a      	strh	r2, [r3, #0]
 8006cd8:	e059      	b.n	8006d8e <USB_EPStartXfer+0x3be>
 8006cda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cde:	095b      	lsrs	r3, r3, #5
 8006ce0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce8:	f003 031f 	and.w	r3, r3, #31
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d104      	bne.n	8006cfa <USB_EPStartXfer+0x32a>
 8006cf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006cfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	029b      	lsls	r3, r3, #10
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d0c:	b29a      	uxth	r2, r3
 8006d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	801a      	strh	r2, [r3, #0]
 8006d1a:	e038      	b.n	8006d8e <USB_EPStartXfer+0x3be>
 8006d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	785b      	ldrb	r3, [r3, #1]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d130      	bne.n	8006d8e <USB_EPStartXfer+0x3be>
 8006d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d42:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006d46:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d4a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8006d4e:	6812      	ldr	r2, [r2, #0]
 8006d50:	440a      	add	r2, r1
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	011a      	lsls	r2, r3, #4
 8006d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d66:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	895b      	ldrh	r3, [r3, #10]
 8006d9a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6959      	ldr	r1, [r3, #20]
 8006daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006db4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006db8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006dbc:	6800      	ldr	r0, [r0, #0]
 8006dbe:	f001 fd7d 	bl	80088bc <USB_WritePMA>
            ep->xfer_buff += len;
 8006dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	695a      	ldr	r2, [r3, #20]
 8006dce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dd2:	441a      	add	r2, r3
 8006dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6a1a      	ldr	r2, [r3, #32]
 8006dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d90f      	bls.n	8006e1c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6a1a      	ldr	r2, [r3, #32]
 8006e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e0c:	1ad2      	subs	r2, r2, r3
 8006e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	621a      	str	r2, [r3, #32]
 8006e1a:	e00e      	b.n	8006e3a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006e1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2200      	movs	r2, #0
 8006e38:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	785b      	ldrb	r3, [r3, #1]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f040 809a 	bne.w	8006f80 <USB_EPStartXfer+0x5b0>
 8006e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e50:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006e54:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e58:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006e5c:	6812      	ldr	r2, [r2, #0]
 8006e5e:	601a      	str	r2, [r3, #0]
 8006e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	4619      	mov	r1, r3
 8006e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e76:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006e7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e7e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8006e82:	6812      	ldr	r2, [r2, #0]
 8006e84:	440a      	add	r2, r1
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	011a      	lsls	r2, r3, #4
 8006e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eaa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d122      	bne.n	8006efe <USB_EPStartXfer+0x52e>
 8006eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ebc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	801a      	strh	r2, [r3, #0]
 8006ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006edc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	881b      	ldrh	r3, [r3, #0]
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	801a      	strh	r2, [r3, #0]
 8006efc:	e083      	b.n	8007006 <USB_EPStartXfer+0x636>
 8006efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f02:	2b3e      	cmp	r3, #62	; 0x3e
 8006f04:	d81b      	bhi.n	8006f3e <USB_EPStartXfer+0x56e>
 8006f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f0a:	085b      	lsrs	r3, r3, #1
 8006f0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d004      	beq.n	8006f26 <USB_EPStartXfer+0x556>
 8006f1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006f20:	3301      	adds	r3, #1
 8006f22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006f26:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	029b      	lsls	r3, r3, #10
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f34:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	801a      	strh	r2, [r3, #0]
 8006f3c:	e063      	b.n	8007006 <USB_EPStartXfer+0x636>
 8006f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f4c:	f003 031f 	and.w	r3, r3, #31
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d104      	bne.n	8006f5e <USB_EPStartXfer+0x58e>
 8006f54:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006f5e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	029b      	lsls	r3, r3, #10
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f76:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	801a      	strh	r2, [r3, #0]
 8006f7e:	e042      	b.n	8007006 <USB_EPStartXfer+0x636>
 8006f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	785b      	ldrb	r3, [r3, #1]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d13a      	bne.n	8007006 <USB_EPStartXfer+0x636>
 8006f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f94:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006f98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f9c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006fa0:	6812      	ldr	r2, [r2, #0]
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006fbe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006fc2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8006fc6:	6812      	ldr	r2, [r2, #0]
 8006fc8:	440a      	add	r2, r1
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	011a      	lsls	r2, r3, #4
 8006fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fde:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ffe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800700a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	891b      	ldrh	r3, [r3, #8]
 8007012:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6959      	ldr	r1, [r3, #20]
 8007022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007026:	b29b      	uxth	r3, r3
 8007028:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800702c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007030:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007034:	6800      	ldr	r0, [r0, #0]
 8007036:	f001 fc41 	bl	80088bc <USB_WritePMA>
 800703a:	f000 be0e 	b.w	8007c5a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800703e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007042:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	785b      	ldrb	r3, [r3, #1]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d16d      	bne.n	800712a <USB_EPStartXfer+0x75a>
 800704e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007052:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	64bb      	str	r3, [r7, #72]	; 0x48
 800705a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007068:	b29b      	uxth	r3, r3
 800706a:	461a      	mov	r2, r3
 800706c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800706e:	4413      	add	r3, r2
 8007070:	64bb      	str	r3, [r7, #72]	; 0x48
 8007072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	011a      	lsls	r2, r3, #4
 8007080:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007082:	4413      	add	r3, r2
 8007084:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007088:	647b      	str	r3, [r7, #68]	; 0x44
 800708a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800708e:	2b00      	cmp	r3, #0
 8007090:	d112      	bne.n	80070b8 <USB_EPStartXfer+0x6e8>
 8007092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007094:	881b      	ldrh	r3, [r3, #0]
 8007096:	b29b      	uxth	r3, r3
 8007098:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800709c:	b29a      	uxth	r2, r3
 800709e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070a0:	801a      	strh	r2, [r3, #0]
 80070a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070b4:	801a      	strh	r2, [r3, #0]
 80070b6:	e063      	b.n	8007180 <USB_EPStartXfer+0x7b0>
 80070b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070bc:	2b3e      	cmp	r3, #62	; 0x3e
 80070be:	d817      	bhi.n	80070f0 <USB_EPStartXfer+0x720>
 80070c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c4:	085b      	lsrs	r3, r3, #1
 80070c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80070ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d004      	beq.n	80070e0 <USB_EPStartXfer+0x710>
 80070d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80070da:	3301      	adds	r3, #1
 80070dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80070e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	029b      	lsls	r3, r3, #10
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070ec:	801a      	strh	r2, [r3, #0]
 80070ee:	e047      	b.n	8007180 <USB_EPStartXfer+0x7b0>
 80070f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070f4:	095b      	lsrs	r3, r3, #5
 80070f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80070fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070fe:	f003 031f 	and.w	r3, r3, #31
 8007102:	2b00      	cmp	r3, #0
 8007104:	d104      	bne.n	8007110 <USB_EPStartXfer+0x740>
 8007106:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800710a:	3b01      	subs	r3, #1
 800710c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007110:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007114:	b29b      	uxth	r3, r3
 8007116:	029b      	lsls	r3, r3, #10
 8007118:	b29b      	uxth	r3, r3
 800711a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800711e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007122:	b29a      	uxth	r2, r3
 8007124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007126:	801a      	strh	r2, [r3, #0]
 8007128:	e02a      	b.n	8007180 <USB_EPStartXfer+0x7b0>
 800712a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800712e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	785b      	ldrb	r3, [r3, #1]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d122      	bne.n	8007180 <USB_EPStartXfer+0x7b0>
 800713a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800713e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	653b      	str	r3, [r7, #80]	; 0x50
 8007146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800714a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007154:	b29b      	uxth	r3, r3
 8007156:	461a      	mov	r2, r3
 8007158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800715a:	4413      	add	r3, r2
 800715c:	653b      	str	r3, [r7, #80]	; 0x50
 800715e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007162:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	011a      	lsls	r2, r3, #4
 800716c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800716e:	4413      	add	r3, r2
 8007170:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007174:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007176:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800717a:	b29a      	uxth	r2, r3
 800717c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800717e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007184:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	891b      	ldrh	r3, [r3, #8]
 800718c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6959      	ldr	r1, [r3, #20]
 800719c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80071a6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80071aa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80071ae:	6800      	ldr	r0, [r0, #0]
 80071b0:	f001 fb84 	bl	80088bc <USB_WritePMA>
            ep->xfer_buff += len;
 80071b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	695a      	ldr	r2, [r3, #20]
 80071c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071c4:	441a      	add	r2, r3
 80071c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80071d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6a1a      	ldr	r2, [r3, #32]
 80071de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d90f      	bls.n	800720e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80071ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6a1a      	ldr	r2, [r3, #32]
 80071fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071fe:	1ad2      	subs	r2, r2, r3
 8007200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	621a      	str	r2, [r3, #32]
 800720c:	e00e      	b.n	800722c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800720e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007212:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800721e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007222:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2200      	movs	r2, #0
 800722a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800722c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007230:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	643b      	str	r3, [r7, #64]	; 0x40
 8007238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800723c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	785b      	ldrb	r3, [r3, #1]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d16d      	bne.n	8007324 <USB_EPStartXfer+0x954>
 8007248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	63bb      	str	r3, [r7, #56]	; 0x38
 8007254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007258:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007262:	b29b      	uxth	r3, r3
 8007264:	461a      	mov	r2, r3
 8007266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007268:	4413      	add	r3, r2
 800726a:	63bb      	str	r3, [r7, #56]	; 0x38
 800726c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007270:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	011a      	lsls	r2, r3, #4
 800727a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727c:	4413      	add	r3, r2
 800727e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007282:	637b      	str	r3, [r7, #52]	; 0x34
 8007284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007288:	2b00      	cmp	r3, #0
 800728a:	d112      	bne.n	80072b2 <USB_EPStartXfer+0x8e2>
 800728c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	b29b      	uxth	r3, r3
 8007292:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007296:	b29a      	uxth	r2, r3
 8007298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800729a:	801a      	strh	r2, [r3, #0]
 800729c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ae:	801a      	strh	r2, [r3, #0]
 80072b0:	e05d      	b.n	800736e <USB_EPStartXfer+0x99e>
 80072b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b6:	2b3e      	cmp	r3, #62	; 0x3e
 80072b8:	d817      	bhi.n	80072ea <USB_EPStartXfer+0x91a>
 80072ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072be:	085b      	lsrs	r3, r3, #1
 80072c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80072c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d004      	beq.n	80072da <USB_EPStartXfer+0x90a>
 80072d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80072d4:	3301      	adds	r3, #1
 80072d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80072da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80072de:	b29b      	uxth	r3, r3
 80072e0:	029b      	lsls	r3, r3, #10
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e6:	801a      	strh	r2, [r3, #0]
 80072e8:	e041      	b.n	800736e <USB_EPStartXfer+0x99e>
 80072ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ee:	095b      	lsrs	r3, r3, #5
 80072f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80072f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f8:	f003 031f 	and.w	r3, r3, #31
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d104      	bne.n	800730a <USB_EPStartXfer+0x93a>
 8007300:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007304:	3b01      	subs	r3, #1
 8007306:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800730a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800730e:	b29b      	uxth	r3, r3
 8007310:	029b      	lsls	r3, r3, #10
 8007312:	b29b      	uxth	r3, r3
 8007314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800731c:	b29a      	uxth	r2, r3
 800731e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007320:	801a      	strh	r2, [r3, #0]
 8007322:	e024      	b.n	800736e <USB_EPStartXfer+0x99e>
 8007324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007328:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	785b      	ldrb	r3, [r3, #1]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d11c      	bne.n	800736e <USB_EPStartXfer+0x99e>
 8007334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007338:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007342:	b29b      	uxth	r3, r3
 8007344:	461a      	mov	r2, r3
 8007346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007348:	4413      	add	r3, r2
 800734a:	643b      	str	r3, [r7, #64]	; 0x40
 800734c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007350:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	011a      	lsls	r2, r3, #4
 800735a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800735c:	4413      	add	r3, r2
 800735e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007368:	b29a      	uxth	r2, r3
 800736a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800736c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800736e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	895b      	ldrh	r3, [r3, #10]
 800737a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800737e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007382:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6959      	ldr	r1, [r3, #20]
 800738a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800738e:	b29b      	uxth	r3, r3
 8007390:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007394:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007398:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800739c:	6800      	ldr	r0, [r0, #0]
 800739e:	f001 fa8d 	bl	80088bc <USB_WritePMA>
 80073a2:	f000 bc5a 	b.w	8007c5a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80073a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80073b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80073d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073dc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80073e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	441a      	add	r2, r3
 80073fa:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80073fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800740a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800740e:	b29b      	uxth	r3, r3
 8007410:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007416:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800741e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007422:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800742c:	b29b      	uxth	r3, r3
 800742e:	461a      	mov	r2, r3
 8007430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007432:	4413      	add	r3, r2
 8007434:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800743a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	011a      	lsls	r2, r3, #4
 8007444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007446:	4413      	add	r3, r2
 8007448:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800744c:	65bb      	str	r3, [r7, #88]	; 0x58
 800744e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007452:	b29a      	uxth	r2, r3
 8007454:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007456:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	891b      	ldrh	r3, [r3, #8]
 8007464:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6959      	ldr	r1, [r3, #20]
 8007474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007478:	b29b      	uxth	r3, r3
 800747a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800747e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007482:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007486:	6800      	ldr	r0, [r0, #0]
 8007488:	f001 fa18 	bl	80088bc <USB_WritePMA>
 800748c:	e3e5      	b.n	8007c5a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800748e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007492:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80074b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	441a      	add	r2, r3
 80074d2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80074d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074de:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80074e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80074ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6a1a      	ldr	r2, [r3, #32]
 80074f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074fa:	1ad2      	subs	r2, r2, r3
 80074fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007500:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007516:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	b29b      	uxth	r3, r3
 8007526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 81bc 	beq.w	80078a8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007534:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800753e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	785b      	ldrb	r3, [r3, #1]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d16d      	bne.n	800762a <USB_EPStartXfer+0xc5a>
 800754e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007552:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	67bb      	str	r3, [r7, #120]	; 0x78
 800755a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800755e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007568:	b29b      	uxth	r3, r3
 800756a:	461a      	mov	r2, r3
 800756c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800756e:	4413      	add	r3, r2
 8007570:	67bb      	str	r3, [r7, #120]	; 0x78
 8007572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007576:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	011a      	lsls	r2, r3, #4
 8007580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007582:	4413      	add	r3, r2
 8007584:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007588:	677b      	str	r3, [r7, #116]	; 0x74
 800758a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800758e:	2b00      	cmp	r3, #0
 8007590:	d112      	bne.n	80075b8 <USB_EPStartXfer+0xbe8>
 8007592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	b29b      	uxth	r3, r3
 8007598:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800759c:	b29a      	uxth	r2, r3
 800759e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075a0:	801a      	strh	r2, [r3, #0]
 80075a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075a4:	881b      	ldrh	r3, [r3, #0]
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075b4:	801a      	strh	r2, [r3, #0]
 80075b6:	e060      	b.n	800767a <USB_EPStartXfer+0xcaa>
 80075b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075bc:	2b3e      	cmp	r3, #62	; 0x3e
 80075be:	d817      	bhi.n	80075f0 <USB_EPStartXfer+0xc20>
 80075c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075c4:	085b      	lsrs	r3, r3, #1
 80075c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80075ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ce:	f003 0301 	and.w	r3, r3, #1
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d004      	beq.n	80075e0 <USB_EPStartXfer+0xc10>
 80075d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80075da:	3301      	adds	r3, #1
 80075dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80075e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	029b      	lsls	r3, r3, #10
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80075ec:	801a      	strh	r2, [r3, #0]
 80075ee:	e044      	b.n	800767a <USB_EPStartXfer+0xcaa>
 80075f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f4:	095b      	lsrs	r3, r3, #5
 80075f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80075fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075fe:	f003 031f 	and.w	r3, r3, #31
 8007602:	2b00      	cmp	r3, #0
 8007604:	d104      	bne.n	8007610 <USB_EPStartXfer+0xc40>
 8007606:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800760a:	3b01      	subs	r3, #1
 800760c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007610:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007614:	b29b      	uxth	r3, r3
 8007616:	029b      	lsls	r3, r3, #10
 8007618:	b29b      	uxth	r3, r3
 800761a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800761e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007622:	b29a      	uxth	r2, r3
 8007624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007626:	801a      	strh	r2, [r3, #0]
 8007628:	e027      	b.n	800767a <USB_EPStartXfer+0xcaa>
 800762a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	785b      	ldrb	r3, [r3, #1]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d11f      	bne.n	800767a <USB_EPStartXfer+0xcaa>
 800763a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007648:	b29b      	uxth	r3, r3
 800764a:	461a      	mov	r2, r3
 800764c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007650:	4413      	add	r3, r2
 8007652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	011a      	lsls	r2, r3, #4
 8007664:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007668:	4413      	add	r3, r2
 800766a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800766e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007674:	b29a      	uxth	r2, r3
 8007676:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007678:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800767a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800767e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	895b      	ldrh	r3, [r3, #10]
 8007686:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800768a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800768e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6959      	ldr	r1, [r3, #20]
 8007696:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800769a:	b29b      	uxth	r3, r3
 800769c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80076a0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80076a4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80076a8:	6800      	ldr	r0, [r0, #0]
 80076aa:	f001 f907 	bl	80088bc <USB_WritePMA>
          ep->xfer_buff += len;
 80076ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	695a      	ldr	r2, [r3, #20]
 80076ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076be:	441a      	add	r2, r3
 80076c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80076cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6a1a      	ldr	r2, [r3, #32]
 80076d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d90f      	bls.n	8007708 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80076e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6a1a      	ldr	r2, [r3, #32]
 80076f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f8:	1ad2      	subs	r2, r2, r3
 80076fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	621a      	str	r2, [r3, #32]
 8007706:	e00e      	b.n	8007726 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800770c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6a1b      	ldr	r3, [r3, #32]
 8007714:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800771c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2200      	movs	r2, #0
 8007724:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800772a:	2b00      	cmp	r3, #0
 800772c:	f000 8295 	beq.w	8007c5a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007734:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	785b      	ldrb	r3, [r3, #1]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d16d      	bne.n	800781c <USB_EPStartXfer+0xe4c>
 8007740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007744:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	66bb      	str	r3, [r7, #104]	; 0x68
 800774c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007750:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800775a:	b29b      	uxth	r3, r3
 800775c:	461a      	mov	r2, r3
 800775e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007760:	4413      	add	r3, r2
 8007762:	66bb      	str	r3, [r7, #104]	; 0x68
 8007764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007768:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	011a      	lsls	r2, r3, #4
 8007772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007774:	4413      	add	r3, r2
 8007776:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800777a:	667b      	str	r3, [r7, #100]	; 0x64
 800777c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007780:	2b00      	cmp	r3, #0
 8007782:	d112      	bne.n	80077aa <USB_EPStartXfer+0xdda>
 8007784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	b29b      	uxth	r3, r3
 800778a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800778e:	b29a      	uxth	r2, r3
 8007790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007792:	801a      	strh	r2, [r3, #0]
 8007794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007796:	881b      	ldrh	r3, [r3, #0]
 8007798:	b29b      	uxth	r3, r3
 800779a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800779e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077a6:	801a      	strh	r2, [r3, #0]
 80077a8:	e063      	b.n	8007872 <USB_EPStartXfer+0xea2>
 80077aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ae:	2b3e      	cmp	r3, #62	; 0x3e
 80077b0:	d817      	bhi.n	80077e2 <USB_EPStartXfer+0xe12>
 80077b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b6:	085b      	lsrs	r3, r3, #1
 80077b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80077bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d004      	beq.n	80077d2 <USB_EPStartXfer+0xe02>
 80077c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077cc:	3301      	adds	r3, #1
 80077ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80077d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	029b      	lsls	r3, r3, #10
 80077da:	b29a      	uxth	r2, r3
 80077dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077de:	801a      	strh	r2, [r3, #0]
 80077e0:	e047      	b.n	8007872 <USB_EPStartXfer+0xea2>
 80077e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077e6:	095b      	lsrs	r3, r3, #5
 80077e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80077ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f0:	f003 031f 	and.w	r3, r3, #31
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d104      	bne.n	8007802 <USB_EPStartXfer+0xe32>
 80077f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077fc:	3b01      	subs	r3, #1
 80077fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007806:	b29b      	uxth	r3, r3
 8007808:	029b      	lsls	r3, r3, #10
 800780a:	b29b      	uxth	r3, r3
 800780c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007814:	b29a      	uxth	r2, r3
 8007816:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007818:	801a      	strh	r2, [r3, #0]
 800781a:	e02a      	b.n	8007872 <USB_EPStartXfer+0xea2>
 800781c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007820:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	785b      	ldrb	r3, [r3, #1]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d122      	bne.n	8007872 <USB_EPStartXfer+0xea2>
 800782c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007830:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	673b      	str	r3, [r7, #112]	; 0x70
 8007838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800783c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007846:	b29b      	uxth	r3, r3
 8007848:	461a      	mov	r2, r3
 800784a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800784c:	4413      	add	r3, r2
 800784e:	673b      	str	r3, [r7, #112]	; 0x70
 8007850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007854:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	011a      	lsls	r2, r3, #4
 800785e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007860:	4413      	add	r3, r2
 8007862:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007866:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007868:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800786c:	b29a      	uxth	r2, r3
 800786e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007870:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	891b      	ldrh	r3, [r3, #8]
 800787e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6959      	ldr	r1, [r3, #20]
 800788e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007892:	b29b      	uxth	r3, r3
 8007894:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007898:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800789c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80078a0:	6800      	ldr	r0, [r0, #0]
 80078a2:	f001 f80b 	bl	80088bc <USB_WritePMA>
 80078a6:	e1d8      	b.n	8007c5a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80078a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	785b      	ldrb	r3, [r3, #1]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d178      	bne.n	80079aa <USB_EPStartXfer+0xfda>
 80078b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80078c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	461a      	mov	r2, r3
 80078d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078dc:	4413      	add	r3, r2
 80078de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80078e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	011a      	lsls	r2, r3, #4
 80078f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078f4:	4413      	add	r3, r2
 80078f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007902:	2b00      	cmp	r3, #0
 8007904:	d116      	bne.n	8007934 <USB_EPStartXfer+0xf64>
 8007906:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800790a:	881b      	ldrh	r3, [r3, #0]
 800790c:	b29b      	uxth	r3, r3
 800790e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007912:	b29a      	uxth	r2, r3
 8007914:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007918:	801a      	strh	r2, [r3, #0]
 800791a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	b29b      	uxth	r3, r3
 8007922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800792a:	b29a      	uxth	r2, r3
 800792c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007930:	801a      	strh	r2, [r3, #0]
 8007932:	e06b      	b.n	8007a0c <USB_EPStartXfer+0x103c>
 8007934:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007938:	2b3e      	cmp	r3, #62	; 0x3e
 800793a:	d818      	bhi.n	800796e <USB_EPStartXfer+0xf9e>
 800793c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007940:	085b      	lsrs	r3, r3, #1
 8007942:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	2b00      	cmp	r3, #0
 8007950:	d004      	beq.n	800795c <USB_EPStartXfer+0xf8c>
 8007952:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007956:	3301      	adds	r3, #1
 8007958:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800795c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007960:	b29b      	uxth	r3, r3
 8007962:	029b      	lsls	r3, r3, #10
 8007964:	b29a      	uxth	r2, r3
 8007966:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800796a:	801a      	strh	r2, [r3, #0]
 800796c:	e04e      	b.n	8007a0c <USB_EPStartXfer+0x103c>
 800796e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007972:	095b      	lsrs	r3, r3, #5
 8007974:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800797c:	f003 031f 	and.w	r3, r3, #31
 8007980:	2b00      	cmp	r3, #0
 8007982:	d104      	bne.n	800798e <USB_EPStartXfer+0xfbe>
 8007984:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007988:	3b01      	subs	r3, #1
 800798a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800798e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007992:	b29b      	uxth	r3, r3
 8007994:	029b      	lsls	r3, r3, #10
 8007996:	b29b      	uxth	r3, r3
 8007998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800799c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079a6:	801a      	strh	r2, [r3, #0]
 80079a8:	e030      	b.n	8007a0c <USB_EPStartXfer+0x103c>
 80079aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	785b      	ldrb	r3, [r3, #1]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d128      	bne.n	8007a0c <USB_EPStartXfer+0x103c>
 80079ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80079c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	461a      	mov	r2, r3
 80079da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80079de:	4413      	add	r3, r2
 80079e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80079e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	011a      	lsls	r2, r3, #4
 80079f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80079f6:	4413      	add	r3, r2
 80079f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a0a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007a0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	891b      	ldrh	r3, [r3, #8]
 8007a18:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	6959      	ldr	r1, [r3, #20]
 8007a28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007a32:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007a36:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007a3a:	6800      	ldr	r0, [r0, #0]
 8007a3c:	f000 ff3e 	bl	80088bc <USB_WritePMA>
          ep->xfer_buff += len;
 8007a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	695a      	ldr	r2, [r3, #20]
 8007a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a50:	441a      	add	r2, r3
 8007a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	6a1a      	ldr	r2, [r3, #32]
 8007a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d90f      	bls.n	8007a9a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6a1a      	ldr	r2, [r3, #32]
 8007a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a8a:	1ad2      	subs	r2, r2, r3
 8007a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	621a      	str	r2, [r3, #32]
 8007a98:	e00e      	b.n	8007ab8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007ab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 80cc 	beq.w	8007c5a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	785b      	ldrb	r3, [r3, #1]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d178      	bne.n	8007bd2 <USB_EPStartXfer+0x1202>
 8007ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	461a      	mov	r2, r3
 8007b00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b04:	4413      	add	r3, r2
 8007b06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	011a      	lsls	r2, r3, #4
 8007b18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d116      	bne.n	8007b5c <USB_EPStartXfer+0x118c>
 8007b2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b40:	801a      	strh	r2, [r3, #0]
 8007b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b58:	801a      	strh	r2, [r3, #0]
 8007b5a:	e064      	b.n	8007c26 <USB_EPStartXfer+0x1256>
 8007b5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b60:	2b3e      	cmp	r3, #62	; 0x3e
 8007b62:	d818      	bhi.n	8007b96 <USB_EPStartXfer+0x11c6>
 8007b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b68:	085b      	lsrs	r3, r3, #1
 8007b6a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007b6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d004      	beq.n	8007b84 <USB_EPStartXfer+0x11b4>
 8007b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b7e:	3301      	adds	r3, #1
 8007b80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	029b      	lsls	r3, r3, #10
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b92:	801a      	strh	r2, [r3, #0]
 8007b94:	e047      	b.n	8007c26 <USB_EPStartXfer+0x1256>
 8007b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b9a:	095b      	lsrs	r3, r3, #5
 8007b9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba4:	f003 031f 	and.w	r3, r3, #31
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d104      	bne.n	8007bb6 <USB_EPStartXfer+0x11e6>
 8007bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	029b      	lsls	r3, r3, #10
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bce:	801a      	strh	r2, [r3, #0]
 8007bd0:	e029      	b.n	8007c26 <USB_EPStartXfer+0x1256>
 8007bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	785b      	ldrb	r3, [r3, #1]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d121      	bne.n	8007c26 <USB_EPStartXfer+0x1256>
 8007be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	011a      	lsls	r2, r3, #4
 8007c0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007c10:	4413      	add	r3, r2
 8007c12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007c16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	895b      	ldrh	r3, [r3, #10]
 8007c32:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6959      	ldr	r1, [r3, #20]
 8007c42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007c4c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007c50:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007c54:	6800      	ldr	r0, [r0, #0]
 8007c56:	f000 fe31 	bl	80088bc <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c7c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c88:	8013      	strh	r3, [r2, #0]
 8007c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c8e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007c92:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c96:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007c9a:	8812      	ldrh	r2, [r2, #0]
 8007c9c:	f082 0210 	eor.w	r2, r2, #16
 8007ca0:	801a      	strh	r2, [r3, #0]
 8007ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007caa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007cae:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007cb2:	8812      	ldrh	r2, [r2, #0]
 8007cb4:	f082 0220 	eor.w	r2, r2, #32
 8007cb8:	801a      	strh	r2, [r3, #0]
 8007cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	441a      	add	r2, r3
 8007cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd8:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007cdc:	881b      	ldrh	r3, [r3, #0]
 8007cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	8013      	strh	r3, [r2, #0]
 8007cf2:	f000 bc9f 	b.w	8008634 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	7b1b      	ldrb	r3, [r3, #12]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f040 80ae 	bne.w	8007e64 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	699a      	ldr	r2, [r3, #24]
 8007d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d917      	bls.n	8007d54 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8007d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	699a      	ldr	r2, [r3, #24]
 8007d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d44:	1ad2      	subs	r2, r2, r3
 8007d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	619a      	str	r2, [r3, #24]
 8007d52:	e00e      	b.n	8007d72 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8007d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8007d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	461a      	mov	r2, r3
 8007d92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007d96:	4413      	add	r3, r2
 8007d98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	011a      	lsls	r2, r3, #4
 8007daa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007dae:	4413      	add	r3, r2
 8007db0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007db4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007db8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d116      	bne.n	8007dee <USB_EPStartXfer+0x141e>
 8007dc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007dd2:	801a      	strh	r2, [r3, #0]
 8007dd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007dea:	801a      	strh	r2, [r3, #0]
 8007dec:	e3e8      	b.n	80085c0 <USB_EPStartXfer+0x1bf0>
 8007dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007df2:	2b3e      	cmp	r3, #62	; 0x3e
 8007df4:	d818      	bhi.n	8007e28 <USB_EPStartXfer+0x1458>
 8007df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dfa:	085b      	lsrs	r3, r3, #1
 8007dfc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e04:	f003 0301 	and.w	r3, r3, #1
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d004      	beq.n	8007e16 <USB_EPStartXfer+0x1446>
 8007e0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e10:	3301      	adds	r3, #1
 8007e12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007e16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	029b      	lsls	r3, r3, #10
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e24:	801a      	strh	r2, [r3, #0]
 8007e26:	e3cb      	b.n	80085c0 <USB_EPStartXfer+0x1bf0>
 8007e28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e2c:	095b      	lsrs	r3, r3, #5
 8007e2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007e32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e36:	f003 031f 	and.w	r3, r3, #31
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d104      	bne.n	8007e48 <USB_EPStartXfer+0x1478>
 8007e3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e42:	3b01      	subs	r3, #1
 8007e44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007e48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	029b      	lsls	r3, r3, #10
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e60:	801a      	strh	r2, [r3, #0]
 8007e62:	e3ad      	b.n	80085c0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	78db      	ldrb	r3, [r3, #3]
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	f040 8200 	bne.w	8008276 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	785b      	ldrb	r3, [r3, #1]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f040 8091 	bne.w	8007faa <USB_EPStartXfer+0x15da>
 8007e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007eac:	4413      	add	r3, r2
 8007eae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	011a      	lsls	r2, r3, #4
 8007ec0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007eca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d116      	bne.n	8007f0c <USB_EPStartXfer+0x153c>
 8007ede:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ee2:	881b      	ldrh	r3, [r3, #0]
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ef0:	801a      	strh	r2, [r3, #0]
 8007ef2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ef6:	881b      	ldrh	r3, [r3, #0]
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f08:	801a      	strh	r2, [r3, #0]
 8007f0a:	e083      	b.n	8008014 <USB_EPStartXfer+0x1644>
 8007f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	2b3e      	cmp	r3, #62	; 0x3e
 8007f1a:	d820      	bhi.n	8007f5e <USB_EPStartXfer+0x158e>
 8007f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	085b      	lsrs	r3, r3, #1
 8007f2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d004      	beq.n	8007f4c <USB_EPStartXfer+0x157c>
 8007f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f46:	3301      	adds	r3, #1
 8007f48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	029b      	lsls	r3, r3, #10
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f5a:	801a      	strh	r2, [r3, #0]
 8007f5c:	e05a      	b.n	8008014 <USB_EPStartXfer+0x1644>
 8007f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	095b      	lsrs	r3, r3, #5
 8007f6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	f003 031f 	and.w	r3, r3, #31
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d104      	bne.n	8007f8e <USB_EPStartXfer+0x15be>
 8007f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	029b      	lsls	r3, r3, #10
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fa6:	801a      	strh	r2, [r3, #0]
 8007fa8:	e034      	b.n	8008014 <USB_EPStartXfer+0x1644>
 8007faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	785b      	ldrb	r3, [r3, #1]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d12c      	bne.n	8008014 <USB_EPStartXfer+0x1644>
 8007fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	461a      	mov	r2, r3
 8007fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fde:	4413      	add	r3, r2
 8007fe0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	011a      	lsls	r2, r3, #4
 8007ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	b29a      	uxth	r2, r3
 800800e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008012:	801a      	strh	r2, [r3, #0]
 8008014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008018:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008026:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	785b      	ldrb	r3, [r3, #1]
 800802e:	2b00      	cmp	r3, #0
 8008030:	f040 8091 	bne.w	8008156 <USB_EPStartXfer+0x1786>
 8008034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008038:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008046:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008050:	b29b      	uxth	r3, r3
 8008052:	461a      	mov	r2, r3
 8008054:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008058:	4413      	add	r3, r2
 800805a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800805e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008062:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	011a      	lsls	r2, r3, #4
 800806c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008070:	4413      	add	r3, r2
 8008072:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008076:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800807a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d116      	bne.n	80080b8 <USB_EPStartXfer+0x16e8>
 800808a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800808e:	881b      	ldrh	r3, [r3, #0]
 8008090:	b29b      	uxth	r3, r3
 8008092:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008096:	b29a      	uxth	r2, r3
 8008098:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800809c:	801a      	strh	r2, [r3, #0]
 800809e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080a2:	881b      	ldrh	r3, [r3, #0]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080b4:	801a      	strh	r2, [r3, #0]
 80080b6:	e07c      	b.n	80081b2 <USB_EPStartXfer+0x17e2>
 80080b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	2b3e      	cmp	r3, #62	; 0x3e
 80080c6:	d820      	bhi.n	800810a <USB_EPStartXfer+0x173a>
 80080c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	085b      	lsrs	r3, r3, #1
 80080d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80080da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d004      	beq.n	80080f8 <USB_EPStartXfer+0x1728>
 80080ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080f2:	3301      	adds	r3, #1
 80080f4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80080f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	029b      	lsls	r3, r3, #10
 8008100:	b29a      	uxth	r2, r3
 8008102:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008106:	801a      	strh	r2, [r3, #0]
 8008108:	e053      	b.n	80081b2 <USB_EPStartXfer+0x17e2>
 800810a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800810e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	095b      	lsrs	r3, r3, #5
 8008118:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800811c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008120:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	f003 031f 	and.w	r3, r3, #31
 800812c:	2b00      	cmp	r3, #0
 800812e:	d104      	bne.n	800813a <USB_EPStartXfer+0x176a>
 8008130:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008134:	3b01      	subs	r3, #1
 8008136:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800813a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800813e:	b29b      	uxth	r3, r3
 8008140:	029b      	lsls	r3, r3, #10
 8008142:	b29b      	uxth	r3, r3
 8008144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800814c:	b29a      	uxth	r2, r3
 800814e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008152:	801a      	strh	r2, [r3, #0]
 8008154:	e02d      	b.n	80081b2 <USB_EPStartXfer+0x17e2>
 8008156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800815a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	785b      	ldrb	r3, [r3, #1]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d125      	bne.n	80081b2 <USB_EPStartXfer+0x17e2>
 8008166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800816a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008174:	b29b      	uxth	r3, r3
 8008176:	461a      	mov	r2, r3
 8008178:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800817c:	4413      	add	r3, r2
 800817e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008186:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	011a      	lsls	r2, r3, #4
 8008190:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008194:	4413      	add	r3, r2
 8008196:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800819a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800819e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80081b0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80081b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	69db      	ldr	r3, [r3, #28]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f000 81fe 	beq.w	80085c0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80081c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	4413      	add	r3, r2
 80081de:	881b      	ldrh	r3, [r3, #0]
 80081e0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80081e4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80081e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d005      	beq.n	80081fc <USB_EPStartXfer+0x182c>
 80081f0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80081f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10d      	bne.n	8008218 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80081fc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008204:	2b00      	cmp	r3, #0
 8008206:	f040 81db 	bne.w	80085c0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800820a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800820e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008212:	2b00      	cmp	r3, #0
 8008214:	f040 81d4 	bne.w	80085c0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800821c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4413      	add	r3, r2
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	b29b      	uxth	r3, r3
 8008236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800823a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800823e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008246:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008250:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	441a      	add	r2, r3
 800825c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800826c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008270:	b29b      	uxth	r3, r3
 8008272:	8013      	strh	r3, [r2, #0]
 8008274:	e1a4      	b.n	80085c0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800827a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	78db      	ldrb	r3, [r3, #3]
 8008282:	2b01      	cmp	r3, #1
 8008284:	f040 819a 	bne.w	80085bc <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800828c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	699a      	ldr	r2, [r3, #24]
 8008294:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008298:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d917      	bls.n	80082d4 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80082a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80082b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	699a      	ldr	r2, [r3, #24]
 80082c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082c4:	1ad2      	subs	r2, r2, r3
 80082c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	619a      	str	r2, [r3, #24]
 80082d2:	e00e      	b.n	80082f2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80082d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80082e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2200      	movs	r2, #0
 80082f0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80082f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	785b      	ldrb	r3, [r3, #1]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d178      	bne.n	80083f4 <USB_EPStartXfer+0x1a24>
 8008302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008306:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008314:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800831e:	b29b      	uxth	r3, r3
 8008320:	461a      	mov	r2, r3
 8008322:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008326:	4413      	add	r3, r2
 8008328:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800832c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	011a      	lsls	r2, r3, #4
 800833a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800833e:	4413      	add	r3, r2
 8008340:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008344:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800834c:	2b00      	cmp	r3, #0
 800834e:	d116      	bne.n	800837e <USB_EPStartXfer+0x19ae>
 8008350:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008354:	881b      	ldrh	r3, [r3, #0]
 8008356:	b29b      	uxth	r3, r3
 8008358:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800835c:	b29a      	uxth	r2, r3
 800835e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008362:	801a      	strh	r2, [r3, #0]
 8008364:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008368:	881b      	ldrh	r3, [r3, #0]
 800836a:	b29b      	uxth	r3, r3
 800836c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008374:	b29a      	uxth	r2, r3
 8008376:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800837a:	801a      	strh	r2, [r3, #0]
 800837c:	e06b      	b.n	8008456 <USB_EPStartXfer+0x1a86>
 800837e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008382:	2b3e      	cmp	r3, #62	; 0x3e
 8008384:	d818      	bhi.n	80083b8 <USB_EPStartXfer+0x19e8>
 8008386:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800838a:	085b      	lsrs	r3, r3, #1
 800838c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008394:	f003 0301 	and.w	r3, r3, #1
 8008398:	2b00      	cmp	r3, #0
 800839a:	d004      	beq.n	80083a6 <USB_EPStartXfer+0x19d6>
 800839c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083a0:	3301      	adds	r3, #1
 80083a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80083a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	029b      	lsls	r3, r3, #10
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083b4:	801a      	strh	r2, [r3, #0]
 80083b6:	e04e      	b.n	8008456 <USB_EPStartXfer+0x1a86>
 80083b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083bc:	095b      	lsrs	r3, r3, #5
 80083be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80083c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083c6:	f003 031f 	and.w	r3, r3, #31
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d104      	bne.n	80083d8 <USB_EPStartXfer+0x1a08>
 80083ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083d2:	3b01      	subs	r3, #1
 80083d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80083d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083dc:	b29b      	uxth	r3, r3
 80083de:	029b      	lsls	r3, r3, #10
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083f0:	801a      	strh	r2, [r3, #0]
 80083f2:	e030      	b.n	8008456 <USB_EPStartXfer+0x1a86>
 80083f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	785b      	ldrb	r3, [r3, #1]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d128      	bne.n	8008456 <USB_EPStartXfer+0x1a86>
 8008404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008408:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008416:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008420:	b29b      	uxth	r3, r3
 8008422:	461a      	mov	r2, r3
 8008424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008428:	4413      	add	r3, r2
 800842a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800842e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	011a      	lsls	r2, r3, #4
 800843c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008440:	4413      	add	r3, r2
 8008442:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008446:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800844a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800844e:	b29a      	uxth	r2, r3
 8008450:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008454:	801a      	strh	r2, [r3, #0]
 8008456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800845a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	785b      	ldrb	r3, [r3, #1]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d178      	bne.n	8008566 <USB_EPStartXfer+0x1b96>
 8008474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008478:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008486:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008490:	b29b      	uxth	r3, r3
 8008492:	461a      	mov	r2, r3
 8008494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008498:	4413      	add	r3, r2
 800849a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800849e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	011a      	lsls	r2, r3, #4
 80084ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084b0:	4413      	add	r3, r2
 80084b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80084b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80084ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d116      	bne.n	80084f0 <USB_EPStartXfer+0x1b20>
 80084c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084c6:	881b      	ldrh	r3, [r3, #0]
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084d4:	801a      	strh	r2, [r3, #0]
 80084d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084da:	881b      	ldrh	r3, [r3, #0]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084ec:	801a      	strh	r2, [r3, #0]
 80084ee:	e067      	b.n	80085c0 <USB_EPStartXfer+0x1bf0>
 80084f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084f4:	2b3e      	cmp	r3, #62	; 0x3e
 80084f6:	d818      	bhi.n	800852a <USB_EPStartXfer+0x1b5a>
 80084f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084fc:	085b      	lsrs	r3, r3, #1
 80084fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008506:	f003 0301 	and.w	r3, r3, #1
 800850a:	2b00      	cmp	r3, #0
 800850c:	d004      	beq.n	8008518 <USB_EPStartXfer+0x1b48>
 800850e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008512:	3301      	adds	r3, #1
 8008514:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008518:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800851c:	b29b      	uxth	r3, r3
 800851e:	029b      	lsls	r3, r3, #10
 8008520:	b29a      	uxth	r2, r3
 8008522:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008526:	801a      	strh	r2, [r3, #0]
 8008528:	e04a      	b.n	80085c0 <USB_EPStartXfer+0x1bf0>
 800852a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800852e:	095b      	lsrs	r3, r3, #5
 8008530:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008538:	f003 031f 	and.w	r3, r3, #31
 800853c:	2b00      	cmp	r3, #0
 800853e:	d104      	bne.n	800854a <USB_EPStartXfer+0x1b7a>
 8008540:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008544:	3b01      	subs	r3, #1
 8008546:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800854a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800854e:	b29b      	uxth	r3, r3
 8008550:	029b      	lsls	r3, r3, #10
 8008552:	b29b      	uxth	r3, r3
 8008554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800855c:	b29a      	uxth	r2, r3
 800855e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008562:	801a      	strh	r2, [r3, #0]
 8008564:	e02c      	b.n	80085c0 <USB_EPStartXfer+0x1bf0>
 8008566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800856a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	785b      	ldrb	r3, [r3, #1]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d124      	bne.n	80085c0 <USB_EPStartXfer+0x1bf0>
 8008576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800857a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008584:	b29b      	uxth	r3, r3
 8008586:	461a      	mov	r2, r3
 8008588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800858c:	4413      	add	r3, r2
 800858e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008596:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	011a      	lsls	r2, r3, #4
 80085a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085a4:	4413      	add	r3, r2
 80085a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80085ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085b8:	801a      	strh	r2, [r3, #0]
 80085ba:	e001      	b.n	80085c0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e03a      	b.n	8008636 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80085c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4413      	add	r3, r2
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	b29b      	uxth	r3, r3
 80085de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085e6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80085ea:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80085ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80085f2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80085f6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80085fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80085fe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008606:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008610:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	441a      	add	r2, r3
 800861c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800862c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008630:	b29b      	uxth	r3, r3
 8008632:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	785b      	ldrb	r3, [r3, #1]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d020      	beq.n	8008694 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4413      	add	r3, r2
 800865c:	881b      	ldrh	r3, [r3, #0]
 800865e:	b29b      	uxth	r3, r3
 8008660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008668:	81bb      	strh	r3, [r7, #12]
 800866a:	89bb      	ldrh	r3, [r7, #12]
 800866c:	f083 0310 	eor.w	r3, r3, #16
 8008670:	81bb      	strh	r3, [r7, #12]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	441a      	add	r2, r3
 800867c:	89bb      	ldrh	r3, [r7, #12]
 800867e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008682:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800868a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800868e:	b29b      	uxth	r3, r3
 8008690:	8013      	strh	r3, [r2, #0]
 8008692:	e01f      	b.n	80086d4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	881b      	ldrh	r3, [r3, #0]
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80086a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086aa:	81fb      	strh	r3, [r7, #14]
 80086ac:	89fb      	ldrh	r3, [r7, #14]
 80086ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80086b2:	81fb      	strh	r3, [r7, #14]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	441a      	add	r2, r3
 80086be:	89fb      	ldrh	r3, [r7, #14]
 80086c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	bc80      	pop	{r7}
 80086de:	4770      	bx	lr

080086e0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	7b1b      	ldrb	r3, [r3, #12]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f040 809d 	bne.w	800882e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	785b      	ldrb	r3, [r3, #1]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d04c      	beq.n	8008796 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	4413      	add	r3, r2
 8008706:	881b      	ldrh	r3, [r3, #0]
 8008708:	823b      	strh	r3, [r7, #16]
 800870a:	8a3b      	ldrh	r3, [r7, #16]
 800870c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008710:	2b00      	cmp	r3, #0
 8008712:	d01b      	beq.n	800874c <USB_EPClearStall+0x6c>
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4413      	add	r3, r2
 800871e:	881b      	ldrh	r3, [r3, #0]
 8008720:	b29b      	uxth	r3, r3
 8008722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800872a:	81fb      	strh	r3, [r7, #14]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	441a      	add	r2, r3
 8008736:	89fb      	ldrh	r3, [r7, #14]
 8008738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800873c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008744:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008748:	b29b      	uxth	r3, r3
 800874a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	78db      	ldrb	r3, [r3, #3]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d06c      	beq.n	800882e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4413      	add	r3, r2
 800875e:	881b      	ldrh	r3, [r3, #0]
 8008760:	b29b      	uxth	r3, r3
 8008762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800876a:	81bb      	strh	r3, [r7, #12]
 800876c:	89bb      	ldrh	r3, [r7, #12]
 800876e:	f083 0320 	eor.w	r3, r3, #32
 8008772:	81bb      	strh	r3, [r7, #12]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	441a      	add	r2, r3
 800877e:	89bb      	ldrh	r3, [r7, #12]
 8008780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800878c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008790:	b29b      	uxth	r3, r3
 8008792:	8013      	strh	r3, [r2, #0]
 8008794:	e04b      	b.n	800882e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	881b      	ldrh	r3, [r3, #0]
 80087a2:	82fb      	strh	r3, [r7, #22]
 80087a4:	8afb      	ldrh	r3, [r7, #22]
 80087a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d01b      	beq.n	80087e6 <USB_EPClearStall+0x106>
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	4413      	add	r3, r2
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087c4:	82bb      	strh	r3, [r7, #20]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	441a      	add	r2, r3
 80087d0:	8abb      	ldrh	r3, [r7, #20]
 80087d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087fc:	827b      	strh	r3, [r7, #18]
 80087fe:	8a7b      	ldrh	r3, [r7, #18]
 8008800:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008804:	827b      	strh	r3, [r7, #18]
 8008806:	8a7b      	ldrh	r3, [r7, #18]
 8008808:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800880c:	827b      	strh	r3, [r7, #18]
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	441a      	add	r2, r3
 8008818:	8a7b      	ldrh	r3, [r7, #18]
 800881a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800881e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800882a:	b29b      	uxth	r3, r3
 800882c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	371c      	adds	r7, #28
 8008834:	46bd      	mov	sp, r7
 8008836:	bc80      	pop	{r7}
 8008838:	4770      	bx	lr

0800883a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800883a:	b480      	push	{r7}
 800883c:	b083      	sub	sp, #12
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	460b      	mov	r3, r1
 8008844:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008846:	78fb      	ldrb	r3, [r7, #3]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d103      	bne.n	8008854 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2280      	movs	r2, #128	; 0x80
 8008850:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	bc80      	pop	{r7}
 800885e:	4770      	bx	lr

08008860 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	bc80      	pop	{r7}
 8008872:	4770      	bx	lr

08008874 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	bc80      	pop	{r7}
 8008886:	4770      	bx	lr

08008888 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008896:	b29b      	uxth	r3, r3
 8008898:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800889a:	68fb      	ldr	r3, [r7, #12]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3714      	adds	r7, #20
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bc80      	pop	{r7}
 80088a4:	4770      	bx	lr

080088a6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80088a6:	b480      	push	{r7}
 80088a8:	b083      	sub	sp, #12
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	370c      	adds	r7, #12
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bc80      	pop	{r7}
 80088ba:	4770      	bx	lr

080088bc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80088bc:	b480      	push	{r7}
 80088be:	b08d      	sub	sp, #52	; 0x34
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	4611      	mov	r1, r2
 80088c8:	461a      	mov	r2, r3
 80088ca:	460b      	mov	r3, r1
 80088cc:	80fb      	strh	r3, [r7, #6]
 80088ce:	4613      	mov	r3, r2
 80088d0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80088d2:	88bb      	ldrh	r3, [r7, #4]
 80088d4:	3301      	adds	r3, #1
 80088d6:	085b      	lsrs	r3, r3, #1
 80088d8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80088e2:	88fb      	ldrh	r3, [r7, #6]
 80088e4:	005a      	lsls	r2, r3, #1
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088ee:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088f4:	e01e      	b.n	8008934 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80088fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fe:	3301      	adds	r3, #1
 8008900:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	b29b      	uxth	r3, r3
 8008908:	021b      	lsls	r3, r3, #8
 800890a:	b29b      	uxth	r3, r3
 800890c:	461a      	mov	r2, r3
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	4313      	orrs	r3, r2
 8008912:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	b29a      	uxth	r2, r3
 8008918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891e:	3302      	adds	r3, #2
 8008920:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	3302      	adds	r3, #2
 8008926:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	3301      	adds	r3, #1
 800892c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800892e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008930:	3b01      	subs	r3, #1
 8008932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1dd      	bne.n	80088f6 <USB_WritePMA+0x3a>
  }
}
 800893a:	bf00      	nop
 800893c:	bf00      	nop
 800893e:	3734      	adds	r7, #52	; 0x34
 8008940:	46bd      	mov	sp, r7
 8008942:	bc80      	pop	{r7}
 8008944:	4770      	bx	lr

08008946 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008946:	b480      	push	{r7}
 8008948:	b08b      	sub	sp, #44	; 0x2c
 800894a:	af00      	add	r7, sp, #0
 800894c:	60f8      	str	r0, [r7, #12]
 800894e:	60b9      	str	r1, [r7, #8]
 8008950:	4611      	mov	r1, r2
 8008952:	461a      	mov	r2, r3
 8008954:	460b      	mov	r3, r1
 8008956:	80fb      	strh	r3, [r7, #6]
 8008958:	4613      	mov	r3, r2
 800895a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800895c:	88bb      	ldrh	r3, [r7, #4]
 800895e:	085b      	lsrs	r3, r3, #1
 8008960:	b29b      	uxth	r3, r3
 8008962:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800896c:	88fb      	ldrh	r3, [r7, #6]
 800896e:	005a      	lsls	r2, r3, #1
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	4413      	add	r3, r2
 8008974:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008978:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
 800897e:	e01b      	b.n	80089b8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008980:	6a3b      	ldr	r3, [r7, #32]
 8008982:	881b      	ldrh	r3, [r3, #0]
 8008984:	b29b      	uxth	r3, r3
 8008986:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008988:	6a3b      	ldr	r3, [r7, #32]
 800898a:	3302      	adds	r3, #2
 800898c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	b2da      	uxtb	r2, r3
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	3301      	adds	r3, #1
 800899a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	0a1b      	lsrs	r3, r3, #8
 80089a0:	b2da      	uxtb	r2, r3
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	3301      	adds	r3, #1
 80089aa:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80089ac:	6a3b      	ldr	r3, [r7, #32]
 80089ae:	3302      	adds	r3, #2
 80089b0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80089b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b4:	3b01      	subs	r3, #1
 80089b6:	627b      	str	r3, [r7, #36]	; 0x24
 80089b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1e0      	bne.n	8008980 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80089be:	88bb      	ldrh	r3, [r7, #4]
 80089c0:	f003 0301 	and.w	r3, r3, #1
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d007      	beq.n	80089da <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80089ca:	6a3b      	ldr	r3, [r7, #32]
 80089cc:	881b      	ldrh	r3, [r3, #0]
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	b2da      	uxtb	r2, r3
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	701a      	strb	r2, [r3, #0]
  }
}
 80089da:	bf00      	nop
 80089dc:	372c      	adds	r7, #44	; 0x2c
 80089de:	46bd      	mov	sp, r7
 80089e0:	bc80      	pop	{r7}
 80089e2:	4770      	bx	lr

080089e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	460b      	mov	r3, r1
 80089ee:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80089f0:	2300      	movs	r3, #0
 80089f2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	7c1b      	ldrb	r3, [r3, #16]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d115      	bne.n	8008a28 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80089fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a00:	2202      	movs	r2, #2
 8008a02:	2181      	movs	r1, #129	; 0x81
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f001 febe 	bl	800a786 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a14:	2202      	movs	r2, #2
 8008a16:	2101      	movs	r1, #1
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f001 feb4 	bl	800a786 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008a26:	e012      	b.n	8008a4e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a28:	2340      	movs	r3, #64	; 0x40
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	2181      	movs	r1, #129	; 0x81
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f001 fea9 	bl	800a786 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a3a:	2340      	movs	r3, #64	; 0x40
 8008a3c:	2202      	movs	r2, #2
 8008a3e:	2101      	movs	r1, #1
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f001 fea0 	bl	800a786 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a4e:	2308      	movs	r3, #8
 8008a50:	2203      	movs	r2, #3
 8008a52:	2182      	movs	r1, #130	; 0x82
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f001 fe96 	bl	800a786 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008a60:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008a64:	f001 ffb6 	bl	800a9d4 <USBD_static_malloc>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d102      	bne.n	8008a80 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	73fb      	strb	r3, [r7, #15]
 8008a7e:	e026      	b.n	8008ace <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a86:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	7c1b      	ldrb	r3, [r3, #16]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d109      	bne.n	8008abe <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ab4:	2101      	movs	r1, #1
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f001 ff56 	bl	800a968 <USBD_LL_PrepareReceive>
 8008abc:	e007      	b.n	8008ace <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ac4:	2340      	movs	r3, #64	; 0x40
 8008ac6:	2101      	movs	r1, #1
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f001 ff4d 	bl	800a968 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008ae8:	2181      	movs	r1, #129	; 0x81
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f001 fe71 	bl	800a7d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008af6:	2101      	movs	r1, #1
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f001 fe6a 	bl	800a7d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008b06:	2182      	movs	r1, #130	; 0x82
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f001 fe62 	bl	800a7d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00e      	beq.n	8008b3c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f001 ff5c 	bl	800a9ec <USBD_static_free>
    pdev->pClassData = NULL;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b086      	sub	sp, #24
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b56:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d039      	beq.n	8008be4 <USBD_CDC_Setup+0x9e>
 8008b70:	2b20      	cmp	r3, #32
 8008b72:	d17f      	bne.n	8008c74 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	88db      	ldrh	r3, [r3, #6]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d029      	beq.n	8008bd0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	b25b      	sxtb	r3, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	da11      	bge.n	8008baa <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008b92:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b94:	683a      	ldr	r2, [r7, #0]
 8008b96:	88d2      	ldrh	r2, [r2, #6]
 8008b98:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008b9a:	6939      	ldr	r1, [r7, #16]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	88db      	ldrh	r3, [r3, #6]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f001 fa09 	bl	8009fba <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008ba8:	e06b      	b.n	8008c82 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	785a      	ldrb	r2, [r3, #1]
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	88db      	ldrh	r3, [r3, #6]
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008bc0:	6939      	ldr	r1, [r7, #16]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	88db      	ldrh	r3, [r3, #6]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f001 fa24 	bl	800a016 <USBD_CtlPrepareRx>
      break;
 8008bce:	e058      	b.n	8008c82 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	683a      	ldr	r2, [r7, #0]
 8008bda:	7850      	ldrb	r0, [r2, #1]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	4798      	blx	r3
      break;
 8008be2:	e04e      	b.n	8008c82 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	785b      	ldrb	r3, [r3, #1]
 8008be8:	2b0b      	cmp	r3, #11
 8008bea:	d02e      	beq.n	8008c4a <USBD_CDC_Setup+0x104>
 8008bec:	2b0b      	cmp	r3, #11
 8008bee:	dc38      	bgt.n	8008c62 <USBD_CDC_Setup+0x11c>
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <USBD_CDC_Setup+0xb4>
 8008bf4:	2b0a      	cmp	r3, #10
 8008bf6:	d014      	beq.n	8008c22 <USBD_CDC_Setup+0xdc>
 8008bf8:	e033      	b.n	8008c62 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c00:	2b03      	cmp	r3, #3
 8008c02:	d107      	bne.n	8008c14 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008c04:	f107 030c 	add.w	r3, r7, #12
 8008c08:	2202      	movs	r2, #2
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f001 f9d4 	bl	8009fba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c12:	e02e      	b.n	8008c72 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008c14:	6839      	ldr	r1, [r7, #0]
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f001 f965 	bl	8009ee6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	75fb      	strb	r3, [r7, #23]
          break;
 8008c20:	e027      	b.n	8008c72 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c28:	2b03      	cmp	r3, #3
 8008c2a:	d107      	bne.n	8008c3c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008c2c:	f107 030f 	add.w	r3, r7, #15
 8008c30:	2201      	movs	r2, #1
 8008c32:	4619      	mov	r1, r3
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f001 f9c0 	bl	8009fba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c3a:	e01a      	b.n	8008c72 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008c3c:	6839      	ldr	r1, [r7, #0]
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f001 f951 	bl	8009ee6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c44:	2302      	movs	r3, #2
 8008c46:	75fb      	strb	r3, [r7, #23]
          break;
 8008c48:	e013      	b.n	8008c72 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c50:	2b03      	cmp	r3, #3
 8008c52:	d00d      	beq.n	8008c70 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f001 f945 	bl	8009ee6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008c60:	e006      	b.n	8008c70 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008c62:	6839      	ldr	r1, [r7, #0]
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 f93e 	bl	8009ee6 <USBD_CtlError>
          ret = USBD_FAIL;
 8008c6a:	2302      	movs	r3, #2
 8008c6c:	75fb      	strb	r3, [r7, #23]
          break;
 8008c6e:	e000      	b.n	8008c72 <USBD_CDC_Setup+0x12c>
          break;
 8008c70:	bf00      	nop
      }
      break;
 8008c72:	e006      	b.n	8008c82 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f001 f935 	bl	8009ee6 <USBD_CtlError>
      ret = USBD_FAIL;
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8008c80:	bf00      	nop
  }

  return ret;
 8008c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3718      	adds	r7, #24
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	460b      	mov	r3, r1
 8008c96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c9e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ca6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d03a      	beq.n	8008d28 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008cb2:	78fa      	ldrb	r2, [r7, #3]
 8008cb4:	6879      	ldr	r1, [r7, #4]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4413      	add	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	440b      	add	r3, r1
 8008cc0:	331c      	adds	r3, #28
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d029      	beq.n	8008d1c <USBD_CDC_DataIn+0x90>
 8008cc8:	78fa      	ldrb	r2, [r7, #3]
 8008cca:	6879      	ldr	r1, [r7, #4]
 8008ccc:	4613      	mov	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	4413      	add	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	440b      	add	r3, r1
 8008cd6:	331c      	adds	r3, #28
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	78f9      	ldrb	r1, [r7, #3]
 8008cdc:	68b8      	ldr	r0, [r7, #8]
 8008cde:	460b      	mov	r3, r1
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	440b      	add	r3, r1
 8008ce4:	00db      	lsls	r3, r3, #3
 8008ce6:	4403      	add	r3, r0
 8008ce8:	3338      	adds	r3, #56	; 0x38
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	fbb2 f1f3 	udiv	r1, r2, r3
 8008cf0:	fb01 f303 	mul.w	r3, r1, r3
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d110      	bne.n	8008d1c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008cfa:	78fa      	ldrb	r2, [r7, #3]
 8008cfc:	6879      	ldr	r1, [r7, #4]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	440b      	add	r3, r1
 8008d08:	331c      	adds	r3, #28
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d0e:	78f9      	ldrb	r1, [r7, #3]
 8008d10:	2300      	movs	r3, #0
 8008d12:	2200      	movs	r2, #0
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f001 fe04 	bl	800a922 <USBD_LL_Transmit>
 8008d1a:	e003      	b.n	8008d24 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	e000      	b.n	8008d2a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008d28:	2302      	movs	r3, #2
  }
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b084      	sub	sp, #16
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d44:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008d46:	78fb      	ldrb	r3, [r7, #3]
 8008d48:	4619      	mov	r1, r3
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f001 fe2f 	bl	800a9ae <USBD_LL_GetRxDataSize>
 8008d50:	4602      	mov	r2, r0
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00d      	beq.n	8008d7e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008d76:	4611      	mov	r1, r2
 8008d78:	4798      	blx	r3

    return USBD_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	e000      	b.n	8008d80 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008d7e:	2302      	movs	r3, #2
  }
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d96:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d015      	beq.n	8008dce <USBD_CDC_EP0_RxReady+0x46>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008da8:	2bff      	cmp	r3, #255	; 0xff
 8008daa:	d010      	beq.n	8008dce <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008dba:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008dc2:	b292      	uxth	r2, r2
 8008dc4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	22ff      	movs	r2, #255	; 0xff
 8008dca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2243      	movs	r2, #67	; 0x43
 8008de4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008de6:	4b03      	ldr	r3, [pc, #12]	; (8008df4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bc80      	pop	{r7}
 8008df0:	4770      	bx	lr
 8008df2:	bf00      	nop
 8008df4:	20000114 	.word	0x20000114

08008df8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2243      	movs	r2, #67	; 0x43
 8008e04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008e06:	4b03      	ldr	r3, [pc, #12]	; (8008e14 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bc80      	pop	{r7}
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	200000d0 	.word	0x200000d0

08008e18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2243      	movs	r2, #67	; 0x43
 8008e24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008e26:	4b03      	ldr	r3, [pc, #12]	; (8008e34 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bc80      	pop	{r7}
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	20000158 	.word	0x20000158

08008e38 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	220a      	movs	r2, #10
 8008e44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008e46:	4b03      	ldr	r3, [pc, #12]	; (8008e54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bc80      	pop	{r7}
 8008e50:	4770      	bx	lr
 8008e52:	bf00      	nop
 8008e54:	2000008c 	.word	0x2000008c

08008e58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008e62:	2302      	movs	r3, #2
 8008e64:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d005      	beq.n	8008e78 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3714      	adds	r7, #20
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bc80      	pop	{r7}
 8008e82:	4770      	bx	lr

08008e84 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b087      	sub	sp, #28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e98:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	68ba      	ldr	r2, [r7, #8]
 8008e9e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008ea2:	88fa      	ldrh	r2, [r7, #6]
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	371c      	adds	r7, #28
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bc80      	pop	{r7}
 8008eb4:	4770      	bx	lr

08008eb6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	b085      	sub	sp, #20
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ec6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bc80      	pop	{r7}
 8008eda:	4770      	bx	lr

08008edc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d01c      	beq.n	8008f30 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d115      	bne.n	8008f2c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	2181      	movs	r1, #129	; 0x81
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f001 fcfd 	bl	800a922 <USBD_LL_Transmit>

      return USBD_OK;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	e002      	b.n	8008f32 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e000      	b.n	8008f32 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008f30:	2302      	movs	r3, #2
  }
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b084      	sub	sp, #16
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f48:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d017      	beq.n	8008f84 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	7c1b      	ldrb	r3, [r3, #16]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d109      	bne.n	8008f70 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f66:	2101      	movs	r1, #1
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f001 fcfd 	bl	800a968 <USBD_LL_PrepareReceive>
 8008f6e:	e007      	b.n	8008f80 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f76:	2340      	movs	r3, #64	; 0x40
 8008f78:	2101      	movs	r1, #1
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f001 fcf4 	bl	800a968 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008f80:	2300      	movs	r3, #0
 8008f82:	e000      	b.n	8008f86 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008f84:	2302      	movs	r3, #2
  }
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	b084      	sub	sp, #16
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	60f8      	str	r0, [r7, #12]
 8008f96:	60b9      	str	r1, [r7, #8]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d101      	bne.n	8008fa6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	e01a      	b.n	8008fdc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d003      	beq.n	8008fb8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d003      	beq.n	8008fc6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	68ba      	ldr	r2, [r7, #8]
 8008fc2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	79fa      	ldrb	r2, [r7, #7]
 8008fd2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f001 fb61 	bl	800a69c <USBD_LL_Init>

  return USBD_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d006      	beq.n	8009006 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	683a      	ldr	r2, [r7, #0]
 8008ffc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	73fb      	strb	r3, [r7, #15]
 8009004:	e001      	b.n	800900a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009006:	2302      	movs	r3, #2
 8009008:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800900a:	7bfb      	ldrb	r3, [r7, #15]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3714      	adds	r7, #20
 8009010:	46bd      	mov	sp, r7
 8009012:	bc80      	pop	{r7}
 8009014:	4770      	bx	lr

08009016 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b082      	sub	sp, #8
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f001 fb96 	bl	800a750 <USBD_LL_Start>

  return USBD_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800902e:	b480      	push	{r7}
 8009030:	b083      	sub	sp, #12
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	bc80      	pop	{r7}
 8009040:	4770      	bx	lr

08009042 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b084      	sub	sp, #16
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
 800904a:	460b      	mov	r3, r1
 800904c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800904e:	2302      	movs	r3, #2
 8009050:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00c      	beq.n	8009076 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	78fa      	ldrb	r2, [r7, #3]
 8009066:	4611      	mov	r1, r2
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	4798      	blx	r3
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d101      	bne.n	8009076 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009076:	7bfb      	ldrb	r3, [r7, #15]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	78fa      	ldrb	r2, [r7, #3]
 8009096:	4611      	mov	r1, r2
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	4798      	blx	r3

  return USBD_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b082      	sub	sp, #8
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80090b6:	6839      	ldr	r1, [r7, #0]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f000 fed8 	bl	8009e6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80090cc:	461a      	mov	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80090da:	f003 031f 	and.w	r3, r3, #31
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d016      	beq.n	8009110 <USBD_LL_SetupStage+0x6a>
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d81c      	bhi.n	8009120 <USBD_LL_SetupStage+0x7a>
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d002      	beq.n	80090f0 <USBD_LL_SetupStage+0x4a>
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d008      	beq.n	8009100 <USBD_LL_SetupStage+0x5a>
 80090ee:	e017      	b.n	8009120 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80090f6:	4619      	mov	r1, r3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f9cb 	bl	8009494 <USBD_StdDevReq>
      break;
 80090fe:	e01a      	b.n	8009136 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009106:	4619      	mov	r1, r3
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fa2d 	bl	8009568 <USBD_StdItfReq>
      break;
 800910e:	e012      	b.n	8009136 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fa6d 	bl	80095f8 <USBD_StdEPReq>
      break;
 800911e:	e00a      	b.n	8009136 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009126:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800912a:	b2db      	uxtb	r3, r3
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f001 fb6e 	bl	800a810 <USBD_LL_StallEP>
      break;
 8009134:	bf00      	nop
  }

  return USBD_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	460b      	mov	r3, r1
 800914a:	607a      	str	r2, [r7, #4]
 800914c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800914e:	7afb      	ldrb	r3, [r7, #11]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d14b      	bne.n	80091ec <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800915a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009162:	2b03      	cmp	r3, #3
 8009164:	d134      	bne.n	80091d0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	68da      	ldr	r2, [r3, #12]
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	429a      	cmp	r2, r3
 8009170:	d919      	bls.n	80091a6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	68da      	ldr	r2, [r3, #12]
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	1ad2      	subs	r2, r2, r3
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	68da      	ldr	r2, [r3, #12]
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009188:	429a      	cmp	r2, r3
 800918a:	d203      	bcs.n	8009194 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009190:	b29b      	uxth	r3, r3
 8009192:	e002      	b.n	800919a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009198:	b29b      	uxth	r3, r3
 800919a:	461a      	mov	r2, r3
 800919c:	6879      	ldr	r1, [r7, #4]
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f000 ff57 	bl	800a052 <USBD_CtlContinueRx>
 80091a4:	e038      	b.n	8009218 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00a      	beq.n	80091c8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80091b8:	2b03      	cmp	r3, #3
 80091ba:	d105      	bne.n	80091c8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 ff54 	bl	800a076 <USBD_CtlSendStatus>
 80091ce:	e023      	b.n	8009218 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091d6:	2b05      	cmp	r3, #5
 80091d8:	d11e      	bne.n	8009218 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80091e2:	2100      	movs	r1, #0
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f001 fb13 	bl	800a810 <USBD_LL_StallEP>
 80091ea:	e015      	b.n	8009218 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00d      	beq.n	8009214 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80091fe:	2b03      	cmp	r3, #3
 8009200:	d108      	bne.n	8009214 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009208:	699b      	ldr	r3, [r3, #24]
 800920a:	7afa      	ldrb	r2, [r7, #11]
 800920c:	4611      	mov	r1, r2
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	4798      	blx	r3
 8009212:	e001      	b.n	8009218 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009214:	2302      	movs	r3, #2
 8009216:	e000      	b.n	800921a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3718      	adds	r7, #24
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b086      	sub	sp, #24
 8009226:	af00      	add	r7, sp, #0
 8009228:	60f8      	str	r0, [r7, #12]
 800922a:	460b      	mov	r3, r1
 800922c:	607a      	str	r2, [r7, #4]
 800922e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009230:	7afb      	ldrb	r3, [r7, #11]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d17f      	bne.n	8009336 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	3314      	adds	r3, #20
 800923a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009242:	2b02      	cmp	r3, #2
 8009244:	d15c      	bne.n	8009300 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	68da      	ldr	r2, [r3, #12]
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	429a      	cmp	r2, r3
 8009250:	d915      	bls.n	800927e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	68da      	ldr	r2, [r3, #12]
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	1ad2      	subs	r2, r2, r3
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	b29b      	uxth	r3, r3
 8009266:	461a      	mov	r2, r3
 8009268:	6879      	ldr	r1, [r7, #4]
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f000 fec1 	bl	8009ff2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009270:	2300      	movs	r3, #0
 8009272:	2200      	movs	r2, #0
 8009274:	2100      	movs	r1, #0
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f001 fb76 	bl	800a968 <USBD_LL_PrepareReceive>
 800927c:	e04e      	b.n	800931c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	697a      	ldr	r2, [r7, #20]
 8009284:	6912      	ldr	r2, [r2, #16]
 8009286:	fbb3 f1f2 	udiv	r1, r3, r2
 800928a:	fb01 f202 	mul.w	r2, r1, r2
 800928e:	1a9b      	subs	r3, r3, r2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d11c      	bne.n	80092ce <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	689a      	ldr	r2, [r3, #8]
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800929c:	429a      	cmp	r2, r3
 800929e:	d316      	bcc.n	80092ce <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	689a      	ldr	r2, [r3, #8]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d20f      	bcs.n	80092ce <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80092ae:	2200      	movs	r2, #0
 80092b0:	2100      	movs	r1, #0
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f000 fe9d 	bl	8009ff2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092c0:	2300      	movs	r3, #0
 80092c2:	2200      	movs	r2, #0
 80092c4:	2100      	movs	r1, #0
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f001 fb4e 	bl	800a968 <USBD_LL_PrepareReceive>
 80092cc:	e026      	b.n	800931c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00a      	beq.n	80092f0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80092e0:	2b03      	cmp	r3, #3
 80092e2:	d105      	bne.n	80092f0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80092f0:	2180      	movs	r1, #128	; 0x80
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f001 fa8c 	bl	800a810 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f000 fecf 	bl	800a09c <USBD_CtlReceiveStatus>
 80092fe:	e00d      	b.n	800931c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009306:	2b04      	cmp	r3, #4
 8009308:	d004      	beq.n	8009314 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009310:	2b00      	cmp	r3, #0
 8009312:	d103      	bne.n	800931c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009314:	2180      	movs	r1, #128	; 0x80
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f001 fa7a 	bl	800a810 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009322:	2b01      	cmp	r3, #1
 8009324:	d11d      	bne.n	8009362 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f7ff fe81 	bl	800902e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009334:	e015      	b.n	8009362 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800933c:	695b      	ldr	r3, [r3, #20]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00d      	beq.n	800935e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009348:	2b03      	cmp	r3, #3
 800934a:	d108      	bne.n	800935e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009352:	695b      	ldr	r3, [r3, #20]
 8009354:	7afa      	ldrb	r2, [r7, #11]
 8009356:	4611      	mov	r1, r2
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	4798      	blx	r3
 800935c:	e001      	b.n	8009362 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800935e:	2302      	movs	r3, #2
 8009360:	e000      	b.n	8009364 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3718      	adds	r7, #24
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009374:	2340      	movs	r3, #64	; 0x40
 8009376:	2200      	movs	r2, #0
 8009378:	2100      	movs	r1, #0
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f001 fa03 	bl	800a786 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2201      	movs	r2, #1
 8009384:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2240      	movs	r2, #64	; 0x40
 800938c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009390:	2340      	movs	r3, #64	; 0x40
 8009392:	2200      	movs	r2, #0
 8009394:	2180      	movs	r1, #128	; 0x80
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f001 f9f5 	bl	800a786 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2240      	movs	r2, #64	; 0x40
 80093a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d009      	beq.n	80093e4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	6852      	ldr	r2, [r2, #4]
 80093dc:	b2d2      	uxtb	r2, r2
 80093de:	4611      	mov	r1, r2
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	4798      	blx	r3
  }

  return USBD_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3708      	adds	r7, #8
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b083      	sub	sp, #12
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	460b      	mov	r3, r1
 80093f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	78fa      	ldrb	r2, [r7, #3]
 80093fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	370c      	adds	r7, #12
 8009406:	46bd      	mov	sp, r7
 8009408:	bc80      	pop	{r7}
 800940a:	4770      	bx	lr

0800940c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2204      	movs	r2, #4
 8009424:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	370c      	adds	r7, #12
 800942e:	46bd      	mov	sp, r7
 8009430:	bc80      	pop	{r7}
 8009432:	4770      	bx	lr

08009434 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009442:	2b04      	cmp	r3, #4
 8009444:	d105      	bne.n	8009452 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	bc80      	pop	{r7}
 800945c:	4770      	bx	lr

0800945e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b082      	sub	sp, #8
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800946c:	2b03      	cmp	r3, #3
 800946e:	d10b      	bne.n	8009488 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009476:	69db      	ldr	r3, [r3, #28]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d005      	beq.n	8009488 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009482:	69db      	ldr	r3, [r3, #28]
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
	...

08009494 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800949e:	2300      	movs	r3, #0
 80094a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094aa:	2b40      	cmp	r3, #64	; 0x40
 80094ac:	d005      	beq.n	80094ba <USBD_StdDevReq+0x26>
 80094ae:	2b40      	cmp	r3, #64	; 0x40
 80094b0:	d84f      	bhi.n	8009552 <USBD_StdDevReq+0xbe>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d009      	beq.n	80094ca <USBD_StdDevReq+0x36>
 80094b6:	2b20      	cmp	r3, #32
 80094b8:	d14b      	bne.n	8009552 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	4798      	blx	r3
      break;
 80094c8:	e048      	b.n	800955c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	785b      	ldrb	r3, [r3, #1]
 80094ce:	2b09      	cmp	r3, #9
 80094d0:	d839      	bhi.n	8009546 <USBD_StdDevReq+0xb2>
 80094d2:	a201      	add	r2, pc, #4	; (adr r2, 80094d8 <USBD_StdDevReq+0x44>)
 80094d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d8:	08009529 	.word	0x08009529
 80094dc:	0800953d 	.word	0x0800953d
 80094e0:	08009547 	.word	0x08009547
 80094e4:	08009533 	.word	0x08009533
 80094e8:	08009547 	.word	0x08009547
 80094ec:	0800950b 	.word	0x0800950b
 80094f0:	08009501 	.word	0x08009501
 80094f4:	08009547 	.word	0x08009547
 80094f8:	0800951f 	.word	0x0800951f
 80094fc:	08009515 	.word	0x08009515
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f9dc 	bl	80098c0 <USBD_GetDescriptor>
          break;
 8009508:	e022      	b.n	8009550 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fb3f 	bl	8009b90 <USBD_SetAddress>
          break;
 8009512:	e01d      	b.n	8009550 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009514:	6839      	ldr	r1, [r7, #0]
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fb7e 	bl	8009c18 <USBD_SetConfig>
          break;
 800951c:	e018      	b.n	8009550 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 fc07 	bl	8009d34 <USBD_GetConfig>
          break;
 8009526:	e013      	b.n	8009550 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009528:	6839      	ldr	r1, [r7, #0]
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fc37 	bl	8009d9e <USBD_GetStatus>
          break;
 8009530:	e00e      	b.n	8009550 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 fc65 	bl	8009e04 <USBD_SetFeature>
          break;
 800953a:	e009      	b.n	8009550 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fc74 	bl	8009e2c <USBD_ClrFeature>
          break;
 8009544:	e004      	b.n	8009550 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009546:	6839      	ldr	r1, [r7, #0]
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 fccc 	bl	8009ee6 <USBD_CtlError>
          break;
 800954e:	bf00      	nop
      }
      break;
 8009550:	e004      	b.n	800955c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009552:	6839      	ldr	r1, [r7, #0]
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 fcc6 	bl	8009ee6 <USBD_CtlError>
      break;
 800955a:	bf00      	nop
  }

  return ret;
 800955c:	7bfb      	ldrb	r3, [r7, #15]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop

08009568 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009572:	2300      	movs	r3, #0
 8009574:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800957e:	2b40      	cmp	r3, #64	; 0x40
 8009580:	d005      	beq.n	800958e <USBD_StdItfReq+0x26>
 8009582:	2b40      	cmp	r3, #64	; 0x40
 8009584:	d82e      	bhi.n	80095e4 <USBD_StdItfReq+0x7c>
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <USBD_StdItfReq+0x26>
 800958a:	2b20      	cmp	r3, #32
 800958c:	d12a      	bne.n	80095e4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009594:	3b01      	subs	r3, #1
 8009596:	2b02      	cmp	r3, #2
 8009598:	d81d      	bhi.n	80095d6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	889b      	ldrh	r3, [r3, #4]
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d813      	bhi.n	80095cc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	6839      	ldr	r1, [r7, #0]
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	4798      	blx	r3
 80095b2:	4603      	mov	r3, r0
 80095b4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	88db      	ldrh	r3, [r3, #6]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d110      	bne.n	80095e0 <USBD_StdItfReq+0x78>
 80095be:	7bfb      	ldrb	r3, [r7, #15]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10d      	bne.n	80095e0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fd56 	bl	800a076 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80095ca:	e009      	b.n	80095e0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fc89 	bl	8009ee6 <USBD_CtlError>
          break;
 80095d4:	e004      	b.n	80095e0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80095d6:	6839      	ldr	r1, [r7, #0]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fc84 	bl	8009ee6 <USBD_CtlError>
          break;
 80095de:	e000      	b.n	80095e2 <USBD_StdItfReq+0x7a>
          break;
 80095e0:	bf00      	nop
      }
      break;
 80095e2:	e004      	b.n	80095ee <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80095e4:	6839      	ldr	r1, [r7, #0]
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fc7d 	bl	8009ee6 <USBD_CtlError>
      break;
 80095ec:	bf00      	nop
  }

  return USBD_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	889b      	ldrh	r3, [r3, #4]
 800960a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009614:	2b40      	cmp	r3, #64	; 0x40
 8009616:	d007      	beq.n	8009628 <USBD_StdEPReq+0x30>
 8009618:	2b40      	cmp	r3, #64	; 0x40
 800961a:	f200 8146 	bhi.w	80098aa <USBD_StdEPReq+0x2b2>
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00a      	beq.n	8009638 <USBD_StdEPReq+0x40>
 8009622:	2b20      	cmp	r3, #32
 8009624:	f040 8141 	bne.w	80098aa <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	6839      	ldr	r1, [r7, #0]
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	4798      	blx	r3
      break;
 8009636:	e13d      	b.n	80098b4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009640:	2b20      	cmp	r3, #32
 8009642:	d10a      	bne.n	800965a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	4798      	blx	r3
 8009652:	4603      	mov	r3, r0
 8009654:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009656:	7bfb      	ldrb	r3, [r7, #15]
 8009658:	e12d      	b.n	80098b6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	785b      	ldrb	r3, [r3, #1]
 800965e:	2b03      	cmp	r3, #3
 8009660:	d007      	beq.n	8009672 <USBD_StdEPReq+0x7a>
 8009662:	2b03      	cmp	r3, #3
 8009664:	f300 811b 	bgt.w	800989e <USBD_StdEPReq+0x2a6>
 8009668:	2b00      	cmp	r3, #0
 800966a:	d072      	beq.n	8009752 <USBD_StdEPReq+0x15a>
 800966c:	2b01      	cmp	r3, #1
 800966e:	d03a      	beq.n	80096e6 <USBD_StdEPReq+0xee>
 8009670:	e115      	b.n	800989e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009678:	2b02      	cmp	r3, #2
 800967a:	d002      	beq.n	8009682 <USBD_StdEPReq+0x8a>
 800967c:	2b03      	cmp	r3, #3
 800967e:	d015      	beq.n	80096ac <USBD_StdEPReq+0xb4>
 8009680:	e02b      	b.n	80096da <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009682:	7bbb      	ldrb	r3, [r7, #14]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00c      	beq.n	80096a2 <USBD_StdEPReq+0xaa>
 8009688:	7bbb      	ldrb	r3, [r7, #14]
 800968a:	2b80      	cmp	r3, #128	; 0x80
 800968c:	d009      	beq.n	80096a2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800968e:	7bbb      	ldrb	r3, [r7, #14]
 8009690:	4619      	mov	r1, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f001 f8bc 	bl	800a810 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009698:	2180      	movs	r1, #128	; 0x80
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f001 f8b8 	bl	800a810 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096a0:	e020      	b.n	80096e4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 fc1e 	bl	8009ee6 <USBD_CtlError>
              break;
 80096aa:	e01b      	b.n	80096e4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	885b      	ldrh	r3, [r3, #2]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10e      	bne.n	80096d2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80096b4:	7bbb      	ldrb	r3, [r7, #14]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00b      	beq.n	80096d2 <USBD_StdEPReq+0xda>
 80096ba:	7bbb      	ldrb	r3, [r7, #14]
 80096bc:	2b80      	cmp	r3, #128	; 0x80
 80096be:	d008      	beq.n	80096d2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	88db      	ldrh	r3, [r3, #6]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d104      	bne.n	80096d2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80096c8:	7bbb      	ldrb	r3, [r7, #14]
 80096ca:	4619      	mov	r1, r3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f001 f89f 	bl	800a810 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 fccf 	bl	800a076 <USBD_CtlSendStatus>

              break;
 80096d8:	e004      	b.n	80096e4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80096da:	6839      	ldr	r1, [r7, #0]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 fc02 	bl	8009ee6 <USBD_CtlError>
              break;
 80096e2:	bf00      	nop
          }
          break;
 80096e4:	e0e0      	b.n	80098a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	d002      	beq.n	80096f6 <USBD_StdEPReq+0xfe>
 80096f0:	2b03      	cmp	r3, #3
 80096f2:	d015      	beq.n	8009720 <USBD_StdEPReq+0x128>
 80096f4:	e026      	b.n	8009744 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096f6:	7bbb      	ldrb	r3, [r7, #14]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00c      	beq.n	8009716 <USBD_StdEPReq+0x11e>
 80096fc:	7bbb      	ldrb	r3, [r7, #14]
 80096fe:	2b80      	cmp	r3, #128	; 0x80
 8009700:	d009      	beq.n	8009716 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009702:	7bbb      	ldrb	r3, [r7, #14]
 8009704:	4619      	mov	r1, r3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f001 f882 	bl	800a810 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800970c:	2180      	movs	r1, #128	; 0x80
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f001 f87e 	bl	800a810 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009714:	e01c      	b.n	8009750 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009716:	6839      	ldr	r1, [r7, #0]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fbe4 	bl	8009ee6 <USBD_CtlError>
              break;
 800971e:	e017      	b.n	8009750 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	885b      	ldrh	r3, [r3, #2]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d112      	bne.n	800974e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009728:	7bbb      	ldrb	r3, [r7, #14]
 800972a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800972e:	2b00      	cmp	r3, #0
 8009730:	d004      	beq.n	800973c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009732:	7bbb      	ldrb	r3, [r7, #14]
 8009734:	4619      	mov	r1, r3
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f001 f889 	bl	800a84e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 fc9a 	bl	800a076 <USBD_CtlSendStatus>
              }
              break;
 8009742:	e004      	b.n	800974e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009744:	6839      	ldr	r1, [r7, #0]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fbcd 	bl	8009ee6 <USBD_CtlError>
              break;
 800974c:	e000      	b.n	8009750 <USBD_StdEPReq+0x158>
              break;
 800974e:	bf00      	nop
          }
          break;
 8009750:	e0aa      	b.n	80098a8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009758:	2b02      	cmp	r3, #2
 800975a:	d002      	beq.n	8009762 <USBD_StdEPReq+0x16a>
 800975c:	2b03      	cmp	r3, #3
 800975e:	d032      	beq.n	80097c6 <USBD_StdEPReq+0x1ce>
 8009760:	e097      	b.n	8009892 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009762:	7bbb      	ldrb	r3, [r7, #14]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d007      	beq.n	8009778 <USBD_StdEPReq+0x180>
 8009768:	7bbb      	ldrb	r3, [r7, #14]
 800976a:	2b80      	cmp	r3, #128	; 0x80
 800976c:	d004      	beq.n	8009778 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fbb8 	bl	8009ee6 <USBD_CtlError>
                break;
 8009776:	e091      	b.n	800989c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009778:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800977c:	2b00      	cmp	r3, #0
 800977e:	da0b      	bge.n	8009798 <USBD_StdEPReq+0x1a0>
 8009780:	7bbb      	ldrb	r3, [r7, #14]
 8009782:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009786:	4613      	mov	r3, r2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	4413      	add	r3, r2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	3310      	adds	r3, #16
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	4413      	add	r3, r2
 8009794:	3304      	adds	r3, #4
 8009796:	e00b      	b.n	80097b0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009798:	7bbb      	ldrb	r3, [r7, #14]
 800979a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800979e:	4613      	mov	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4413      	add	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	4413      	add	r3, r2
 80097ae:	3304      	adds	r3, #4
 80097b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	2200      	movs	r2, #0
 80097b6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	2202      	movs	r2, #2
 80097bc:	4619      	mov	r1, r3
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fbfb 	bl	8009fba <USBD_CtlSendData>
              break;
 80097c4:	e06a      	b.n	800989c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80097c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	da11      	bge.n	80097f2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80097ce:	7bbb      	ldrb	r3, [r7, #14]
 80097d0:	f003 020f 	and.w	r2, r3, #15
 80097d4:	6879      	ldr	r1, [r7, #4]
 80097d6:	4613      	mov	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	4413      	add	r3, r2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	440b      	add	r3, r1
 80097e0:	3318      	adds	r3, #24
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d117      	bne.n	8009818 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80097e8:	6839      	ldr	r1, [r7, #0]
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fb7b 	bl	8009ee6 <USBD_CtlError>
                  break;
 80097f0:	e054      	b.n	800989c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80097f2:	7bbb      	ldrb	r3, [r7, #14]
 80097f4:	f003 020f 	and.w	r2, r3, #15
 80097f8:	6879      	ldr	r1, [r7, #4]
 80097fa:	4613      	mov	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4413      	add	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	440b      	add	r3, r1
 8009804:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d104      	bne.n	8009818 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fb68 	bl	8009ee6 <USBD_CtlError>
                  break;
 8009816:	e041      	b.n	800989c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009818:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800981c:	2b00      	cmp	r3, #0
 800981e:	da0b      	bge.n	8009838 <USBD_StdEPReq+0x240>
 8009820:	7bbb      	ldrb	r3, [r7, #14]
 8009822:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009826:	4613      	mov	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	4413      	add	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	3310      	adds	r3, #16
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	4413      	add	r3, r2
 8009834:	3304      	adds	r3, #4
 8009836:	e00b      	b.n	8009850 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009838:	7bbb      	ldrb	r3, [r7, #14]
 800983a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800983e:	4613      	mov	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4413      	add	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	4413      	add	r3, r2
 800984e:	3304      	adds	r3, #4
 8009850:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009852:	7bbb      	ldrb	r3, [r7, #14]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d002      	beq.n	800985e <USBD_StdEPReq+0x266>
 8009858:	7bbb      	ldrb	r3, [r7, #14]
 800985a:	2b80      	cmp	r3, #128	; 0x80
 800985c:	d103      	bne.n	8009866 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	2200      	movs	r2, #0
 8009862:	601a      	str	r2, [r3, #0]
 8009864:	e00e      	b.n	8009884 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009866:	7bbb      	ldrb	r3, [r7, #14]
 8009868:	4619      	mov	r1, r3
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f001 f80e 	bl	800a88c <USBD_LL_IsStallEP>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d003      	beq.n	800987e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	2201      	movs	r2, #1
 800987a:	601a      	str	r2, [r3, #0]
 800987c:	e002      	b.n	8009884 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	2200      	movs	r2, #0
 8009882:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	2202      	movs	r2, #2
 8009888:	4619      	mov	r1, r3
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fb95 	bl	8009fba <USBD_CtlSendData>
              break;
 8009890:	e004      	b.n	800989c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009892:	6839      	ldr	r1, [r7, #0]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fb26 	bl	8009ee6 <USBD_CtlError>
              break;
 800989a:	bf00      	nop
          }
          break;
 800989c:	e004      	b.n	80098a8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800989e:	6839      	ldr	r1, [r7, #0]
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 fb20 	bl	8009ee6 <USBD_CtlError>
          break;
 80098a6:	bf00      	nop
      }
      break;
 80098a8:	e004      	b.n	80098b4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80098aa:	6839      	ldr	r1, [r7, #0]
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fb1a 	bl	8009ee6 <USBD_CtlError>
      break;
 80098b2:	bf00      	nop
  }

  return ret;
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
	...

080098c0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80098ca:	2300      	movs	r3, #0
 80098cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80098ce:	2300      	movs	r3, #0
 80098d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80098d2:	2300      	movs	r3, #0
 80098d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	885b      	ldrh	r3, [r3, #2]
 80098da:	0a1b      	lsrs	r3, r3, #8
 80098dc:	b29b      	uxth	r3, r3
 80098de:	3b01      	subs	r3, #1
 80098e0:	2b06      	cmp	r3, #6
 80098e2:	f200 8128 	bhi.w	8009b36 <USBD_GetDescriptor+0x276>
 80098e6:	a201      	add	r2, pc, #4	; (adr r2, 80098ec <USBD_GetDescriptor+0x2c>)
 80098e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ec:	08009909 	.word	0x08009909
 80098f0:	08009921 	.word	0x08009921
 80098f4:	08009961 	.word	0x08009961
 80098f8:	08009b37 	.word	0x08009b37
 80098fc:	08009b37 	.word	0x08009b37
 8009900:	08009ad7 	.word	0x08009ad7
 8009904:	08009b03 	.word	0x08009b03
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	7c12      	ldrb	r2, [r2, #16]
 8009914:	f107 0108 	add.w	r1, r7, #8
 8009918:	4610      	mov	r0, r2
 800991a:	4798      	blx	r3
 800991c:	60f8      	str	r0, [r7, #12]
      break;
 800991e:	e112      	b.n	8009b46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	7c1b      	ldrb	r3, [r3, #16]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10d      	bne.n	8009944 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800992e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009930:	f107 0208 	add.w	r2, r7, #8
 8009934:	4610      	mov	r0, r2
 8009936:	4798      	blx	r3
 8009938:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	3301      	adds	r3, #1
 800993e:	2202      	movs	r2, #2
 8009940:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009942:	e100      	b.n	8009b46 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800994a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994c:	f107 0208 	add.w	r2, r7, #8
 8009950:	4610      	mov	r0, r2
 8009952:	4798      	blx	r3
 8009954:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	3301      	adds	r3, #1
 800995a:	2202      	movs	r2, #2
 800995c:	701a      	strb	r2, [r3, #0]
      break;
 800995e:	e0f2      	b.n	8009b46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	885b      	ldrh	r3, [r3, #2]
 8009964:	b2db      	uxtb	r3, r3
 8009966:	2b05      	cmp	r3, #5
 8009968:	f200 80ac 	bhi.w	8009ac4 <USBD_GetDescriptor+0x204>
 800996c:	a201      	add	r2, pc, #4	; (adr r2, 8009974 <USBD_GetDescriptor+0xb4>)
 800996e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009972:	bf00      	nop
 8009974:	0800998d 	.word	0x0800998d
 8009978:	080099c1 	.word	0x080099c1
 800997c:	080099f5 	.word	0x080099f5
 8009980:	08009a29 	.word	0x08009a29
 8009984:	08009a5d 	.word	0x08009a5d
 8009988:	08009a91 	.word	0x08009a91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00b      	beq.n	80099b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	687a      	ldr	r2, [r7, #4]
 80099a2:	7c12      	ldrb	r2, [r2, #16]
 80099a4:	f107 0108 	add.w	r1, r7, #8
 80099a8:	4610      	mov	r0, r2
 80099aa:	4798      	blx	r3
 80099ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ae:	e091      	b.n	8009ad4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099b0:	6839      	ldr	r1, [r7, #0]
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fa97 	bl	8009ee6 <USBD_CtlError>
            err++;
 80099b8:	7afb      	ldrb	r3, [r7, #11]
 80099ba:	3301      	adds	r3, #1
 80099bc:	72fb      	strb	r3, [r7, #11]
          break;
 80099be:	e089      	b.n	8009ad4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00b      	beq.n	80099e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	7c12      	ldrb	r2, [r2, #16]
 80099d8:	f107 0108 	add.w	r1, r7, #8
 80099dc:	4610      	mov	r0, r2
 80099de:	4798      	blx	r3
 80099e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099e2:	e077      	b.n	8009ad4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fa7d 	bl	8009ee6 <USBD_CtlError>
            err++;
 80099ec:	7afb      	ldrb	r3, [r7, #11]
 80099ee:	3301      	adds	r3, #1
 80099f0:	72fb      	strb	r3, [r7, #11]
          break;
 80099f2:	e06f      	b.n	8009ad4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d00b      	beq.n	8009a18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	7c12      	ldrb	r2, [r2, #16]
 8009a0c:	f107 0108 	add.w	r1, r7, #8
 8009a10:	4610      	mov	r0, r2
 8009a12:	4798      	blx	r3
 8009a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a16:	e05d      	b.n	8009ad4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a18:	6839      	ldr	r1, [r7, #0]
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fa63 	bl	8009ee6 <USBD_CtlError>
            err++;
 8009a20:	7afb      	ldrb	r3, [r7, #11]
 8009a22:	3301      	adds	r3, #1
 8009a24:	72fb      	strb	r3, [r7, #11]
          break;
 8009a26:	e055      	b.n	8009ad4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00b      	beq.n	8009a4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	7c12      	ldrb	r2, [r2, #16]
 8009a40:	f107 0108 	add.w	r1, r7, #8
 8009a44:	4610      	mov	r0, r2
 8009a46:	4798      	blx	r3
 8009a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a4a:	e043      	b.n	8009ad4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a4c:	6839      	ldr	r1, [r7, #0]
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fa49 	bl	8009ee6 <USBD_CtlError>
            err++;
 8009a54:	7afb      	ldrb	r3, [r7, #11]
 8009a56:	3301      	adds	r3, #1
 8009a58:	72fb      	strb	r3, [r7, #11]
          break;
 8009a5a:	e03b      	b.n	8009ad4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a62:	695b      	ldr	r3, [r3, #20]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00b      	beq.n	8009a80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a6e:	695b      	ldr	r3, [r3, #20]
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	7c12      	ldrb	r2, [r2, #16]
 8009a74:	f107 0108 	add.w	r1, r7, #8
 8009a78:	4610      	mov	r0, r2
 8009a7a:	4798      	blx	r3
 8009a7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a7e:	e029      	b.n	8009ad4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a80:	6839      	ldr	r1, [r7, #0]
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 fa2f 	bl	8009ee6 <USBD_CtlError>
            err++;
 8009a88:	7afb      	ldrb	r3, [r7, #11]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a8e:	e021      	b.n	8009ad4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a96:	699b      	ldr	r3, [r3, #24]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00b      	beq.n	8009ab4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	7c12      	ldrb	r2, [r2, #16]
 8009aa8:	f107 0108 	add.w	r1, r7, #8
 8009aac:	4610      	mov	r0, r2
 8009aae:	4798      	blx	r3
 8009ab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ab2:	e00f      	b.n	8009ad4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ab4:	6839      	ldr	r1, [r7, #0]
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fa15 	bl	8009ee6 <USBD_CtlError>
            err++;
 8009abc:	7afb      	ldrb	r3, [r7, #11]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ac2:	e007      	b.n	8009ad4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fa0d 	bl	8009ee6 <USBD_CtlError>
          err++;
 8009acc:	7afb      	ldrb	r3, [r7, #11]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009ad2:	e038      	b.n	8009b46 <USBD_GetDescriptor+0x286>
 8009ad4:	e037      	b.n	8009b46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	7c1b      	ldrb	r3, [r3, #16]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d109      	bne.n	8009af2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ae6:	f107 0208 	add.w	r2, r7, #8
 8009aea:	4610      	mov	r0, r2
 8009aec:	4798      	blx	r3
 8009aee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009af0:	e029      	b.n	8009b46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f9f6 	bl	8009ee6 <USBD_CtlError>
        err++;
 8009afa:	7afb      	ldrb	r3, [r7, #11]
 8009afc:	3301      	adds	r3, #1
 8009afe:	72fb      	strb	r3, [r7, #11]
      break;
 8009b00:	e021      	b.n	8009b46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	7c1b      	ldrb	r3, [r3, #16]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d10d      	bne.n	8009b26 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b12:	f107 0208 	add.w	r2, r7, #8
 8009b16:	4610      	mov	r0, r2
 8009b18:	4798      	blx	r3
 8009b1a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	2207      	movs	r2, #7
 8009b22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b24:	e00f      	b.n	8009b46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b26:	6839      	ldr	r1, [r7, #0]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f9dc 	bl	8009ee6 <USBD_CtlError>
        err++;
 8009b2e:	7afb      	ldrb	r3, [r7, #11]
 8009b30:	3301      	adds	r3, #1
 8009b32:	72fb      	strb	r3, [r7, #11]
      break;
 8009b34:	e007      	b.n	8009b46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009b36:	6839      	ldr	r1, [r7, #0]
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 f9d4 	bl	8009ee6 <USBD_CtlError>
      err++;
 8009b3e:	7afb      	ldrb	r3, [r7, #11]
 8009b40:	3301      	adds	r3, #1
 8009b42:	72fb      	strb	r3, [r7, #11]
      break;
 8009b44:	bf00      	nop
  }

  if (err != 0U)
 8009b46:	7afb      	ldrb	r3, [r7, #11]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d11c      	bne.n	8009b86 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009b4c:	893b      	ldrh	r3, [r7, #8]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d011      	beq.n	8009b76 <USBD_GetDescriptor+0x2b6>
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	88db      	ldrh	r3, [r3, #6]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00d      	beq.n	8009b76 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	88da      	ldrh	r2, [r3, #6]
 8009b5e:	893b      	ldrh	r3, [r7, #8]
 8009b60:	4293      	cmp	r3, r2
 8009b62:	bf28      	it	cs
 8009b64:	4613      	movcs	r3, r2
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b6a:	893b      	ldrh	r3, [r7, #8]
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	68f9      	ldr	r1, [r7, #12]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 fa22 	bl	8009fba <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	88db      	ldrh	r3, [r3, #6]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d104      	bne.n	8009b88 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 fa79 	bl	800a076 <USBD_CtlSendStatus>
 8009b84:	e000      	b.n	8009b88 <USBD_GetDescriptor+0x2c8>
    return;
 8009b86:	bf00      	nop
    }
  }
}
 8009b88:	3710      	adds	r7, #16
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	bf00      	nop

08009b90 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	889b      	ldrh	r3, [r3, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d130      	bne.n	8009c04 <USBD_SetAddress+0x74>
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	88db      	ldrh	r3, [r3, #6]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d12c      	bne.n	8009c04 <USBD_SetAddress+0x74>
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	885b      	ldrh	r3, [r3, #2]
 8009bae:	2b7f      	cmp	r3, #127	; 0x7f
 8009bb0:	d828      	bhi.n	8009c04 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	885b      	ldrh	r3, [r3, #2]
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bc4:	2b03      	cmp	r3, #3
 8009bc6:	d104      	bne.n	8009bd2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009bc8:	6839      	ldr	r1, [r7, #0]
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f98b 	bl	8009ee6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bd0:	e01d      	b.n	8009c0e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	7bfa      	ldrb	r2, [r7, #15]
 8009bd6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009bda:	7bfb      	ldrb	r3, [r7, #15]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fe80 	bl	800a8e4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fa46 	bl	800a076 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009bea:	7bfb      	ldrb	r3, [r7, #15]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d004      	beq.n	8009bfa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2202      	movs	r2, #2
 8009bf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bf8:	e009      	b.n	8009c0e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c02:	e004      	b.n	8009c0e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f96d 	bl	8009ee6 <USBD_CtlError>
  }
}
 8009c0c:	bf00      	nop
 8009c0e:	bf00      	nop
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
	...

08009c18 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	885b      	ldrh	r3, [r3, #2]
 8009c26:	b2da      	uxtb	r2, r3
 8009c28:	4b41      	ldr	r3, [pc, #260]	; (8009d30 <USBD_SetConfig+0x118>)
 8009c2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c2c:	4b40      	ldr	r3, [pc, #256]	; (8009d30 <USBD_SetConfig+0x118>)
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d904      	bls.n	8009c3e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009c34:	6839      	ldr	r1, [r7, #0]
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 f955 	bl	8009ee6 <USBD_CtlError>
 8009c3c:	e075      	b.n	8009d2a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c44:	2b02      	cmp	r3, #2
 8009c46:	d002      	beq.n	8009c4e <USBD_SetConfig+0x36>
 8009c48:	2b03      	cmp	r3, #3
 8009c4a:	d023      	beq.n	8009c94 <USBD_SetConfig+0x7c>
 8009c4c:	e062      	b.n	8009d14 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009c4e:	4b38      	ldr	r3, [pc, #224]	; (8009d30 <USBD_SetConfig+0x118>)
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d01a      	beq.n	8009c8c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009c56:	4b36      	ldr	r3, [pc, #216]	; (8009d30 <USBD_SetConfig+0x118>)
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2203      	movs	r2, #3
 8009c64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009c68:	4b31      	ldr	r3, [pc, #196]	; (8009d30 <USBD_SetConfig+0x118>)
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7ff f9e7 	bl	8009042 <USBD_SetClassConfig>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d104      	bne.n	8009c84 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 f932 	bl	8009ee6 <USBD_CtlError>
            return;
 8009c82:	e052      	b.n	8009d2a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 f9f6 	bl	800a076 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009c8a:	e04e      	b.n	8009d2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f000 f9f2 	bl	800a076 <USBD_CtlSendStatus>
        break;
 8009c92:	e04a      	b.n	8009d2a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009c94:	4b26      	ldr	r3, [pc, #152]	; (8009d30 <USBD_SetConfig+0x118>)
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d112      	bne.n	8009cc2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2202      	movs	r2, #2
 8009ca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009ca4:	4b22      	ldr	r3, [pc, #136]	; (8009d30 <USBD_SetConfig+0x118>)
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009cae:	4b20      	ldr	r3, [pc, #128]	; (8009d30 <USBD_SetConfig+0x118>)
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f7ff f9e3 	bl	8009080 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f9db 	bl	800a076 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009cc0:	e033      	b.n	8009d2a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009cc2:	4b1b      	ldr	r3, [pc, #108]	; (8009d30 <USBD_SetConfig+0x118>)
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d01d      	beq.n	8009d0c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f7ff f9d1 	bl	8009080 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009cde:	4b14      	ldr	r3, [pc, #80]	; (8009d30 <USBD_SetConfig+0x118>)
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ce8:	4b11      	ldr	r3, [pc, #68]	; (8009d30 <USBD_SetConfig+0x118>)
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	4619      	mov	r1, r3
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f7ff f9a7 	bl	8009042 <USBD_SetClassConfig>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d104      	bne.n	8009d04 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009cfa:	6839      	ldr	r1, [r7, #0]
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 f8f2 	bl	8009ee6 <USBD_CtlError>
            return;
 8009d02:	e012      	b.n	8009d2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 f9b6 	bl	800a076 <USBD_CtlSendStatus>
        break;
 8009d0a:	e00e      	b.n	8009d2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 f9b2 	bl	800a076 <USBD_CtlSendStatus>
        break;
 8009d12:	e00a      	b.n	8009d2a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009d14:	6839      	ldr	r1, [r7, #0]
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 f8e5 	bl	8009ee6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009d1c:	4b04      	ldr	r3, [pc, #16]	; (8009d30 <USBD_SetConfig+0x118>)
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	4619      	mov	r1, r3
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7ff f9ac 	bl	8009080 <USBD_ClrClassConfig>
        break;
 8009d28:	bf00      	nop
    }
  }
}
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	200002ec 	.word	0x200002ec

08009d34 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	88db      	ldrh	r3, [r3, #6]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d004      	beq.n	8009d50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009d46:	6839      	ldr	r1, [r7, #0]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 f8cc 	bl	8009ee6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009d4e:	e022      	b.n	8009d96 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d56:	2b02      	cmp	r3, #2
 8009d58:	dc02      	bgt.n	8009d60 <USBD_GetConfig+0x2c>
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	dc03      	bgt.n	8009d66 <USBD_GetConfig+0x32>
 8009d5e:	e015      	b.n	8009d8c <USBD_GetConfig+0x58>
 8009d60:	2b03      	cmp	r3, #3
 8009d62:	d00b      	beq.n	8009d7c <USBD_GetConfig+0x48>
 8009d64:	e012      	b.n	8009d8c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	3308      	adds	r3, #8
 8009d70:	2201      	movs	r2, #1
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 f920 	bl	8009fba <USBD_CtlSendData>
        break;
 8009d7a:	e00c      	b.n	8009d96 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	3304      	adds	r3, #4
 8009d80:	2201      	movs	r2, #1
 8009d82:	4619      	mov	r1, r3
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 f918 	bl	8009fba <USBD_CtlSendData>
        break;
 8009d8a:	e004      	b.n	8009d96 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009d8c:	6839      	ldr	r1, [r7, #0]
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f8a9 	bl	8009ee6 <USBD_CtlError>
        break;
 8009d94:	bf00      	nop
}
 8009d96:	bf00      	nop
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b082      	sub	sp, #8
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dae:	3b01      	subs	r3, #1
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	d81e      	bhi.n	8009df2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	88db      	ldrh	r3, [r3, #6]
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d004      	beq.n	8009dc6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009dbc:	6839      	ldr	r1, [r7, #0]
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 f891 	bl	8009ee6 <USBD_CtlError>
        break;
 8009dc4:	e01a      	b.n	8009dfc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d005      	beq.n	8009de2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	f043 0202 	orr.w	r2, r3, #2
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	330c      	adds	r3, #12
 8009de6:	2202      	movs	r2, #2
 8009de8:	4619      	mov	r1, r3
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 f8e5 	bl	8009fba <USBD_CtlSendData>
      break;
 8009df0:	e004      	b.n	8009dfc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f876 	bl	8009ee6 <USBD_CtlError>
      break;
 8009dfa:	bf00      	nop
  }
}
 8009dfc:	bf00      	nop
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	885b      	ldrh	r3, [r3, #2]
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d106      	bne.n	8009e24 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f929 	bl	800a076 <USBD_CtlSendStatus>
  }
}
 8009e24:	bf00      	nop
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e3c:	3b01      	subs	r3, #1
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d80b      	bhi.n	8009e5a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	885b      	ldrh	r3, [r3, #2]
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d10c      	bne.n	8009e64 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f90f 	bl	800a076 <USBD_CtlSendStatus>
      }
      break;
 8009e58:	e004      	b.n	8009e64 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009e5a:	6839      	ldr	r1, [r7, #0]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f842 	bl	8009ee6 <USBD_CtlError>
      break;
 8009e62:	e000      	b.n	8009e66 <USBD_ClrFeature+0x3a>
      break;
 8009e64:	bf00      	nop
  }
}
 8009e66:	bf00      	nop
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b083      	sub	sp, #12
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	781a      	ldrb	r2, [r3, #0]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	785a      	ldrb	r2, [r3, #1]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	3302      	adds	r3, #2
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	3303      	adds	r3, #3
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	021b      	lsls	r3, r3, #8
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	4413      	add	r3, r2
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	3305      	adds	r3, #5
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	021b      	lsls	r3, r3, #8
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	4413      	add	r3, r2
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	3306      	adds	r3, #6
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	b29a      	uxth	r2, r3
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	3307      	adds	r3, #7
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	021b      	lsls	r3, r3, #8
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	4413      	add	r3, r2
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	80da      	strh	r2, [r3, #6]

}
 8009edc:	bf00      	nop
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bc80      	pop	{r7}
 8009ee4:	4770      	bx	lr

08009ee6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b082      	sub	sp, #8
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
 8009eee:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009ef0:	2180      	movs	r1, #128	; 0x80
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fc8c 	bl	800a810 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009ef8:	2100      	movs	r1, #0
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fc88 	bl	800a810 <USBD_LL_StallEP>
}
 8009f00:	bf00      	nop
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b086      	sub	sp, #24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009f14:	2300      	movs	r3, #0
 8009f16:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d032      	beq.n	8009f84 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f000 f834 	bl	8009f8c <USBD_GetLen>
 8009f24:	4603      	mov	r3, r0
 8009f26:	3301      	adds	r3, #1
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	005b      	lsls	r3, r3, #1
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
 8009f34:	1c5a      	adds	r2, r3, #1
 8009f36:	75fa      	strb	r2, [r7, #23]
 8009f38:	461a      	mov	r2, r3
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	7812      	ldrb	r2, [r2, #0]
 8009f42:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009f44:	7dfb      	ldrb	r3, [r7, #23]
 8009f46:	1c5a      	adds	r2, r3, #1
 8009f48:	75fa      	strb	r2, [r7, #23]
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	4413      	add	r3, r2
 8009f50:	2203      	movs	r2, #3
 8009f52:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009f54:	e012      	b.n	8009f7c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	1c5a      	adds	r2, r3, #1
 8009f5a:	60fa      	str	r2, [r7, #12]
 8009f5c:	7dfa      	ldrb	r2, [r7, #23]
 8009f5e:	1c51      	adds	r1, r2, #1
 8009f60:	75f9      	strb	r1, [r7, #23]
 8009f62:	4611      	mov	r1, r2
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	440a      	add	r2, r1
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009f6c:	7dfb      	ldrb	r3, [r7, #23]
 8009f6e:	1c5a      	adds	r2, r3, #1
 8009f70:	75fa      	strb	r2, [r7, #23]
 8009f72:	461a      	mov	r2, r3
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	4413      	add	r3, r2
 8009f78:	2200      	movs	r2, #0
 8009f7a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d1e8      	bne.n	8009f56 <USBD_GetString+0x4e>
    }
  }
}
 8009f84:	bf00      	nop
 8009f86:	3718      	adds	r7, #24
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009f94:	2300      	movs	r3, #0
 8009f96:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009f98:	e005      	b.n	8009fa6 <USBD_GetLen+0x1a>
  {
    len++;
 8009f9a:	7bfb      	ldrb	r3, [r7, #15]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1f5      	bne.n	8009f9a <USBD_GetLen+0xe>
  }

  return len;
 8009fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3714      	adds	r7, #20
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bc80      	pop	{r7}
 8009fb8:	4770      	bx	lr

08009fba <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b084      	sub	sp, #16
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	60f8      	str	r0, [r7, #12]
 8009fc2:	60b9      	str	r1, [r7, #8]
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2202      	movs	r2, #2
 8009fcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009fd0:	88fa      	ldrh	r2, [r7, #6]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009fd6:	88fa      	ldrh	r2, [r7, #6]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fdc:	88fb      	ldrh	r3, [r7, #6]
 8009fde:	68ba      	ldr	r2, [r7, #8]
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	68f8      	ldr	r0, [r7, #12]
 8009fe4:	f000 fc9d 	bl	800a922 <USBD_LL_Transmit>

  return USBD_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b084      	sub	sp, #16
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	60f8      	str	r0, [r7, #12]
 8009ffa:	60b9      	str	r1, [r7, #8]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a000:	88fb      	ldrh	r3, [r7, #6]
 800a002:	68ba      	ldr	r2, [r7, #8]
 800a004:	2100      	movs	r1, #0
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f000 fc8b 	bl	800a922 <USBD_LL_Transmit>

  return USBD_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a016:	b580      	push	{r7, lr}
 800a018:	b084      	sub	sp, #16
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	60f8      	str	r0, [r7, #12]
 800a01e:	60b9      	str	r1, [r7, #8]
 800a020:	4613      	mov	r3, r2
 800a022:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2203      	movs	r2, #3
 800a028:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a02c:	88fa      	ldrh	r2, [r7, #6]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a034:	88fa      	ldrh	r2, [r7, #6]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a03c:	88fb      	ldrh	r3, [r7, #6]
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	2100      	movs	r1, #0
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f000 fc90 	bl	800a968 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a052:	b580      	push	{r7, lr}
 800a054:	b084      	sub	sp, #16
 800a056:	af00      	add	r7, sp, #0
 800a058:	60f8      	str	r0, [r7, #12]
 800a05a:	60b9      	str	r1, [r7, #8]
 800a05c:	4613      	mov	r3, r2
 800a05e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a060:	88fb      	ldrh	r3, [r7, #6]
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	2100      	movs	r1, #0
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f000 fc7e 	bl	800a968 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b082      	sub	sp, #8
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2204      	movs	r2, #4
 800a082:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a086:	2300      	movs	r3, #0
 800a088:	2200      	movs	r2, #0
 800a08a:	2100      	movs	r1, #0
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f000 fc48 	bl	800a922 <USBD_LL_Transmit>

  return USBD_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2205      	movs	r2, #5
 800a0a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 fc58 	bl	800a968 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3708      	adds	r7, #8
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
	...

0800a0c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	4912      	ldr	r1, [pc, #72]	; (800a114 <MX_USB_DEVICE_Init+0x50>)
 800a0cc:	4812      	ldr	r0, [pc, #72]	; (800a118 <MX_USB_DEVICE_Init+0x54>)
 800a0ce:	f7fe ff5e 	bl	8008f8e <USBD_Init>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d001      	beq.n	800a0dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a0d8:	f7f7 fcb1 	bl	8001a3e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a0dc:	490f      	ldr	r1, [pc, #60]	; (800a11c <MX_USB_DEVICE_Init+0x58>)
 800a0de:	480e      	ldr	r0, [pc, #56]	; (800a118 <MX_USB_DEVICE_Init+0x54>)
 800a0e0:	f7fe ff80 	bl	8008fe4 <USBD_RegisterClass>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d001      	beq.n	800a0ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a0ea:	f7f7 fca8 	bl	8001a3e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a0ee:	490c      	ldr	r1, [pc, #48]	; (800a120 <MX_USB_DEVICE_Init+0x5c>)
 800a0f0:	4809      	ldr	r0, [pc, #36]	; (800a118 <MX_USB_DEVICE_Init+0x54>)
 800a0f2:	f7fe feb1 	bl	8008e58 <USBD_CDC_RegisterInterface>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a0fc:	f7f7 fc9f 	bl	8001a3e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a100:	4805      	ldr	r0, [pc, #20]	; (800a118 <MX_USB_DEVICE_Init+0x54>)
 800a102:	f7fe ff88 	bl	8009016 <USBD_Start>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d001      	beq.n	800a110 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a10c:	f7f7 fc97 	bl	8001a3e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a110:	bf00      	nop
 800a112:	bd80      	pop	{r7, pc}
 800a114:	200001ac 	.word	0x200001ac
 800a118:	200002f0 	.word	0x200002f0
 800a11c:	20000098 	.word	0x20000098
 800a120:	2000019c 	.word	0x2000019c

0800a124 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a128:	2200      	movs	r2, #0
 800a12a:	4905      	ldr	r1, [pc, #20]	; (800a140 <CDC_Init_FS+0x1c>)
 800a12c:	4805      	ldr	r0, [pc, #20]	; (800a144 <CDC_Init_FS+0x20>)
 800a12e:	f7fe fea9 	bl	8008e84 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a132:	4905      	ldr	r1, [pc, #20]	; (800a148 <CDC_Init_FS+0x24>)
 800a134:	4803      	ldr	r0, [pc, #12]	; (800a144 <CDC_Init_FS+0x20>)
 800a136:	f7fe febe 	bl	8008eb6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a13a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	200005f4 	.word	0x200005f4
 800a144:	200002f0 	.word	0x200002f0
 800a148:	200005b4 	.word	0x200005b4

0800a14c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a14c:	b480      	push	{r7}
 800a14e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a150:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a152:	4618      	mov	r0, r3
 800a154:	46bd      	mov	sp, r7
 800a156:	bc80      	pop	{r7}
 800a158:	4770      	bx	lr
	...

0800a15c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	4603      	mov	r3, r0
 800a164:	6039      	str	r1, [r7, #0]
 800a166:	71fb      	strb	r3, [r7, #7]
 800a168:	4613      	mov	r3, r2
 800a16a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a16c:	79fb      	ldrb	r3, [r7, #7]
 800a16e:	2b23      	cmp	r3, #35	; 0x23
 800a170:	d84a      	bhi.n	800a208 <CDC_Control_FS+0xac>
 800a172:	a201      	add	r2, pc, #4	; (adr r2, 800a178 <CDC_Control_FS+0x1c>)
 800a174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a178:	0800a209 	.word	0x0800a209
 800a17c:	0800a209 	.word	0x0800a209
 800a180:	0800a209 	.word	0x0800a209
 800a184:	0800a209 	.word	0x0800a209
 800a188:	0800a209 	.word	0x0800a209
 800a18c:	0800a209 	.word	0x0800a209
 800a190:	0800a209 	.word	0x0800a209
 800a194:	0800a209 	.word	0x0800a209
 800a198:	0800a209 	.word	0x0800a209
 800a19c:	0800a209 	.word	0x0800a209
 800a1a0:	0800a209 	.word	0x0800a209
 800a1a4:	0800a209 	.word	0x0800a209
 800a1a8:	0800a209 	.word	0x0800a209
 800a1ac:	0800a209 	.word	0x0800a209
 800a1b0:	0800a209 	.word	0x0800a209
 800a1b4:	0800a209 	.word	0x0800a209
 800a1b8:	0800a209 	.word	0x0800a209
 800a1bc:	0800a209 	.word	0x0800a209
 800a1c0:	0800a209 	.word	0x0800a209
 800a1c4:	0800a209 	.word	0x0800a209
 800a1c8:	0800a209 	.word	0x0800a209
 800a1cc:	0800a209 	.word	0x0800a209
 800a1d0:	0800a209 	.word	0x0800a209
 800a1d4:	0800a209 	.word	0x0800a209
 800a1d8:	0800a209 	.word	0x0800a209
 800a1dc:	0800a209 	.word	0x0800a209
 800a1e0:	0800a209 	.word	0x0800a209
 800a1e4:	0800a209 	.word	0x0800a209
 800a1e8:	0800a209 	.word	0x0800a209
 800a1ec:	0800a209 	.word	0x0800a209
 800a1f0:	0800a209 	.word	0x0800a209
 800a1f4:	0800a209 	.word	0x0800a209
 800a1f8:	0800a209 	.word	0x0800a209
 800a1fc:	0800a209 	.word	0x0800a209
 800a200:	0800a209 	.word	0x0800a209
 800a204:	0800a209 	.word	0x0800a209
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a208:	bf00      	nop
  }

  return (USBD_OK);
 800a20a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	bc80      	pop	{r7}
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop

0800a218 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	dataSize = *Len;
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a1c      	ldr	r2, [pc, #112]	; (800a298 <CDC_Receive_FS+0x80>)
 800a228:	6013      	str	r3, [r2, #0]
			if(HAL_GetTick() - time > 200)
 800a22a:	f7f7 ffa3 	bl	8002174 <HAL_GetTick>
 800a22e:	4602      	mov	r2, r0
 800a230:	4b1a      	ldr	r3, [pc, #104]	; (800a29c <CDC_Receive_FS+0x84>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	1ad3      	subs	r3, r2, r3
 800a236:	2bc8      	cmp	r3, #200	; 0xc8
 800a238:	d91a      	bls.n	800a270 <CDC_Receive_FS+0x58>
			{
				Rxcount = 0;
 800a23a:	4b19      	ldr	r3, [pc, #100]	; (800a2a0 <CDC_Receive_FS+0x88>)
 800a23c:	2200      	movs	r2, #0
 800a23e:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < dataSize; i++)
 800a240:	2300      	movs	r3, #0
 800a242:	60fb      	str	r3, [r7, #12]
 800a244:	e00f      	b.n	800a266 <CDC_Receive_FS+0x4e>
				{
					ReceivedData[Rxcount++] = Buf[i];
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	441a      	add	r2, r3
 800a24c:	4b14      	ldr	r3, [pc, #80]	; (800a2a0 <CDC_Receive_FS+0x88>)
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	1c59      	adds	r1, r3, #1
 800a252:	b2c8      	uxtb	r0, r1
 800a254:	4912      	ldr	r1, [pc, #72]	; (800a2a0 <CDC_Receive_FS+0x88>)
 800a256:	7008      	strb	r0, [r1, #0]
 800a258:	4619      	mov	r1, r3
 800a25a:	7812      	ldrb	r2, [r2, #0]
 800a25c:	4b11      	ldr	r3, [pc, #68]	; (800a2a4 <CDC_Receive_FS+0x8c>)
 800a25e:	545a      	strb	r2, [r3, r1]
				for(int i = 0; i < dataSize; i++)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	3301      	adds	r3, #1
 800a264:	60fb      	str	r3, [r7, #12]
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	4b0b      	ldr	r3, [pc, #44]	; (800a298 <CDC_Receive_FS+0x80>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d3ea      	bcc.n	800a246 <CDC_Receive_FS+0x2e>
				}
			}
		        USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a270:	6879      	ldr	r1, [r7, #4]
 800a272:	480d      	ldr	r0, [pc, #52]	; (800a2a8 <CDC_Receive_FS+0x90>)
 800a274:	f7fe fe1f 	bl	8008eb6 <USBD_CDC_SetRxBuffer>
		        USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a278:	480b      	ldr	r0, [pc, #44]	; (800a2a8 <CDC_Receive_FS+0x90>)
 800a27a:	f7fe fe5e 	bl	8008f3a <USBD_CDC_ReceivePacket>
			check = 1; //nhan biet co du lieu den
 800a27e:	4b0b      	ldr	r3, [pc, #44]	; (800a2ac <CDC_Receive_FS+0x94>)
 800a280:	2201      	movs	r2, #1
 800a282:	701a      	strb	r2, [r3, #0]
			time = HAL_GetTick();
 800a284:	f7f7 ff76 	bl	8002174 <HAL_GetTick>
 800a288:	4603      	mov	r3, r0
 800a28a:	4a04      	ldr	r2, [pc, #16]	; (800a29c <CDC_Receive_FS+0x84>)
 800a28c:	6013      	str	r3, [r2, #0]
		  return (USBD_OK);
 800a28e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a290:	4618      	mov	r0, r3
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	2000067c 	.word	0x2000067c
 800a29c:	20000634 	.word	0x20000634
 800a2a0:	20000678 	.word	0x20000678
 800a2a4:	20000638 	.word	0x20000638
 800a2a8:	200002f0 	.word	0x200002f0
 800a2ac:	20000680 	.word	0x20000680

0800a2b0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a2c0:	4b0d      	ldr	r3, [pc, #52]	; (800a2f8 <CDC_Transmit_FS+0x48>)
 800a2c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d001      	beq.n	800a2d6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e00b      	b.n	800a2ee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a2d6:	887b      	ldrh	r3, [r7, #2]
 800a2d8:	461a      	mov	r2, r3
 800a2da:	6879      	ldr	r1, [r7, #4]
 800a2dc:	4806      	ldr	r0, [pc, #24]	; (800a2f8 <CDC_Transmit_FS+0x48>)
 800a2de:	f7fe fdd1 	bl	8008e84 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a2e2:	4805      	ldr	r0, [pc, #20]	; (800a2f8 <CDC_Transmit_FS+0x48>)
 800a2e4:	f7fe fdfa 	bl	8008edc <USBD_CDC_TransmitPacket>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	200002f0 	.word	0x200002f0

0800a2fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	4603      	mov	r3, r0
 800a304:	6039      	str	r1, [r7, #0]
 800a306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	2212      	movs	r2, #18
 800a30c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a30e:	4b03      	ldr	r3, [pc, #12]	; (800a31c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a310:	4618      	mov	r0, r3
 800a312:	370c      	adds	r7, #12
 800a314:	46bd      	mov	sp, r7
 800a316:	bc80      	pop	{r7}
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	200001c8 	.word	0x200001c8

0800a320 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	4603      	mov	r3, r0
 800a328:	6039      	str	r1, [r7, #0]
 800a32a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	2204      	movs	r2, #4
 800a330:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a332:	4b03      	ldr	r3, [pc, #12]	; (800a340 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a334:	4618      	mov	r0, r3
 800a336:	370c      	adds	r7, #12
 800a338:	46bd      	mov	sp, r7
 800a33a:	bc80      	pop	{r7}
 800a33c:	4770      	bx	lr
 800a33e:	bf00      	nop
 800a340:	200001dc 	.word	0x200001dc

0800a344 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	4603      	mov	r3, r0
 800a34c:	6039      	str	r1, [r7, #0]
 800a34e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a350:	79fb      	ldrb	r3, [r7, #7]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d105      	bne.n	800a362 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a356:	683a      	ldr	r2, [r7, #0]
 800a358:	4907      	ldr	r1, [pc, #28]	; (800a378 <USBD_FS_ProductStrDescriptor+0x34>)
 800a35a:	4808      	ldr	r0, [pc, #32]	; (800a37c <USBD_FS_ProductStrDescriptor+0x38>)
 800a35c:	f7ff fdd4 	bl	8009f08 <USBD_GetString>
 800a360:	e004      	b.n	800a36c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	4904      	ldr	r1, [pc, #16]	; (800a378 <USBD_FS_ProductStrDescriptor+0x34>)
 800a366:	4805      	ldr	r0, [pc, #20]	; (800a37c <USBD_FS_ProductStrDescriptor+0x38>)
 800a368:	f7ff fdce 	bl	8009f08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a36c:	4b02      	ldr	r3, [pc, #8]	; (800a378 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	20000684 	.word	0x20000684
 800a37c:	0800abf0 	.word	0x0800abf0

0800a380 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	4603      	mov	r3, r0
 800a388:	6039      	str	r1, [r7, #0]
 800a38a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a38c:	683a      	ldr	r2, [r7, #0]
 800a38e:	4904      	ldr	r1, [pc, #16]	; (800a3a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a390:	4804      	ldr	r0, [pc, #16]	; (800a3a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a392:	f7ff fdb9 	bl	8009f08 <USBD_GetString>
  return USBD_StrDesc;
 800a396:	4b02      	ldr	r3, [pc, #8]	; (800a3a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	20000684 	.word	0x20000684
 800a3a4:	0800ac08 	.word	0x0800ac08

0800a3a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	6039      	str	r1, [r7, #0]
 800a3b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	221a      	movs	r2, #26
 800a3b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a3ba:	f000 f843 	bl	800a444 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a3be:	4b02      	ldr	r3, [pc, #8]	; (800a3c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	200001e0 	.word	0x200001e0

0800a3cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	6039      	str	r1, [r7, #0]
 800a3d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a3d8:	79fb      	ldrb	r3, [r7, #7]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d105      	bne.n	800a3ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a3de:	683a      	ldr	r2, [r7, #0]
 800a3e0:	4907      	ldr	r1, [pc, #28]	; (800a400 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a3e2:	4808      	ldr	r0, [pc, #32]	; (800a404 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3e4:	f7ff fd90 	bl	8009f08 <USBD_GetString>
 800a3e8:	e004      	b.n	800a3f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	4904      	ldr	r1, [pc, #16]	; (800a400 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a3ee:	4805      	ldr	r0, [pc, #20]	; (800a404 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3f0:	f7ff fd8a 	bl	8009f08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3f4:	4b02      	ldr	r3, [pc, #8]	; (800a400 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3708      	adds	r7, #8
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	20000684 	.word	0x20000684
 800a404:	0800ac1c 	.word	0x0800ac1c

0800a408 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	4603      	mov	r3, r0
 800a410:	6039      	str	r1, [r7, #0]
 800a412:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a414:	79fb      	ldrb	r3, [r7, #7]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d105      	bne.n	800a426 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a41a:	683a      	ldr	r2, [r7, #0]
 800a41c:	4907      	ldr	r1, [pc, #28]	; (800a43c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a41e:	4808      	ldr	r0, [pc, #32]	; (800a440 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a420:	f7ff fd72 	bl	8009f08 <USBD_GetString>
 800a424:	e004      	b.n	800a430 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	4904      	ldr	r1, [pc, #16]	; (800a43c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a42a:	4805      	ldr	r0, [pc, #20]	; (800a440 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a42c:	f7ff fd6c 	bl	8009f08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a430:	4b02      	ldr	r3, [pc, #8]	; (800a43c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a432:	4618      	mov	r0, r3
 800a434:	3708      	adds	r7, #8
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	20000684 	.word	0x20000684
 800a440:	0800ac28 	.word	0x0800ac28

0800a444 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a44a:	4b0f      	ldr	r3, [pc, #60]	; (800a488 <Get_SerialNum+0x44>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a450:	4b0e      	ldr	r3, [pc, #56]	; (800a48c <Get_SerialNum+0x48>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a456:	4b0e      	ldr	r3, [pc, #56]	; (800a490 <Get_SerialNum+0x4c>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4413      	add	r3, r2
 800a462:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d009      	beq.n	800a47e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a46a:	2208      	movs	r2, #8
 800a46c:	4909      	ldr	r1, [pc, #36]	; (800a494 <Get_SerialNum+0x50>)
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f000 f814 	bl	800a49c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a474:	2204      	movs	r2, #4
 800a476:	4908      	ldr	r1, [pc, #32]	; (800a498 <Get_SerialNum+0x54>)
 800a478:	68b8      	ldr	r0, [r7, #8]
 800a47a:	f000 f80f 	bl	800a49c <IntToUnicode>
  }
}
 800a47e:	bf00      	nop
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	1ffff7e8 	.word	0x1ffff7e8
 800a48c:	1ffff7ec 	.word	0x1ffff7ec
 800a490:	1ffff7f0 	.word	0x1ffff7f0
 800a494:	200001e2 	.word	0x200001e2
 800a498:	200001f2 	.word	0x200001f2

0800a49c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b087      	sub	sp, #28
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	75fb      	strb	r3, [r7, #23]
 800a4b2:	e027      	b.n	800a504 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	0f1b      	lsrs	r3, r3, #28
 800a4b8:	2b09      	cmp	r3, #9
 800a4ba:	d80b      	bhi.n	800a4d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	0f1b      	lsrs	r3, r3, #28
 800a4c0:	b2da      	uxtb	r2, r3
 800a4c2:	7dfb      	ldrb	r3, [r7, #23]
 800a4c4:	005b      	lsls	r3, r3, #1
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	440b      	add	r3, r1
 800a4cc:	3230      	adds	r2, #48	; 0x30
 800a4ce:	b2d2      	uxtb	r2, r2
 800a4d0:	701a      	strb	r2, [r3, #0]
 800a4d2:	e00a      	b.n	800a4ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	0f1b      	lsrs	r3, r3, #28
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	7dfb      	ldrb	r3, [r7, #23]
 800a4dc:	005b      	lsls	r3, r3, #1
 800a4de:	4619      	mov	r1, r3
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	440b      	add	r3, r1
 800a4e4:	3237      	adds	r2, #55	; 0x37
 800a4e6:	b2d2      	uxtb	r2, r2
 800a4e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	011b      	lsls	r3, r3, #4
 800a4ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a4f0:	7dfb      	ldrb	r3, [r7, #23]
 800a4f2:	005b      	lsls	r3, r3, #1
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	68ba      	ldr	r2, [r7, #8]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a4fe:	7dfb      	ldrb	r3, [r7, #23]
 800a500:	3301      	adds	r3, #1
 800a502:	75fb      	strb	r3, [r7, #23]
 800a504:	7dfa      	ldrb	r2, [r7, #23]
 800a506:	79fb      	ldrb	r3, [r7, #7]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d3d3      	bcc.n	800a4b4 <IntToUnicode+0x18>
  }
}
 800a50c:	bf00      	nop
 800a50e:	bf00      	nop
 800a510:	371c      	adds	r7, #28
 800a512:	46bd      	mov	sp, r7
 800a514:	bc80      	pop	{r7}
 800a516:	4770      	bx	lr

0800a518 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a0d      	ldr	r2, [pc, #52]	; (800a55c <HAL_PCD_MspInit+0x44>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d113      	bne.n	800a552 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a52a:	4b0d      	ldr	r3, [pc, #52]	; (800a560 <HAL_PCD_MspInit+0x48>)
 800a52c:	69db      	ldr	r3, [r3, #28]
 800a52e:	4a0c      	ldr	r2, [pc, #48]	; (800a560 <HAL_PCD_MspInit+0x48>)
 800a530:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a534:	61d3      	str	r3, [r2, #28]
 800a536:	4b0a      	ldr	r3, [pc, #40]	; (800a560 <HAL_PCD_MspInit+0x48>)
 800a538:	69db      	ldr	r3, [r3, #28]
 800a53a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a53e:	60fb      	str	r3, [r7, #12]
 800a540:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a542:	2200      	movs	r2, #0
 800a544:	2100      	movs	r1, #0
 800a546:	2014      	movs	r0, #20
 800a548:	f7f7 ff19 	bl	800237e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a54c:	2014      	movs	r0, #20
 800a54e:	f7f7 ff32 	bl	80023b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a552:	bf00      	nop
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	40005c00 	.word	0x40005c00
 800a560:	40021000 	.word	0x40021000

0800a564 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b082      	sub	sp, #8
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a578:	4619      	mov	r1, r3
 800a57a:	4610      	mov	r0, r2
 800a57c:	f7fe fd93 	bl	80090a6 <USBD_LL_SetupStage>
}
 800a580:	bf00      	nop
 800a582:	3708      	adds	r7, #8
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	460b      	mov	r3, r1
 800a592:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a59a:	78fa      	ldrb	r2, [r7, #3]
 800a59c:	6879      	ldr	r1, [r7, #4]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	4413      	add	r3, r2
 800a5a4:	00db      	lsls	r3, r3, #3
 800a5a6:	440b      	add	r3, r1
 800a5a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	78fb      	ldrb	r3, [r7, #3]
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	f7fe fdc5 	bl	8009140 <USBD_LL_DataOutStage>
}
 800a5b6:	bf00      	nop
 800a5b8:	3708      	adds	r7, #8
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b082      	sub	sp, #8
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a5d0:	78fa      	ldrb	r2, [r7, #3]
 800a5d2:	6879      	ldr	r1, [r7, #4]
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4413      	add	r3, r2
 800a5da:	00db      	lsls	r3, r3, #3
 800a5dc:	440b      	add	r3, r1
 800a5de:	333c      	adds	r3, #60	; 0x3c
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	78fb      	ldrb	r3, [r7, #3]
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	f7fe fe1c 	bl	8009222 <USBD_LL_DataInStage>
}
 800a5ea:	bf00      	nop
 800a5ec:	3708      	adds	r7, #8
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b082      	sub	sp, #8
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a600:	4618      	mov	r0, r3
 800a602:	f7fe ff2c 	bl	800945e <USBD_LL_SOF>
}
 800a606:	bf00      	nop
 800a608:	3708      	adds	r7, #8
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	b084      	sub	sp, #16
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a616:	2301      	movs	r3, #1
 800a618:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d001      	beq.n	800a626 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a622:	f7f7 fa0c 	bl	8001a3e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a62c:	7bfa      	ldrb	r2, [r7, #15]
 800a62e:	4611      	mov	r1, r2
 800a630:	4618      	mov	r0, r3
 800a632:	f7fe fedc 	bl	80093ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7fe fe95 	bl	800936c <USBD_LL_Reset>
}
 800a642:	bf00      	nop
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
	...

0800a64c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7fe fed6 	bl	800940c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	699b      	ldr	r3, [r3, #24]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d005      	beq.n	800a674 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a668:	4b04      	ldr	r3, [pc, #16]	; (800a67c <HAL_PCD_SuspendCallback+0x30>)
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	4a03      	ldr	r2, [pc, #12]	; (800a67c <HAL_PCD_SuspendCallback+0x30>)
 800a66e:	f043 0306 	orr.w	r3, r3, #6
 800a672:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a674:	bf00      	nop
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	e000ed00 	.word	0xe000ed00

0800a680 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a68e:	4618      	mov	r0, r3
 800a690:	f7fe fed0 	bl	8009434 <USBD_LL_Resume>
}
 800a694:	bf00      	nop
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a6a4:	4a28      	ldr	r2, [pc, #160]	; (800a748 <USBD_LL_Init+0xac>)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a26      	ldr	r2, [pc, #152]	; (800a748 <USBD_LL_Init+0xac>)
 800a6b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a6b4:	4b24      	ldr	r3, [pc, #144]	; (800a748 <USBD_LL_Init+0xac>)
 800a6b6:	4a25      	ldr	r2, [pc, #148]	; (800a74c <USBD_LL_Init+0xb0>)
 800a6b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a6ba:	4b23      	ldr	r3, [pc, #140]	; (800a748 <USBD_LL_Init+0xac>)
 800a6bc:	2208      	movs	r2, #8
 800a6be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a6c0:	4b21      	ldr	r3, [pc, #132]	; (800a748 <USBD_LL_Init+0xac>)
 800a6c2:	2202      	movs	r2, #2
 800a6c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a6c6:	4b20      	ldr	r3, [pc, #128]	; (800a748 <USBD_LL_Init+0xac>)
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a6cc:	4b1e      	ldr	r3, [pc, #120]	; (800a748 <USBD_LL_Init+0xac>)
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a6d2:	4b1d      	ldr	r3, [pc, #116]	; (800a748 <USBD_LL_Init+0xac>)
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a6d8:	481b      	ldr	r0, [pc, #108]	; (800a748 <USBD_LL_Init+0xac>)
 800a6da:	f7f9 f9b3 	bl	8003a44 <HAL_PCD_Init>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d001      	beq.n	800a6e8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a6e4:	f7f7 f9ab 	bl	8001a3e <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a6ee:	2318      	movs	r3, #24
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	2100      	movs	r1, #0
 800a6f4:	f7fa fe27 	bl	8005346 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a6fe:	2358      	movs	r3, #88	; 0x58
 800a700:	2200      	movs	r2, #0
 800a702:	2180      	movs	r1, #128	; 0x80
 800a704:	f7fa fe1f 	bl	8005346 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a70e:	23c0      	movs	r3, #192	; 0xc0
 800a710:	2200      	movs	r2, #0
 800a712:	2181      	movs	r1, #129	; 0x81
 800a714:	f7fa fe17 	bl	8005346 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a71e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a722:	2200      	movs	r2, #0
 800a724:	2101      	movs	r1, #1
 800a726:	f7fa fe0e 	bl	8005346 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a730:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a734:	2200      	movs	r2, #0
 800a736:	2182      	movs	r1, #130	; 0x82
 800a738:	f7fa fe05 	bl	8005346 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	20000884 	.word	0x20000884
 800a74c:	40005c00 	.word	0x40005c00

0800a750 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a758:	2300      	movs	r3, #0
 800a75a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a75c:	2300      	movs	r3, #0
 800a75e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a766:	4618      	mov	r0, r3
 800a768:	f7f9 fa77 	bl	8003c5a <HAL_PCD_Start>
 800a76c:	4603      	mov	r3, r0
 800a76e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a770:	7bfb      	ldrb	r3, [r7, #15]
 800a772:	4618      	mov	r0, r3
 800a774:	f000 f94e 	bl	800aa14 <USBD_Get_USB_Status>
 800a778:	4603      	mov	r3, r0
 800a77a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a77c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b084      	sub	sp, #16
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
 800a78e:	4608      	mov	r0, r1
 800a790:	4611      	mov	r1, r2
 800a792:	461a      	mov	r2, r3
 800a794:	4603      	mov	r3, r0
 800a796:	70fb      	strb	r3, [r7, #3]
 800a798:	460b      	mov	r3, r1
 800a79a:	70bb      	strb	r3, [r7, #2]
 800a79c:	4613      	mov	r3, r2
 800a79e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a7ae:	78bb      	ldrb	r3, [r7, #2]
 800a7b0:	883a      	ldrh	r2, [r7, #0]
 800a7b2:	78f9      	ldrb	r1, [r7, #3]
 800a7b4:	f7f9 fbef 	bl	8003f96 <HAL_PCD_EP_Open>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7bc:	7bfb      	ldrb	r3, [r7, #15]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f000 f928 	bl	800aa14 <USBD_Get_USB_Status>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b084      	sub	sp, #16
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
 800a7da:	460b      	mov	r3, r1
 800a7dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a7ec:	78fa      	ldrb	r2, [r7, #3]
 800a7ee:	4611      	mov	r1, r2
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7f9 fc36 	bl	8004062 <HAL_PCD_EP_Close>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7fa:	7bfb      	ldrb	r3, [r7, #15]
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f000 f909 	bl	800aa14 <USBD_Get_USB_Status>
 800a802:	4603      	mov	r3, r0
 800a804:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a806:	7bbb      	ldrb	r3, [r7, #14]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	460b      	mov	r3, r1
 800a81a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a81c:	2300      	movs	r3, #0
 800a81e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a820:	2300      	movs	r3, #0
 800a822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a82a:	78fa      	ldrb	r2, [r7, #3]
 800a82c:	4611      	mov	r1, r2
 800a82e:	4618      	mov	r0, r3
 800a830:	f7f9 fcf6 	bl	8004220 <HAL_PCD_EP_SetStall>
 800a834:	4603      	mov	r3, r0
 800a836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a838:	7bfb      	ldrb	r3, [r7, #15]
 800a83a:	4618      	mov	r0, r3
 800a83c:	f000 f8ea 	bl	800aa14 <USBD_Get_USB_Status>
 800a840:	4603      	mov	r3, r0
 800a842:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a844:	7bbb      	ldrb	r3, [r7, #14]
}
 800a846:	4618      	mov	r0, r3
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b084      	sub	sp, #16
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
 800a856:	460b      	mov	r3, r1
 800a858:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a85e:	2300      	movs	r3, #0
 800a860:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a868:	78fa      	ldrb	r2, [r7, #3]
 800a86a:	4611      	mov	r1, r2
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7f9 fd37 	bl	80042e0 <HAL_PCD_EP_ClrStall>
 800a872:	4603      	mov	r3, r0
 800a874:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a876:	7bfb      	ldrb	r3, [r7, #15]
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 f8cb 	bl	800aa14 <USBD_Get_USB_Status>
 800a87e:	4603      	mov	r3, r0
 800a880:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a882:	7bbb      	ldrb	r3, [r7, #14]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	460b      	mov	r3, r1
 800a896:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a89e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a8a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	da0c      	bge.n	800a8c2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a8a8:	78fb      	ldrb	r3, [r7, #3]
 800a8aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8ae:	68f9      	ldr	r1, [r7, #12]
 800a8b0:	1c5a      	adds	r2, r3, #1
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	4413      	add	r3, r2
 800a8b8:	00db      	lsls	r3, r3, #3
 800a8ba:	440b      	add	r3, r1
 800a8bc:	3302      	adds	r3, #2
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	e00b      	b.n	800a8da <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a8c2:	78fb      	ldrb	r3, [r7, #3]
 800a8c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8c8:	68f9      	ldr	r1, [r7, #12]
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	4413      	add	r3, r2
 800a8d0:	00db      	lsls	r3, r3, #3
 800a8d2:	440b      	add	r3, r1
 800a8d4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a8d8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3714      	adds	r7, #20
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bc80      	pop	{r7}
 800a8e2:	4770      	bx	lr

0800a8e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8fe:	78fa      	ldrb	r2, [r7, #3]
 800a900:	4611      	mov	r1, r2
 800a902:	4618      	mov	r0, r3
 800a904:	f7f9 fb22 	bl	8003f4c <HAL_PCD_SetAddress>
 800a908:	4603      	mov	r3, r0
 800a90a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a90c:	7bfb      	ldrb	r3, [r7, #15]
 800a90e:	4618      	mov	r0, r3
 800a910:	f000 f880 	bl	800aa14 <USBD_Get_USB_Status>
 800a914:	4603      	mov	r3, r0
 800a916:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a918:	7bbb      	ldrb	r3, [r7, #14]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b086      	sub	sp, #24
 800a926:	af00      	add	r7, sp, #0
 800a928:	60f8      	str	r0, [r7, #12]
 800a92a:	607a      	str	r2, [r7, #4]
 800a92c:	461a      	mov	r2, r3
 800a92e:	460b      	mov	r3, r1
 800a930:	72fb      	strb	r3, [r7, #11]
 800a932:	4613      	mov	r3, r2
 800a934:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a944:	893b      	ldrh	r3, [r7, #8]
 800a946:	7af9      	ldrb	r1, [r7, #11]
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	f7f9 fc26 	bl	800419a <HAL_PCD_EP_Transmit>
 800a94e:	4603      	mov	r3, r0
 800a950:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a952:	7dfb      	ldrb	r3, [r7, #23]
 800a954:	4618      	mov	r0, r3
 800a956:	f000 f85d 	bl	800aa14 <USBD_Get_USB_Status>
 800a95a:	4603      	mov	r3, r0
 800a95c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a95e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3718      	adds	r7, #24
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	607a      	str	r2, [r7, #4]
 800a972:	461a      	mov	r2, r3
 800a974:	460b      	mov	r3, r1
 800a976:	72fb      	strb	r3, [r7, #11]
 800a978:	4613      	mov	r3, r2
 800a97a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a980:	2300      	movs	r3, #0
 800a982:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a98a:	893b      	ldrh	r3, [r7, #8]
 800a98c:	7af9      	ldrb	r1, [r7, #11]
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	f7f9 fbaf 	bl	80040f2 <HAL_PCD_EP_Receive>
 800a994:	4603      	mov	r3, r0
 800a996:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a998:	7dfb      	ldrb	r3, [r7, #23]
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 f83a 	bl	800aa14 <USBD_Get_USB_Status>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9a4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3718      	adds	r7, #24
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b082      	sub	sp, #8
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9c0:	78fa      	ldrb	r2, [r7, #3]
 800a9c2:	4611      	mov	r1, r2
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7f9 fbd1 	bl	800416c <HAL_PCD_EP_GetRxCount>
 800a9ca:	4603      	mov	r3, r0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3708      	adds	r7, #8
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a9dc:	4b02      	ldr	r3, [pc, #8]	; (800a9e8 <USBD_static_malloc+0x14>)
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bc80      	pop	{r7}
 800a9e6:	4770      	bx	lr
 800a9e8:	20000b70 	.word	0x20000b70

0800a9ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]

}
 800a9f4:	bf00      	nop
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bc80      	pop	{r7}
 800a9fc:	4770      	bx	lr

0800a9fe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b083      	sub	sp, #12
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	460b      	mov	r3, r1
 800aa08:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800aa0a:	bf00      	nop
 800aa0c:	370c      	adds	r7, #12
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bc80      	pop	{r7}
 800aa12:	4770      	bx	lr

0800aa14 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aa22:	79fb      	ldrb	r3, [r7, #7]
 800aa24:	2b03      	cmp	r3, #3
 800aa26:	d817      	bhi.n	800aa58 <USBD_Get_USB_Status+0x44>
 800aa28:	a201      	add	r2, pc, #4	; (adr r2, 800aa30 <USBD_Get_USB_Status+0x1c>)
 800aa2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa2e:	bf00      	nop
 800aa30:	0800aa41 	.word	0x0800aa41
 800aa34:	0800aa47 	.word	0x0800aa47
 800aa38:	0800aa4d 	.word	0x0800aa4d
 800aa3c:	0800aa53 	.word	0x0800aa53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aa40:	2300      	movs	r3, #0
 800aa42:	73fb      	strb	r3, [r7, #15]
    break;
 800aa44:	e00b      	b.n	800aa5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa46:	2302      	movs	r3, #2
 800aa48:	73fb      	strb	r3, [r7, #15]
    break;
 800aa4a:	e008      	b.n	800aa5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	73fb      	strb	r3, [r7, #15]
    break;
 800aa50:	e005      	b.n	800aa5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa52:	2302      	movs	r3, #2
 800aa54:	73fb      	strb	r3, [r7, #15]
    break;
 800aa56:	e002      	b.n	800aa5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aa58:	2302      	movs	r3, #2
 800aa5a:	73fb      	strb	r3, [r7, #15]
    break;
 800aa5c:	bf00      	nop
  }
  return usb_status;
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3714      	adds	r7, #20
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bc80      	pop	{r7}
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop

0800aa6c <__libc_init_array>:
 800aa6c:	b570      	push	{r4, r5, r6, lr}
 800aa6e:	2600      	movs	r6, #0
 800aa70:	4d0c      	ldr	r5, [pc, #48]	; (800aaa4 <__libc_init_array+0x38>)
 800aa72:	4c0d      	ldr	r4, [pc, #52]	; (800aaa8 <__libc_init_array+0x3c>)
 800aa74:	1b64      	subs	r4, r4, r5
 800aa76:	10a4      	asrs	r4, r4, #2
 800aa78:	42a6      	cmp	r6, r4
 800aa7a:	d109      	bne.n	800aa90 <__libc_init_array+0x24>
 800aa7c:	f000 f8a4 	bl	800abc8 <_init>
 800aa80:	2600      	movs	r6, #0
 800aa82:	4d0a      	ldr	r5, [pc, #40]	; (800aaac <__libc_init_array+0x40>)
 800aa84:	4c0a      	ldr	r4, [pc, #40]	; (800aab0 <__libc_init_array+0x44>)
 800aa86:	1b64      	subs	r4, r4, r5
 800aa88:	10a4      	asrs	r4, r4, #2
 800aa8a:	42a6      	cmp	r6, r4
 800aa8c:	d105      	bne.n	800aa9a <__libc_init_array+0x2e>
 800aa8e:	bd70      	pop	{r4, r5, r6, pc}
 800aa90:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa94:	4798      	blx	r3
 800aa96:	3601      	adds	r6, #1
 800aa98:	e7ee      	b.n	800aa78 <__libc_init_array+0xc>
 800aa9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa9e:	4798      	blx	r3
 800aaa0:	3601      	adds	r6, #1
 800aaa2:	e7f2      	b.n	800aa8a <__libc_init_array+0x1e>
 800aaa4:	0800ac50 	.word	0x0800ac50
 800aaa8:	0800ac50 	.word	0x0800ac50
 800aaac:	0800ac50 	.word	0x0800ac50
 800aab0:	0800ac54 	.word	0x0800ac54

0800aab4 <memset>:
 800aab4:	4603      	mov	r3, r0
 800aab6:	4402      	add	r2, r0
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d100      	bne.n	800aabe <memset+0xa>
 800aabc:	4770      	bx	lr
 800aabe:	f803 1b01 	strb.w	r1, [r3], #1
 800aac2:	e7f9      	b.n	800aab8 <memset+0x4>
 800aac4:	0000      	movs	r0, r0
	...

0800aac8 <floor>:
 800aac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aacc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800aad0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800aad4:	2e13      	cmp	r6, #19
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	4607      	mov	r7, r0
 800aadc:	460c      	mov	r4, r1
 800aade:	4605      	mov	r5, r0
 800aae0:	dc33      	bgt.n	800ab4a <floor+0x82>
 800aae2:	2e00      	cmp	r6, #0
 800aae4:	da14      	bge.n	800ab10 <floor+0x48>
 800aae6:	a334      	add	r3, pc, #208	; (adr r3, 800abb8 <floor+0xf0>)
 800aae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaec:	f7f5 fbb4 	bl	8000258 <__adddf3>
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	f7f5 fff6 	bl	8000ae4 <__aeabi_dcmpgt>
 800aaf8:	b138      	cbz	r0, 800ab0a <floor+0x42>
 800aafa:	2c00      	cmp	r4, #0
 800aafc:	da58      	bge.n	800abb0 <floor+0xe8>
 800aafe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ab02:	431d      	orrs	r5, r3
 800ab04:	d001      	beq.n	800ab0a <floor+0x42>
 800ab06:	2500      	movs	r5, #0
 800ab08:	4c2d      	ldr	r4, [pc, #180]	; (800abc0 <floor+0xf8>)
 800ab0a:	4623      	mov	r3, r4
 800ab0c:	462f      	mov	r7, r5
 800ab0e:	e025      	b.n	800ab5c <floor+0x94>
 800ab10:	4a2c      	ldr	r2, [pc, #176]	; (800abc4 <floor+0xfc>)
 800ab12:	fa42 f806 	asr.w	r8, r2, r6
 800ab16:	ea01 0208 	and.w	r2, r1, r8
 800ab1a:	4302      	orrs	r2, r0
 800ab1c:	d01e      	beq.n	800ab5c <floor+0x94>
 800ab1e:	a326      	add	r3, pc, #152	; (adr r3, 800abb8 <floor+0xf0>)
 800ab20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab24:	f7f5 fb98 	bl	8000258 <__adddf3>
 800ab28:	2200      	movs	r2, #0
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	f7f5 ffda 	bl	8000ae4 <__aeabi_dcmpgt>
 800ab30:	2800      	cmp	r0, #0
 800ab32:	d0ea      	beq.n	800ab0a <floor+0x42>
 800ab34:	2c00      	cmp	r4, #0
 800ab36:	bfbe      	ittt	lt
 800ab38:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ab3c:	fa43 f606 	asrlt.w	r6, r3, r6
 800ab40:	19a4      	addlt	r4, r4, r6
 800ab42:	2500      	movs	r5, #0
 800ab44:	ea24 0408 	bic.w	r4, r4, r8
 800ab48:	e7df      	b.n	800ab0a <floor+0x42>
 800ab4a:	2e33      	cmp	r6, #51	; 0x33
 800ab4c:	dd0a      	ble.n	800ab64 <floor+0x9c>
 800ab4e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ab52:	d103      	bne.n	800ab5c <floor+0x94>
 800ab54:	f7f5 fb80 	bl	8000258 <__adddf3>
 800ab58:	4607      	mov	r7, r0
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	4638      	mov	r0, r7
 800ab5e:	4619      	mov	r1, r3
 800ab60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab64:	f04f 32ff 	mov.w	r2, #4294967295
 800ab68:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800ab6c:	fa22 f808 	lsr.w	r8, r2, r8
 800ab70:	ea18 0f00 	tst.w	r8, r0
 800ab74:	d0f2      	beq.n	800ab5c <floor+0x94>
 800ab76:	a310      	add	r3, pc, #64	; (adr r3, 800abb8 <floor+0xf0>)
 800ab78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7c:	f7f5 fb6c 	bl	8000258 <__adddf3>
 800ab80:	2200      	movs	r2, #0
 800ab82:	2300      	movs	r3, #0
 800ab84:	f7f5 ffae 	bl	8000ae4 <__aeabi_dcmpgt>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d0be      	beq.n	800ab0a <floor+0x42>
 800ab8c:	2c00      	cmp	r4, #0
 800ab8e:	da02      	bge.n	800ab96 <floor+0xce>
 800ab90:	2e14      	cmp	r6, #20
 800ab92:	d103      	bne.n	800ab9c <floor+0xd4>
 800ab94:	3401      	adds	r4, #1
 800ab96:	ea25 0508 	bic.w	r5, r5, r8
 800ab9a:	e7b6      	b.n	800ab0a <floor+0x42>
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800aba2:	fa03 f606 	lsl.w	r6, r3, r6
 800aba6:	4435      	add	r5, r6
 800aba8:	42bd      	cmp	r5, r7
 800abaa:	bf38      	it	cc
 800abac:	18e4      	addcc	r4, r4, r3
 800abae:	e7f2      	b.n	800ab96 <floor+0xce>
 800abb0:	2500      	movs	r5, #0
 800abb2:	462c      	mov	r4, r5
 800abb4:	e7a9      	b.n	800ab0a <floor+0x42>
 800abb6:	bf00      	nop
 800abb8:	8800759c 	.word	0x8800759c
 800abbc:	7e37e43c 	.word	0x7e37e43c
 800abc0:	bff00000 	.word	0xbff00000
 800abc4:	000fffff 	.word	0x000fffff

0800abc8 <_init>:
 800abc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abca:	bf00      	nop
 800abcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abce:	bc08      	pop	{r3}
 800abd0:	469e      	mov	lr, r3
 800abd2:	4770      	bx	lr

0800abd4 <_fini>:
 800abd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd6:	bf00      	nop
 800abd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abda:	bc08      	pop	{r3}
 800abdc:	469e      	mov	lr, r3
 800abde:	4770      	bx	lr
